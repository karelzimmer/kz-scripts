#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Pakket kz bouwen.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
###############################################################################
PROGRAM_PATH=$(realpath "$(dirname  "$0")")
source "$PROGRAM_PATH"/kz-common.sh
PROGRAM_NAME=kz-build
DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
RELEASE_YEAR=2021


###############################################################################
# Global constants
###############################################################################

readonly    RUN_AS_SUPERUSER=false
readonly    OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly    OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly    USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE_COMMON"
readonly    HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Pakket kz bouwen.

Opties:
$OPTIONS_HELP_COMMON"

readonly    DOCS_REPO=$HOME/kz-docs
readonly    SCRIPTS_REPO=$HOME/kz-scripts

readonly    DEB_REPO=$HOME/kz-deb
readonly    DEB_APPDIR=$DEB_REPO/app
readonly    DEB_DISTDIR=$DEB_REPO/dist
readonly    DEB_NAME=kz_365_all.deb

readonly    UPLOADS_REPO=$HOME/kz-uploads
readonly    UPLOADS_APPDIR=$UPLOADS_REPO/app
readonly    UPLOADS_DISTDIR=$UPLOADS_REPO/dist

readonly -A SOURCE_UPLOADS=(
                [APP]=$UPLOADS_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A TARGET_UPLOADS=(
               [DIST]=$UPLOADS_DISTDIR
                [DEB]=$UPLOADS_DISTDIR/downloads/kz
               [DOCS]=$UPLOADS_DISTDIR/data/linux/documents
               [PDFS]=$UPLOADS_DISTDIR/data/linux/pdfs
            [SCRIPTS]=$UPLOADS_DISTDIR/data/linux/scripts
            )

readonly -A SOURCE_DEB=(
                [APP]=$DEB_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A TARGET_DEB=(
               [DIST]=$DEB_DISTDIR
       [APPLICATIONS]=$DEB_DISTDIR/usr/share/applications
        [BACKGROUNDS]=$DEB_DISTDIR/usr/share/backgrounds
    [BACKGROUND_PROP]=$DEB_DISTDIR/usr/share/gnome-background-properties
                [BIN]=$DEB_DISTDIR/usr/bin
                [DOC]=$DEB_DISTDIR/usr/share/doc/kz
                [MAN]=$DEB_DISTDIR/usr/share/man/man1
           [POLICY_1]=$DEB_DISTDIR/usr/share/polkit-1/actions
           [TABCOMPL]=$DEB_DISTDIR/usr/share/bash-completion/completions
    )


###############################################################################
# Global variables
###############################################################################


###############################################################################
# Functions
###############################################################################

check_input() {
    local       karel_full_name=''
    local       ubuntu_full_name=''
    local       debian_full_name=''
    local   -i  getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        TEXT='geen argumenten opgeven'
        printf  "$DISPLAY_NAME: %s\n%s\n"   \
                "$TEXT"                     \
                "$USAGELINE"                >&2
        exit    $ERROR
    fi

    # Ben ik een ontwikkelaar?
    karel_full_name=$(
        getent  passwd  karel           |
        awk     -F':'   '{print $5}'    |
        awk     -F','   '{print $1}'    || true
        )
    ubuntu_full_name=$(
        getent  passwd  ubuntu          |
        awk     -F':'   '{print $5}'    |
        awk     -F','   '{print $1}'    || true
        )
    debian_full_name=$(
        getent  passwd  user            |
        awk     -F':'   '{print $5}'    |
        awk     -F','   '{print $1}'    || true
        )
    if ! [[ ($USER = karel  && $karel_full_name  = 'Karel Zimmer'    )  ||
            ($USER = ubuntu && $ubuntu_full_name = 'Live session user') ||
            ($USER = user   && $debian_full_name = 'Debian Live user')  ]]
    then
            TEXT='alleen uitvoeren als ontwikkelaar'
            printf  "$DISPLAY_NAME: %s\n%s\n"   \
                    "$TEXT"                     \
                    "$USAGELINE"                >&2
            exit    $ERROR
    fi

    # Een non-gui script gestart met optie gui.
    if $OPTION_GUI; then
        OPTION_GUI=false
        DESKTOP_TERMINAL=false
    fi

    check_user
}


process_input() {
    check_dependencies
    remove_backups
    # Er is een afhankelijkheid t.a.v. aanmaken .pdf, vandaar uploads eerst.
    build_uploads
    build_deb
}


check_dependencies() {
    if ! command -v enscript 1> /dev/null; then
        # Voor <man-pag>.pdf.
        log 'Installeer enscript...'
        sudo apt-get install --yes enscript |& $LOGCMD
    fi
    if ! command -v fakeroot 1> /dev/null; then
        # Voor build .deb.
        log 'Installeer fakeroot...'
        sudo apt-get install --yes fakeroot |& $LOGCMD
    fi
    if ! command -v ghostscript 1> /dev/null; then
        # Voor <man-pag>.pdf (ps2pdf).
        log 'Installeer ghostscript...'
        sudo apt-get install --yes ghostscript |& $LOGCMD
    fi
    if ! command -v rsync 1> /dev/null; then
        # Voor build kz-deb en kz-uploads.
        log 'Installeer rsync...'
        sudo apt-get install --yes rsync |& $LOGCMD
    fi
}


remove_backups() {
    find    "$UPLOADS_REPO"             \
            -name '*~'      -delete -or \
            -name '*.*~'    -delete -or \
            -name '*.bak'   -delete     |& $LOGCMD
}


build_uploads() {
    local file=''

    log 'Bouw website...'

    # ------------------
    # Vul dist/ met app/
    # ------------------
    cd "$UPLOADS_APPDIR" || exit $ERROR
    while read -r file; do
        # Kopieer bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff "$file" "$UPLOADS_DISTDIR/$file" &> /dev/null; then
            cp  --parents           \
                --preserve          \
                --verbose           \
                "$file"             \
                "$UPLOADS_DISTDIR"  |& $LOGCMD
        fi
    done < <(find . -type f -print)
    cd "$HOME" || exit $ERROR

    # ---------------------
    # Vul dist/ met kz-docs
    # ---------------------
    # Vanuit gedit aangemaakt.
    rm --force "$HOME"/Documenten/*.pdf
    # Vanuit LibreOffice aangemaakt.
    rm --force "$HOME"/Documenten/Checklists/*.pdf |& $LOGCMD

    cd "${SOURCE_UPLOADS[DOCS]}" || exit $ERROR
    for file in *.odt *.txt; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${TARGET_UPLOADS[DOCS]}/$file" &> /dev/null; then
            cp  --preserve                  \
                --verbose                   \
                "$file"                     \
                "${TARGET_UPLOADS[DOCS]}"   |& $LOGCMD
            lowriter    --headless                          \
                        --convert-to pdf                    \
                        --outdir "${TARGET_UPLOADS[PDFS]}"  \
                        "$file"                             |& $LOGCMD
        fi
    done
    cd "$HOME" || exit $ERROR

    # ------------------------
    # Vul dist/ met kz-scripts
    # ------------------------
    cd "${SOURCE_UPLOADS[SCRIPTS]}" || exit $ERROR
    for file in *; do
        if [[ $file = LICENSE || $file = README.md ]]; then
            continue
        elif [[ -d "$file" ]]; then
            continue
        fi
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${TARGET_UPLOADS[SCRIPTS]}/$file" &> /dev/null; then
            cp  --preserve                      \
                --verbose                       \
                "$file"                         \
                "${TARGET_UPLOADS[SCRIPTS]}"    |& $LOGCMD
            if grep --quiet --regexp='^''.TH ' "$file"; then
                # Man-pagina.
                man     --troff                                 \
                        "${SOURCE_UPLOADS[SCRIPTS]}/$file"      |
                ps2pdf  - "${TARGET_UPLOADS[PDFS]}/$file.pdf"   |& $LOGCMD
            else
                # Script inclusief *.1, *.completion, *.desktop, en *.policy.
                enscript    --quiet                             \
                            --line-numbers                      \
                            --title="$file"                     \
                            --output=-                          \
                            "$file"                             |
                ps2pdf      -                                   \
                            "${TARGET_UPLOADS[PDFS]}/$file.pdf" |& $LOGCMD
            fi
        fi
    done
    cd "$HOME" || exit $ERROR
}


build_deb() {
    local basename=''
    local dir=''
    local file=''
    local newfile=''
    local prefix='nl.karelzimmer.'

    log 'Bouw pakket...'

    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${SOURCE_DEB[APP]}"/   \
            "${TARGET_DEB[DIST]}"   |& $LOGCMD

    # Zorg dat de rechten goed staan voor de rsync.
    chmod 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO"/*
    chmod 'a-x' -- "$SCRIPTS_REPO"/*.* "$SCRIPTS_REPO"/LICENSE

    # Zorg ervoor dat alle benodigde mappen beschikbaar zijn voor de rsync.
    for dir in "${TARGET_DEB[@]}"; do
        mkdir --parents "$dir"
    done

    # Deze rsync is inclusief *.1, *.completion, *.desktop, en *.policy.
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --exclude='__pycache__'     \
            --exclude='LICENSE'         \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "${SOURCE_DEB[SCRIPTS]}"/   \
            "${TARGET_DEB[BIN]}"        |& $LOGCMD

    # Man-pagina's (.1)
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --remove-source-files       \
            "${TARGET_DEB[BIN]}"/*.1    \
            "${TARGET_DEB[MAN]}"        |& $LOGCMD
    gzip --best --force "${TARGET_DEB[MAN]}"/*.1 |& $LOGCMD

    # Tab-completion-scripts (.completion)
    for file in "${TARGET_DEB[BIN]}"/*.completion; do
        basename=$(basename "$file" .completion)
        mv "$file" "${TARGET_DEB[TABCOMPL]}/$basename" |& $LOGCMD
    done

    # Bureaublad-configuratiebestanden (.desktop)
    for file in "${TARGET_DEB[BIN]}"/*.desktop; do
        basename=$(basename "$file")
        mv "$file" "${TARGET_DEB[APPLICATIONS]}/$basename" |& $LOGCMD
    done

    # PolicyKit actiedefinitiebestanden (.policy)
    for file in "${TARGET_DEB[BIN]}"/*.policy; do
        basename=$(basename "$file")
        newfile="${TARGET_DEB[POLICY_1]}/$prefix$basename"
        mv "$file" "$newfile" |& $LOGCMD
    done

    build_background_properties_file

    cp  --archive                                               \
        --update                                                \
        "${TARGET_UPLOADS[PDFS]}/Checklist installatie"*.pdf    \
        "${TARGET_DEB[DOC]}"                                    |& $LOGCMD

    fakeroot    dpkg-deb                            \
                --build                             \
                "$DEB_DISTDIR"                      \
                "${TARGET_UPLOADS[DEB]}/$DEB_NAME"  |& $LOGCMD
}


build_background_properties_file() {
    local wallpaper=''
    local wallpapers_config_file=kz-wallpapers.xml

    {
    printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
    printf '%s\n' '<!DOCTYPE wallpapers SYSTEM "gnome-wp-list.dtd">'
    printf '%s\n' '<wallpapers>'
    } > "${TARGET_DEB[BACKGROUND_PROP]}/$wallpapers_config_file"

    cd "${TARGET_DEB[BACKGROUNDS]}" || exit $ERROR
    for wallpaper in *; do
        # Verwijder DEB_DISTDIR uit TARGET_DEB[BACKGROUNDS].  Voorbeeld:
        # /tmp/kz/usr/share/backgrounds/kz-gnome.png ->
        # /usr/share/backgrounds/kz-gnome.png
        filename=${TARGET_DEB[BACKGROUNDS]}/$wallpaper
        filename=${filename/$DEB_DISTDIR/}
        printf '%s\n' "    <wallpaper>
        <name>${wallpaper%.*}</name>
        <filename>$filename</filename>
        <options>zoom</options>
        <pcolor>#000000</pcolor>
        <scolor>#000000</scolor>
        <shade_type>solid</shade_type>
    </wallpaper>"           \
            >> "${TARGET_DEB[BACKGROUND_PROP]}/$wallpapers_config_file"
    done
    printf  '%s\n' \
            '</wallpapers>' >> "${TARGET_DEB[BACKGROUND_PROP]}/\
$wallpapers_config_file"
    cd "$HOME" || exit $ERROR
}


term_script() {
    exit $SUCCESS
}


###############################################################################
# Main line
###############################################################################

main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}


main "$@"


# EOF
