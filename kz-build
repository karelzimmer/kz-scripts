#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Pakket kz bouwen.
#
# Geschreven in 2021 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Constants
###############################################################################

readonly program_name='kz-build'
readonly program_desc='Pakket kz bouwen'
readonly display_name=${program_name/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
program_path=$(realpath "$(dirname  "${0/#-/}")")
readonly program_path
source  "$program_path"/kz_common.sh

readonly usage="Gebruik: $display_name $options_usage"
readonly help="Gebruik: $display_name [OPTIE...]

$program_desc.

Opties:
$options_help"

readonly docs_repo=$HOME/kz-docs
readonly scripts_repo=$HOME/kz-scripts

readonly deb_repo=$HOME/kz-deb
readonly deb_appdir=$deb_repo/app
readonly deb_distdir=$deb_repo/dist
readonly deb_name=kz_365_all.deb

readonly uploads_repo=$HOME/kz-uploads
readonly uploads_appdir=$uploads_repo/app
readonly uploads_distdir=$uploads_repo/dist

readonly -A uploads_sources=(
                [app]=$uploads_appdir
               [docs]=$docs_repo
            [scripts]=$scripts_repo
            )
readonly -A uploads_targets=(
               [dist]=$uploads_distdir
                [deb]=$uploads_distdir/downloads/kz
               [docs]=$uploads_distdir/data/linux/documents
               [pdfs]=$uploads_distdir/data/linux/pdfs
            [scripts]=$uploads_distdir/data/linux/scripts
            )

readonly -A deb_sources=(
                [app]=$deb_appdir
               [docs]=$docs_repo
            [scripts]=$scripts_repo
            )
readonly -A deb_targets=(
               [dist]=$deb_distdir
              [build]=$deb_distdir/usr/local/etc
       [applications]=$deb_distdir/usr/share/applications
                [bin]=$deb_distdir/usr/bin
                [man]=$deb_distdir/usr/share/man/man1
           [policy_1]=$deb_distdir/usr/share/polkit-1/actions
           [tabcompl]=$deb_distdir/usr/share/bash-completion/completions
    )


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usageline"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info "$display_name:geen argumenten toegestaan"
        info "$usageline"
        exit $err
    fi

    # Aangemeld als ontwikkelaar?
    if ! kz_common.developer check; then
        kz_common.developer report
        exit $err
    fi
}


function process_input {
    # Er is een afhankelijkheid met het maken van pdf's, vandaar uploads eerst.
    build_uploads
    build_deb
}


function build_uploads {
    local file=''
    local temptextfile=''

    log 'Bouw website...'
    # Gebruik diff voor deltabepaling (i.p.v. rsync) omdat na 'git pull' en
    # 'lftp mirror' in script kz-getdeb de timestamps van de bestanden
    # verschillen en dit met rsync tot vals positief leidt (aka false positive,
    # alleen timestamp is verschillend, niet de inhoud).

    # Vul dist/ met app/
    cd "$uploads_appdir"
    mkdir --parents "$uploads_distdir"
    while read -r file; do
        # Kopieer bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff "$file" "$uploads_distdir/$file" |& $logcmd; then
            cp  --parents           \
                --preserve          \
                --verbose           \
                "$file"             \
                "$uploads_distdir"  |& $logcmd
        fi
    done < <(find . -type f -print)
    cd "$HOME"

    # Vul dist/ met kz-docs.
    cd "${uploads_sources[docs]}"
    mkdir --parents "${uploads_targets[docs]}"
    for file in *.odt *.txt; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${uploads_targets[docs]}/$file" |& $logcmd; then
            cp  --preserve                  \
                --verbose                   \
                "$file"                     \
                "${uploads_targets[docs]}"   |& $logcmd
            lowriter    --headless                          \
                        --convert-to pdf                    \
                        --outdir "${uploads_targets[pdfs]}" \
                        "$file"                             |& $logcmd
        fi
    done
    cd "$HOME"

    # Vul dist/ met kz-scripts.
    cd "${uploads_sources[scripts]}"
    mkdir --parents "${uploads_targets[scripts]}" "${uploads_targets[pdfs]}"
    for file in kz*; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${uploads_targets[scripts]}/$file" |& $logcmd; then
            cp  --preserve                      \
                --verbose                       \
                "$file"                         \
                "${uploads_targets[scripts]}"   |& $logcmd
            if grep --quiet --regexp='^''.TH ' "$file"; then
                # Man-pagina.
                man --troff "${uploads_sources[scripts]}/$file"  |
                ps2pdf - "${uploads_targets[pdfs]}/$file.pdf"    |& $logcmd
            else
                # Script, *.completion, *.desktop, *.policy, en *.sh.
                # Must copy each file with suffix '.txt' added (temptextfile)
                # before converting because:
                # 1. desktop-files have XML inside which gets interpreted by
                #    Libre Office,
                # 2. 'lowriter convert-to pdf' replaces last suffix (if any) by
                #    '.pdf'.
                temptextfile=/tmp/$file.txt
                cp "$file" "$temptextfile"
                lowriter    --headless                          \
                            --convert-to pdf                    \
                            --outdir "${uploads_targets[pdfs]}" \
                            "$temptextfile"                     |& $logcmd
                rm "$temptextfile"
            fi
        fi
    done
    build_uploads_all
    cd "$HOME"
}


function build_uploads_all {
    local temptextfile=''

    # Maak voor de *site* een nieuwe "all" aan.
    more 'kz-install-'*.sh > "${uploads_targets[scripts]}"/kz-install-all.sh
    temptextfile=/tmp/kz-install-all.sh.txt
    cp "${uploads_targets[scripts]}"/kz-install-all.sh "$temptextfile"
    lowriter    --headless                          \
                --convert-to pdf                    \
                --outdir "${uploads_targets[pdfs]}" \
                "$temptextfile"                     |& $logcmd
    rm "$temptextfile"

    more 'kz-setup-'*.sh > "${uploads_targets[scripts]}"/kz-setup-all.sh
    temptextfile=/tmp/kz-setup-all.sh.txt
    cp "${uploads_targets[scripts]}"/kz-setup-all.sh "$temptextfile"
    lowriter    --headless                          \
                --convert-to pdf                    \
                --outdir "${uploads_targets[pdfs]}" \
                "$temptextfile"                     |& $logcmd
    rm "$temptextfile"
}


function build_deb {
    local basename=''
    local dir=''
    local file=''
    local newfile=''
    local prefix='nl.karelzimmer.'

    log 'Bouw pakket...'

    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${deb_sources[app]}"/  \
            "${deb_targets[dist]}"  |& $logcmd

    # Zorg dat de rechten goed staan voor de rsync.
    chmod 'u=rwx,g=rx,o=rx' -- "$scripts_repo"/*
    chmod 'a-x' -- "$scripts_repo"/*.* "$scripts_repo"/LICENSE

    # Zorg ervoor dat alle benodigde mappen beschikbaar zijn voor de rsync.
    for dir in "${deb_targets[@]}"; do
        mkdir --parents "$dir" |& $logcmd
    done

    # Deze rsync is inclusief *.1, *.completion, *.desktop, en *.policy.
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --exclude='__pycache__'     \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "${deb_sources[scripts]}"/  \
            "${deb_targets[bin]}"       |& $logcmd

    # Man-pagina's (.1)
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --remove-source-files       \
            "${deb_targets[bin]}"/*.1   \
            "${deb_targets[man]}"       |& $logcmd
    gzip --best --force "${deb_targets[man]}"/*.1 |& $logcmd

    # Tab-completion-scripts (.completion)
    for file in "${deb_targets[bin]}"/*.completion; do
        basename=$(basename "$file" .completion)
        mv "$file" "${deb_targets[tabcompl]}/$basename" |& $logcmd
    done

    # Bureaublad-configuratiebestanden (.desktop)
    for file in "${deb_targets[bin]}"/*.desktop; do
        basename=$(basename "$file")
        mv "$file" "${deb_targets[applications]}/$basename" |& $logcmd
    done

    # PolicyKit actiedefinitiebestanden (.policy)
    for file in "${deb_targets[bin]}"/*.policy; do
        basename=$(basename "$file")
        newfile="${deb_targets[policy_1]}/$prefix$basename"
        mv "$file" "$newfile" |& $logcmd
    done

    printf '%s' "$(date +%Y-%m-%d)" > "${deb_targets[build]}/$program_name"-id

    mkdir --parents "${uploads_targets[deb]}" |& $logcmd
    # Debian 11 does not support zst compression (default), hence the -Zxz.
    fakeroot    dpkg-deb                            \
                --build                             \
                -Zxz                                \
                "$deb_distdir"                      \
                "${uploads_targets[deb]}/$deb_name" |& $logcmd
}


function term_script {
    exit $ok
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
