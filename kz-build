#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Pakket kz bouwen.                                                           #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh
readonly PROGRAM_NAME='kz-build'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
readonly RELEASE_YEAR=2021

###############################################################################
# Global constants                                                            #
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Pakket kz bouwen.

Opties:
$OPTIONS_HELP_COMMON"

readonly DOCS_REPO=$HOME/kz-docs
readonly SCRIPTS_REPO=$HOME/kz-scripts

readonly DEB_REPO=$HOME/kz-deb
readonly DEB_APPDIR=$DEB_REPO/app
readonly DEB_DISTDIR=$DEB_REPO/dist
readonly DEB_NAME=kz_365_all.deb

readonly UPLOADS_REPO=$HOME/kz-uploads
readonly UPLOADS_APPDIR=$UPLOADS_REPO/app
readonly UPLOADS_DISTDIR=$UPLOADS_REPO/dist

# Conform ISO 8601.
TIMESTAMP=$(date +%Y-%m-%dT%H:%M)
readonly TIMESTAMP

readonly -A UPLOADS_SOURCES=(
                [APP]=$UPLOADS_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A UPLOADS_TARGETS=(
               [DIST]=$UPLOADS_DISTDIR
                [DEB]=$UPLOADS_DISTDIR/downloads/kz
               [DOCS]=$UPLOADS_DISTDIR/data/linux/documents
               [PDFS]=$UPLOADS_DISTDIR/data/linux/pdfs
            [SCRIPTS]=$UPLOADS_DISTDIR/data/linux/scripts
            )

readonly -A DEB_SOURCES=(
                [APP]=$DEB_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A DEB_TARGETS=(
               [DIST]=$DEB_DISTDIR
              [BUILD]=$DEB_DISTDIR/usr/local/etc
       [APPLICATIONS]=$DEB_DISTDIR/usr/share/applications
        [BACKGROUNDS]=$DEB_DISTDIR/usr/share/backgrounds
    [BACKGROUND_PROP]=$DEB_DISTDIR/usr/share/gnome-background-properties
                [BIN]=$DEB_DISTDIR/usr/bin
                [DOC]=$DEB_DISTDIR/usr/share/doc/kz
                [MAN]=$DEB_DISTDIR/usr/share/man/man1
           [POLICY_1]=$DEB_DISTDIR/usr/share/polkit-1/actions
           [TABCOMPL]=$DEB_DISTDIR/usr/share/bash-completion/completions
    )

###############################################################################
# Global variables                                                            #
###############################################################################

###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local       full_name=''
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        process_usage
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        error 'Geen argumenten toegestaan.'
        process_usage
    fi

    # Aangemeld als ontwikkelaar?
    full_name=$(
        getent passwd karel             |
        cut --delimiter=':' --fields=5  |
        cut --delimiter=',' --fields=1  || true
        )
    if [[   $HOSTNAME == pc??                               &&
            ($USER = karel && $full_name = 'Karel Zimmer')  ]]; then
        :
    else
        error 'Uitvoeren als ontwikkelaar.'
        exit $ERROR
    fi

    check_user
}


function process_input {
    # Er is een afhankelijkheid met het maken van pdf's, vandaar uploads eerst.
    build_uploads
    build_deb
}


function build_uploads {
    local file=''
    local temptextfile=''

    log 'Bouw website...'
    # Gebruik diff voor deltabepaling (i.p.v. rsync) omdat na 'git pull' en
    # 'lftp mirror' in script kz-getdeb de timestamps van de bestanden
    # verschillen en dit met rsync tot vals positief leidt (aka false positive,
    # alleen timestamp is verschillend, niet de inhoud).

    # Vul dist/ met app/
    cd "$UPLOADS_APPDIR"
    while read -r file; do
        # Kopieer bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff "$file" "$UPLOADS_DISTDIR/$file" &> /dev/null; then
            cp  --parents           \
                --preserve          \
                --verbose           \
                "$file"             \
                "$UPLOADS_DISTDIR"  |& $LOGCMD
        fi
    done < <(find . -type f -print)
    cd "$HOME"

    # Vul dist/ met kz-docs.
    cd "${UPLOADS_SOURCES[DOCS]}"
    for file in *.odt *.txt; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${UPLOADS_TARGETS[DOCS]}/$file" &> /dev/null; then
            cp  --preserve                  \
                --verbose                   \
                "$file"                     \
                "${UPLOADS_TARGETS[DOCS]}"   |& $LOGCMD
            lowriter    --headless                          \
                        --convert-to pdf                    \
                        --outdir "${UPLOADS_TARGETS[PDFS]}" \
                        "$file"                             |& $LOGCMD
        fi
    done
    cd "$HOME"

    # Vul dist/ met kz-scripts.
    cd "${UPLOADS_SOURCES[SCRIPTS]}"
    for file in *; do
        if [[ $file = README.md ]]; then
            continue
        elif [[ -d "$file" ]]; then
            continue
        fi
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${UPLOADS_TARGETS[SCRIPTS]}/$file" &> /dev/null
            then
            cp  --preserve                      \
                --verbose                       \
                "$file"                         \
                "${UPLOADS_TARGETS[SCRIPTS]}"   |& $LOGCMD
            if grep --quiet --regexp='^''.TH ' "$file"; then
                # Man-pagina.
                man --troff "${UPLOADS_SOURCES[SCRIPTS]}/$file"  |
                ps2pdf - "${UPLOADS_TARGETS[PDFS]}/$file.pdf"    |& $LOGCMD
            else
                # Script, *.completion, *.desktop, *.policy, en *.sh.
                #
                # Must copy each file with suffix '.txt' added (temptextfile)
                # before converting because:
                # 1. desktop-files have XML inside which gets interpreted by
                #    Libre Office,
                # 2. 'lowriter convert-to pdf' replaces last suffix (if any) by
                #    '.pdf'.
                temptextfile=/tmp/$file.txt
                cp "$file" "$temptextfile"
                lowriter    --headless                          \
                            --convert-to pdf                    \
                            --outdir "${UPLOADS_TARGETS[PDFS]}" \
                            "$temptextfile"                     |& $LOGCMD
                rm "$temptextfile"
                if [[ $file == kz-install*.sh || $file == kz-setup*.sh ]]; then
                    # Als een installatie- of instelbestand is gewijzigd,
                    # maak dan voor de *site* een nieuwe "all" aan.
                    build_uploads_all
                fi
            fi
        fi
    done
    cd "$HOME"
}


function build_uploads_all {
    local tempname=''

    tempname=$(echo "$file" | awk -F'-' '{print $1"-"$2}')
    cat "$tempname"*.sh > "${UPLOADS_TARGETS[SCRIPTS]}/$tempname"-all.sh
    temptextfile=/tmp/$tempname-all.sh.txt
    cp "${UPLOADS_TARGETS[SCRIPTS]}/$tempname"-all.sh "$temptextfile"
    lowriter    --headless                          \
                --convert-to pdf                    \
                --outdir "${UPLOADS_TARGETS[PDFS]}" \
                "$temptextfile"                     |& $LOGCMD
    rm "$temptextfile"
}

function build_deb {
    local basename=''
    local dir=''
    local file=''
    local newfile=''
    local prefix='nl.karelzimmer.'

    log 'Bouw pakket...'

    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${DEB_SOURCES[APP]}"/  \
            "${DEB_TARGETS[DIST]}"  |& $LOGCMD

    # Zorg dat de rechten goed staan voor de rsync.
    chmod 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO"/*
    chmod 'a-x' -- "$SCRIPTS_REPO"/*.*

    # Zorg ervoor dat alle benodigde mappen beschikbaar zijn voor de rsync.
    for dir in "${DEB_TARGETS[@]}"; do
        mkdir --parents "$dir"
    done

    # Deze rsync is inclusief *.1, *.completion, *.desktop, en *.policy.
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --exclude='__pycache__'     \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "${DEB_SOURCES[SCRIPTS]}"/  \
            "${DEB_TARGETS[BIN]}"       |& $LOGCMD

    # Man-pagina's (.1)
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --remove-source-files       \
            "${DEB_TARGETS[BIN]}"/*.1   \
            "${DEB_TARGETS[MAN]}"       |& $LOGCMD
    gzip --best --force "${DEB_TARGETS[MAN]}"/*.1 |& $LOGCMD

    # Tab-completion-scripts (.completion)
    for file in "${DEB_TARGETS[BIN]}"/*.completion; do
        basename=$(basename "$file" .completion)
        mv "$file" "${DEB_TARGETS[TABCOMPL]}/$basename" |& $LOGCMD
    done

    # Bureaublad-configuratiebestanden (.desktop)
    for file in "${DEB_TARGETS[BIN]}"/*.desktop; do
        basename=$(basename "$file")
        mv "$file" "${DEB_TARGETS[APPLICATIONS]}/$basename" |& $LOGCMD
    done

    # PolicyKit actiedefinitiebestanden (.policy)
    for file in "${DEB_TARGETS[BIN]}"/*.policy; do
        basename=$(basename "$file")
        newfile="${DEB_TARGETS[POLICY_1]}/$prefix$basename"
        mv "$file" "$newfile" |& $LOGCMD
    done

    build_background_properties_file

    cp  --archive                                               \
        --update                                                \
        "${UPLOADS_TARGETS[PDFS]}"/Checklist-installatie*.pdf   \
        "${DEB_TARGETS[DOC]}"                                   |& $LOGCMD
    cp  --archive                                               \
        --update                                                \
        "${UPLOADS_TARGETS[PDFS]}"/Checklist-instellen*.pdf     \
        "${DEB_TARGETS[DOC]}"                                   |& $LOGCMD

    printf '%s' "$TIMESTAMP" > "${DEB_TARGETS[BUILD]}/$PROGRAM_NAME"

    mkdir --parents "${UPLOADS_TARGETS[DEB]}"
    # Debian 11 does not support xz compression (default), hence the -Zgzip.
    fakeroot    dpkg-deb                            \
                --build                             \
                -Zgzip                              \
                "$DEB_DISTDIR"                      \
                "${UPLOADS_TARGETS[DEB]}/$DEB_NAME" |& $LOGCMD
}


function build_background_properties_file {
    local filename=''
    local wallpaper=''
    local wallpapers_config_file=kz-wallpapers.xml

    {
        printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
        printf '%s\n' '<!DOCTYPE wallpapers SYSTEM "gnome-wp-list.dtd">'
        printf '%s\n' '<wallpapers>'
    } > "${DEB_TARGETS[BACKGROUND_PROP]}/$wallpapers_config_file"

    cd "${DEB_TARGETS[BACKGROUNDS]}"
    for wallpaper in *; do
        # Verwijder DEB_DISTDIR uit DEB_TARGETS[BACKGROUNDS].  Voorbeeld:
        # /tmp/kz/usr/share/backgrounds/kz-gnome.png ->
        # /usr/share/backgrounds/kz-gnome.png
        filename=${DEB_TARGETS[BACKGROUNDS]}/$wallpaper
        filename=${filename/$DEB_DISTDIR/}
        printf '    %s\n' "<wallpaper>
        <name>${wallpaper%.*}</name>
        <filename>$filename</filename>
        <options>zoom</options>
        <pcolor>#000000</pcolor>
        <scolor>#000000</scolor>
        <shade_type>solid</shade_type>
    </wallpaper>" \
            >> "${DEB_TARGETS[BACKGROUND_PROP]}/$wallpapers_config_file"
    done
    printf '%s\n' '</wallpapers>' \
            >> "${DEB_TARGETS[BACKGROUND_PROP]}/$wallpapers_config_file"
    cd "$HOME"
}


function term_script {
    exit $SUCCESS
}

###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
