#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Pakket kz bouwen.
#
# Geschreven in 2021 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly PROGRAM_NAME='kz-build'
readonly PROGRAM_DESC='Pakket kz bouwen'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
PROGRAM_PATH=$(realpath "$(dirname  "${0/#-/}")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

$PROGRAM_DESC.

Opties:
$OPTIONS_HELP_COMMON"

readonly DOCS_REPO=$HOME/kz-docs
readonly SCRIPTS_REPO=$HOME/kz-scripts

readonly DEB_REPO=$HOME/kz-deb
readonly DEB_APPDIR=$DEB_REPO/app
readonly DEB_DISTDIR=$DEB_REPO/dist
readonly DEB_NAME=kz_365_all.deb

readonly UPLOADS_REPO=$HOME/kz-uploads
readonly UPLOADS_APPDIR=$UPLOADS_REPO/app
readonly UPLOADS_DISTDIR=$UPLOADS_REPO/dist

readonly -A UPLOADS_SOURCES=(
                [APP]=$UPLOADS_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A UPLOADS_TARGETS=(
               [DIST]=$UPLOADS_DISTDIR
                [DEB]=$UPLOADS_DISTDIR/downloads/kz
               [DOCS]=$UPLOADS_DISTDIR/data/linux/documents
               [PDFS]=$UPLOADS_DISTDIR/data/linux/pdfs
            [SCRIPTS]=$UPLOADS_DISTDIR/data/linux/scripts
            )

readonly -A DEB_SOURCES=(
                [APP]=$DEB_APPDIR
               [DOCS]=$DOCS_REPO
            [SCRIPTS]=$SCRIPTS_REPO
            )
readonly -A DEB_TARGETS=(
               [DIST]=$DEB_DISTDIR
              [BUILD]=$DEB_DISTDIR/usr/local/etc
       [APPLICATIONS]=$DEB_DISTDIR/usr/share/applications
                [BIN]=$DEB_DISTDIR/usr/bin
                [MAN]=$DEB_DISTDIR/usr/share/man/man1
           [POLICY_1]=$DEB_DISTDIR/usr/share/polkit-1/actions
           [TABCOMPL]=$DEB_DISTDIR/usr/share/bash-completion/completions
    )


###############################################################################
# Global variables
###############################################################################


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info 'Geen argumenten toegestaan.'
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi

    # Aangemeld als ontwikkelaar?
    if ! developer check; then
        developer report
        NOERROR=true exit $ERROR
    fi
}


function process_input {
    # Er is een afhankelijkheid met het maken van pdf's, vandaar uploads eerst.
    build_uploads
    build_deb
}


function build_uploads {
    local file=''
    local temptextfile=''

    log 'Bouw website...'
    # Gebruik diff voor deltabepaling (i.p.v. rsync) omdat na 'git pull' en
    # 'lftp mirror' in script kz-getdeb de timestamps van de bestanden
    # verschillen en dit met rsync tot vals positief leidt (aka false positive,
    # alleen timestamp is verschillend, niet de inhoud).

    # Vul dist/ met app/
    cd "$UPLOADS_APPDIR"
    mkdir --parents "$UPLOADS_DISTDIR"
    while read -r file; do
        # Kopieer bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff "$file" "$UPLOADS_DISTDIR/$file" &> /dev/null; then
            cp  --parents           \
                --preserve          \
                --verbose           \
                "$file"             \
                "$UPLOADS_DISTDIR"  |& $LOGCMD
        fi
    done < <(find . -type f -print)
    cd "$HOME"

    # Vul dist/ met kz-docs.
    cd "${UPLOADS_SOURCES[DOCS]}"
    mkdir --parents "${UPLOADS_TARGETS[DOCS]}"
    for file in *.odt *.txt; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${UPLOADS_TARGETS[DOCS]}/$file" &> /dev/null; then
            cp  --preserve                  \
                --verbose                   \
                "$file"                     \
                "${UPLOADS_TARGETS[DOCS]}"   |& $LOGCMD
            lowriter    --headless                          \
                        --convert-to pdf                    \
                        --outdir "${UPLOADS_TARGETS[PDFS]}" \
                        "$file"                             |& $LOGCMD
        fi
    done
    cd "$HOME"

    # Vul dist/ met kz-scripts.
    cd "${UPLOADS_SOURCES[SCRIPTS]}"
    mkdir --parents "${UPLOADS_TARGETS[SCRIPTS]}" "${UPLOADS_TARGETS[PDFS]}"
    for file in kz*; do
        # Kopieer bestand en maak pdf aan als deze nieuw of gewijzigd is
        # (deltabepaling).
        if ! diff "$file" "${UPLOADS_TARGETS[SCRIPTS]}/$file" &> /dev/null
            then
            cp  --preserve                      \
                --verbose                       \
                "$file"                         \
                "${UPLOADS_TARGETS[SCRIPTS]}"   |& $LOGCMD
            if grep --quiet --regexp='^''.TH ' "$file"; then
                # Man-pagina.
                man --troff "${UPLOADS_SOURCES[SCRIPTS]}/$file"  |
                ps2pdf - "${UPLOADS_TARGETS[PDFS]}/$file.pdf"    |& $LOGCMD
            else
                # Script, *.completion, *.desktop, *.policy, en *.sh.
                # Must copy each file with suffix '.txt' added (temptextfile)
                # before converting because:
                # 1. desktop-files have XML inside which gets interpreted by
                #    Libre Office,
                # 2. 'lowriter convert-to pdf' replaces last suffix (if any) by
                #    '.pdf'.
                temptextfile=/tmp/$file.txt
                cp "$file" "$temptextfile"
                lowriter    --headless                          \
                            --convert-to pdf                    \
                            --outdir "${UPLOADS_TARGETS[PDFS]}" \
                            "$temptextfile"                     |& $LOGCMD
                rm "$temptextfile"
            fi
        fi
    done
    build_uploads_all
    cd "$HOME"
}


function build_uploads_all {
    local temptextfile=''

    # Maak voor de *site* een nieuwe "all" aan.
    more 'kz-install-'*.sh > "${UPLOADS_TARGETS[SCRIPTS]}"/kz-install-all.sh
    temptextfile=/tmp/kz-install-all.sh.txt
    cp "${UPLOADS_TARGETS[SCRIPTS]}"/kz-install-all.sh "$temptextfile"
    lowriter    --headless                          \
                --convert-to pdf                    \
                --outdir "${UPLOADS_TARGETS[PDFS]}" \
                "$temptextfile"                     |& $LOGCMD
    rm "$temptextfile"

    more 'kz-setup-'*.sh > "${UPLOADS_TARGETS[SCRIPTS]}"/kz-setup-all.sh
    temptextfile=/tmp/kz-setup-all.sh.txt
    cp "${UPLOADS_TARGETS[SCRIPTS]}"/kz-setup-all.sh "$temptextfile"
    lowriter    --headless                          \
                --convert-to pdf                    \
                --outdir "${UPLOADS_TARGETS[PDFS]}" \
                "$temptextfile"                     |& $LOGCMD
    rm "$temptextfile"
}

function build_deb {
    local basename=''
    local dir=''
    local file=''
    local newfile=''
    local prefix='nl.karelzimmer.'

    log 'Bouw pakket...'

    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${DEB_SOURCES[APP]}"/  \
            "${DEB_TARGETS[DIST]}"  |& $LOGCMD

    # Zorg dat de rechten goed staan voor de rsync.
    chmod 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO"/*
    chmod 'a-x' -- "$SCRIPTS_REPO"/*.* "$SCRIPTS_REPO"/LICENSE

    # Zorg ervoor dat alle benodigde mappen beschikbaar zijn voor de rsync.
    for dir in "${DEB_TARGETS[@]}"; do
        mkdir --parents "$dir" |& $LOGCMD
    done

    # Deze rsync is inclusief *.1, *.completion, *.desktop, en *.policy.
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --exclude='__pycache__'     \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "${DEB_SOURCES[SCRIPTS]}"/  \
            "${DEB_TARGETS[BIN]}"       |& $LOGCMD

    # Man-pagina's (.1)
    rsync   --archive                   \
            --delete                    \
            --verbose                   \
            --remove-source-files       \
            "${DEB_TARGETS[BIN]}"/*.1   \
            "${DEB_TARGETS[MAN]}"       |& $LOGCMD
    gzip --best --force "${DEB_TARGETS[MAN]}"/*.1 |& $LOGCMD

    # Tab-completion-scripts (.completion)
    for file in "${DEB_TARGETS[BIN]}"/*.completion; do
        basename=$(basename "$file" .completion)
        mv "$file" "${DEB_TARGETS[TABCOMPL]}/$basename" |& $LOGCMD
    done

    # Bureaublad-configuratiebestanden (.desktop)
    for file in "${DEB_TARGETS[BIN]}"/*.desktop; do
        basename=$(basename "$file")
        mv "$file" "${DEB_TARGETS[APPLICATIONS]}/$basename" |& $LOGCMD
    done

    # PolicyKit actiedefinitiebestanden (.policy)
    for file in "${DEB_TARGETS[BIN]}"/*.policy; do
        basename=$(basename "$file")
        newfile="${DEB_TARGETS[POLICY_1]}/$prefix$basename"
        mv "$file" "$newfile" |& $LOGCMD
    done

    printf '%s' "$(date +%Y-%m-%d)" > "${DEB_TARGETS[BUILD]}/$PROGRAM_NAME"-id

    mkdir --parents "${UPLOADS_TARGETS[DEB]}" |& $LOGCMD
    # Debian 11 does not support xz compression (default), hence the -Zgzip.
    fakeroot    dpkg-deb                            \
                --build                             \
                -Zgzip                              \
                "$DEB_DISTDIR"                      \
                "${UPLOADS_TARGETS[DEB]}/$DEB_NAME" |& $LOGCMD
}


function term_script {
    exit $SUCCESS
}


###############################################################################
# Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
