#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Applijst maken.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
#
# Auteursrecht (c) 2013-2021 Karel Zimmer.
# GNU Algemene Publieke Licentie <https://www.gnu.org/licenses/gpl.html>.
#
# ReleaseNumber: 19.02.00
# DateOfRelease: 2021-08-15
###############################################################################
source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Global constants
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly USAGE="Gebruik: ${PROGRAM_NAME/kz_/kz } $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: ${PROGRAM_NAME/kz_/kz } [OPTIE...]

Applijst maken.

Opties:
$OPTIONS_HELP_COMMON"

readonly ID=$(lsb_release --id --short | tr '[:upper:]' '[:lower:]')
readonly OUTPUT_DIR=/usr/local/etc/${PROGRAM_NAME}_${HOSTNAME}_$ID
readonly OUTPUT_FILE=${OUTPUT_DIR}_applist
readonly RUN_AS_SUPERUSER=true
readonly TEMP_FILE=$(mktemp -t "${PROGRAM_NAME}_XXXXXXXXXX.list")


###############################################################################
# Global variables
###############################################################################


###############################################################################
# Functions
###############################################################################

check_input() {
    PARSED=$(
        getopt  --alternative                               \
                --options       "$OPTIONS_SHORT"            \
                --longoptions   "$OPTIONS_LONG"             \
                --name          "${PROGRAM_NAME/kz_/kz }"   \
                -- "$@"
        )       || GETOPT_RC=$?
    if [[ $GETOPT_RC -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$PARSED"
    process_general_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        TEXT='geen argumenten opgeven'
        printf "${PROGRAM_NAME/kz_/kz }: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    fi

    check_user
}


process_input() {
    local text0='Opdrachten worden verwerkt'
    local text1="[1/4]  Bepaal welke deb-bestanden (Debian-pakketten) zijn \
geïnstalleerd"
    local text2="[2/4]  Bepaal welke pakketbronnen (\"repositories\" of \
\"repo's\") zijn toegevoegd"
    local text3="[3/4]  Bepaal welke pakketten door de gebruiker zijn \
geïnstalleerd"
    local text4='[4/4]  Bepaal welke snaps zijn geïnstalleerd'

    TITLE='Applijst maken'
    # Constructie '2> >($LOGCMD)' om stderr naar de log te krijgen.
    # Voorbeeld: Unable to init server: Kon niet verbinden:
    #            Verbinding is geweigerd
    #        en: (zenity:47712): Gtk-WARNING **: 10:35:49.339:
    #            cannot open display:
    if $OPTION_GUI; then
        (
        printf '%s\n' "#$text1"
        create_file_installed_without_repo
        printf '%s\n' "#$text2"
        create_file_added_repos
        printf '%s\n' "#$text3"
        create_file_installed_by_user
        printf '%s\n' "#$text4"
        create_file_snaps
        ) |&
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$TITLE"    \
                --text      "$text0"    2> >($LOGCMD)
    else
        create_file_installed_without_repo  #1
        create_file_added_repos             #2
        create_file_installed_by_user       #3
        create_file_snaps                   #4
    fi
}


create_file_installed_without_repo() { #1
    local       header="Dit zijn gedownloade deb-bestanden geïnstalleerd via \
Software, of met een opdracht zoals 'sudo apt-get --install <bestand.deb>':"
    local       footer=''
    local   -i  number_of_lines=0
    local       plural='geïnstalleerde deb-bestanden'

    printf '%s\n' "$text1..."

    printf '%b\n' "$header\n$DASHES" > "$TEMP_FILE"

    apt-show-versions --initialize |& $LOGCMD
    if !    apt-show-versions                       \
            --brief                                 |
            grep    --word-regexp                   \
                    --regexp='No available version' >> "$TEMP_FILE"; then
        true
    fi

    number_of_lines=$(wc --lines < "$TEMP_FILE")
    number_of_lines=$((number_of_lines - 2))
    if [[ $number_of_lines -eq 1 ]]; then
        plural='geïnstalleerd deb-bestand'
    fi
    footer="Dit overzicht bevat $number_of_lines door de gebruiker $plural.
Meer via de opdracht: apt-cache show <bestand> | grep --regexp='Description:'"
    printf '%b\n' "$DASHES\n$footer\n" >> "$TEMP_FILE"

    cat "$TEMP_FILE" > "$OUTPUT_FILE"
}


create_file_added_repos() { #2
    local       header="Deze pakketbronnen zijn meestal toegevoegd met de \
opdracht 'sudo add-apt-repository ppa:<ppa-gebruiker>/<ppa-naam>':"
    local       footer=''
    local   -i  number_of_lines=0
    local       plural='pakketbronnen'

    printf '%s\n' "$text2..."

    printf '%b\n' "$header\n$DASHES" > "$TEMP_FILE"

    # shellcheck disable=SC2062,SC2022
    if !    grep    --recursive             \
                    --no-filename           \
                    --regexp='^deb '        \
                    /etc/apt/sources.list*  |
            grep    --invert-match          \
                    --regexp='ubuntu.com'   |
            sort    --unique                >> "$TEMP_FILE"; then
        true
    fi

    number_of_lines=$(wc --lines < "$TEMP_FILE")
    number_of_lines=$((number_of_lines - 2))
    if [[ $number_of_lines -eq 1 ]]; then
        plural='pakketbron'
    fi
    footer="Dit overzicht bevat $number_of_lines door de gebruiker \
toegevoegde $plural."
    printf '%b\n' "$DASHES\n$footer\n" >> "$TEMP_FILE"

    cat "$TEMP_FILE" >> "$OUTPUT_FILE"
}


create_file_installed_by_user() { #3
    local       header="Deze pakketten zijn meestal geïnstalleerd met \
Software of met de opdracht 'sudo apt install <pakketnaam>':"
    local       footer=''
    local   -i  number_of_lines=0
    local       plural='geïnstalleerde pakketten'

    printf '%s\n' "$text3..."

    printf '%b\n' "$header\n$DASHES" > "$TEMP_FILE"

    aptitude search '~i!~M!~E!~prequired!~pimportant' >> "$TEMP_FILE"

    number_of_lines=$(wc --lines < "$TEMP_FILE")
    number_of_lines=$((number_of_lines - 2))
    if [[ $number_of_lines -eq 1 ]]; then
        plural='geïnstalleerd pakket'
    fi
    footer="Dit overzicht bevat $number_of_lines door de gebruiker $plural.
Meer info via de opdracht: apt-cache show <pakketnaam> | grep \
--regexp='Description:'"
    printf '%b\n' "$DASHES\n$footer\n" >> "$TEMP_FILE"

    cat "$TEMP_FILE" >> "$OUTPUT_FILE"
}


create_file_snaps() { #4
    local       header="Deze snaps zijn geïnstalleerd met '[sudo] install \
<snap>' of met Software:"
    local       footer=''
    local   -i  number_of_lines=0
    local       plural='snaps'

    printf '%s\n' "$text4..."

    printf '%b\n' "$header\n$DASHES" > "$TEMP_FILE"

    if ! snap list 2> /dev/null >> "$TEMP_FILE"; then
        TEXT='snap is niet geïnstalleerd op dit systeem'
        printf '%s\n' "$TEXT" >> "$TEMP_FILE"
    fi
    number_of_lines=$(wc --lines < "$TEMP_FILE")
    number_of_lines=$((number_of_lines - 3))
    if [[ $number_of_lines -eq 1 ]]; then
        plural='snap'
    fi
    footer="Dit overzicht bevat $number_of_lines $plural."
    printf '%b\n' "$DASHES\n$footer" >> "$TEMP_FILE"

    cat "$TEMP_FILE" >> "$OUTPUT_FILE"
}


term_script() {
    rm "$TEMP_FILE"
    info "
De applist is aangemaakt: $OUTPUT_FILE
Dit bestand kan worden gebruikt om de volledigheid van de
installatie, later door ${BOLD}kz install${NORMAL}, te controleren."
    exit $SUCCESS
}


###############################################################################
# Main line
###############################################################################

main() {
    init_script
    check_input "$@"
    process_input
    term_script
}


main "$@"


# EOF
