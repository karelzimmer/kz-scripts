#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# GUI wijzigen.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
#
# Auteursrecht (c) 2015-2021 Karel Zimmer.
# GNU Algemene Publieke Licentie <https://www.gnu.org/licenses/gpl.html>.
#
# ReleaseNumber: 12.00.00
# DateOfRelease: 2021-08-08
###############################################################################
source "$(dirname "$0")"/kz-common.sh


###############################################################################
# Global constants
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON",addappfolder,addfavbottom,\
addfavtop,removeappfolder,removefav,file:,folder:"
readonly USAGE="Gebruik: ${PROGRAM_NAME//kz-/kz } \
[--addappfolder|--removeappfolder --folder=APPFOLDER]
                 [--addfavbottom|--addfavtop|--removefav --file=DESKTOPFILE]
                 $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: ${PROGRAM_NAME//kz-/kz } [OPTIE...] [--]

GUI wijzigen.

Opties:
     --addappfolder
                voeg een appfolder toe
     --addfavbottom
                voeg een toepassingspictogram (favoriet) toe onderaan aan het \
favorietengebied
     --addfavtop
                voeg een toepassingspictogram (favoriet) toe bovenaan aan het \
favorietengebied
     --file=DESKTOPFILE
                opgegeven desktopbestand (.desktop) verwerken
     --folder=APPFOLDER
                opgegeven appfolder verwerken
     --removeappfolder
                verwijder een appfolder
     --removefav
                verwijder een toepassingspictogrammen (favoriet) uit het \
favorietengebied
$OPTIONS_HELP_COMMON"


###############################################################################
# Global variables
###############################################################################

declare CONFIG_A=''
declare CONFIG_B=''
declare DESKTOPFILE=''
declare FILE_ARGUMENT=''
declare FOLDER_ARGUMENT=''
declare OPTION_ADDAPPFOLDER=false
declare OPTION_ADDFAVBOTTOM=false
declare OPTION_ADDFAVTOP=false
declare OPTION_FILE=false
declare OPTION_FOLDER=false
declare OPTION_REMOVEAPPFOLDER=false
declare OPTION_REMOVEFAV=false


###############################################################################
# Functions
###############################################################################

check_input() {
    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$PROGRAM_NAME"     \
                -- "$@"
        )       || GETOPT_RC=$?
    if [[ $GETOPT_RC -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$PARSED"
    process_general_options "$@"

    while true; do
        case $1 in
            --addappfolder)
                if $OPTION_ADDAPPFOLDER; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_ADDAPPFOLDER=true
                fi
                shift
                ;;
            --addfavtop)
                if $OPTION_ADDFAVTOP; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                elif ($OPTION_ADDFAVBOTTOM || $OPTION_REMOVEFAV); then
                    TEXT="een optie eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_ADDFAVTOP=true
                fi
                shift
                ;;
            --addfavbottom)
                if $OPTION_ADDFAVBOTTOM; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                elif ($OPTION_ADDFAVTOP || $OPTION_REMOVEFAV); then
                    TEXT="een optie eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_ADDFAVBOTTOM=true
                fi
                shift
                ;;
            --file)
                if $OPTION_FILE; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_FILE=true
                    FILE_ARGUMENT=$2
                fi
                shift 2
                ;;
            --folder)
                if $OPTION_FOLDER; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_FOLDER=true
                    FOLDER_ARGUMENT=$2
                fi
                shift 2
                ;;
            --removeappfolder)
                if $OPTION_REMOVEAPPFOLDER; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_REMOVEAPPFOLDER=true
                fi
                shift
                ;;
            --removefav)
                if $OPTION_REMOVEFAV; then
                    TEXT="optie '$1' eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                elif ($OPTION_ADDFAVTOP || $OPTION_ADDFAVBOTTOM); then
                    TEXT="een optie eenmaal opgeven"
                    printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_REMOVEFAV=true
                fi
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf  "$PROGRAM_NAME: %s\n%s\n"   \
                'geen argumenten opgeven'   \
                "$USAGELINE"                >&2
        exit $ERROR
    fi

    if ($OPTION_ADDFAVTOP || $OPTION_ADDFAVBOTTOM || $OPTION_REMOVEFAV) &&
        ! $OPTION_FILE; then
        TEXT="ontbrekende optie 'file'"
        printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    elif $OPTION_FILE &&
        ! ($OPTION_ADDFAVTOP || $OPTION_ADDFAVBOTTOM || $OPTION_REMOVEFAV)
        then
        TEXT="ontbrekende optie 'addfavtop', 'addfavbottom', of 'removefav'"
        printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    elif $OPTION_FILE && [[ $FILE_ARGUMENT != *.desktop ]]; then
        TEXT="bestandsnaam dient te eindigen met '.desktop'"
        printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    fi
    DESKTOPFILE=$FILE_ARGUMENT

    if ($OPTION_ADDAPPFOLDER || $OPTION_REMOVEAPPFOLDER) && ! $OPTION_FOLDER
        then
        TEXT="ontbrekende optie 'folder'"
        printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    elif $OPTION_FOLDER && ! ($OPTION_ADDAPPFOLDER || $OPTION_REMOVEAPPFOLDER)
        then
        TEXT="ontbrekende optie 'addappfolder'"
        printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    fi
    APPFOLDER=$FOLDER_ARGUMENT

    # Een non-gui script gestart met optie gui.
    if $OPTION_GUI; then
        OPTION_GUI=false
        TERMINAL=true
    fi

    check_user
}


process_input() {
    if $OPTION_ADDFAVTOP; then
        process_option_addfavtop
    elif $OPTION_ADDFAVBOTTOM; then
        process_option_addfavbottom
    elif $OPTION_REMOVEFAV; then
        process_option_removefav
    elif $OPTION_ADDAPPFOLDER; then
        process_option_addappfolder
    elif $OPTION_REMOVEAPPFOLDER; then
        process_option_removeappfolder
    else
        capture_gui_changes
    fi
}


process_option_addfavtop () {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif !  echo    "$favorite_apps"    |
            grep    --quiet             \
                    --word-regexp       \
                    --regexp="$DESKTOPFILE"; then
        gsettings   set                                         \
                    org.gnome.shell                             \
                    favorite-apps                               \
                    "['$DESKTOPFILE', $(
                                        echo "$favorite_apps"   |
                                        awk -F[ '{print $2}'
                                        )"
    fi
}


process_option_addfavbottom () {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif !  echo    "$favorite_apps"    |
            grep    --quiet             \
                    --word-regexp       \
                    --regexp="$DESKTOPFILE"; then
        gsettings   set                         \
                    org.gnome.shell             \
                    favorite-apps               \
                    "$(
                        echo "$favorite_apps"   |
                        awk -F] '{print $1}'), '$DESKTOPFILE']"
    fi
}


process_option_removefav () {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        :
    elif [[ $favorite_apps = "['$DESKTOPFILE']" ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else gsettings  set                                                 \
                    org.gnome.shell                                     \
                    favorite-apps                                       \
                    "$(
                        echo    "$favorite_apps"                        |
                        sed     --expression="s/'$DESKTOPFILE', //g"    |
                        sed     --expression="s/, '$DESKTOPFILE'//"
                    )"
    fi
}


process_option_addappfolder () {
    local app_folders=''
    local schema=''
    local path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        set org.gnome.desktop.app-folders folder-children "['$APPFOLDER']"
    elif !  echo    "$app_folders"  |
            grep    --quiet         \
                    --word-regexp   \
                    --regexp="$APPFOLDER"; then
        gsettings   set                             \
                    org.gnome.desktop.app-folders   \
                    folder-children                 \
                    "$(
                        echo "$app_folders"         |
                        awk -F] '{print $1}'), '$APPFOLDER']"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$APPFOLDER/
    gsettings set "$schema":"$path" name        "$APPFOLDER"
    gsettings set "$schema":"$path" translate   true
    gsettings set "$schema":"$path" categories  "['$APPFOLDER']"
}


process_option_removeappfolder () {
    local app_folders=''
    local schema=''
    local path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        :
    elif [[ $app_folders = "['$APPFOLDER']" ]]; then
        gsettings set org.gnome.desktop.app-folders folder-children "[]"
    else gsettings  set                             \
                    org.gnome.desktop.app-folders   \
                    folder-children                 \
                    "$(
                        echo    "$app_folders"      |
                        sed     --expression="s/, '$APPFOLDER'//"
                    )"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$APPFOLDER/
    gsettings reset-recursively "$schema":"$path"
}


capture_gui_changes() {
    CONFIG_A=$(mktemp -t "$PROGRAM_NAME-A-XXXXXXXXXX.lst")
    save_configuration_database A "$CONFIG_A"
    info 'Voer nu de wijziging uit in de grafische werkomgeving.'
    read -rp 'Druk op de Enter-toets wanneer gereed [Enter]: '
    CONFIG_B=$(mktemp -t "$PROGRAM_NAME-B-XXXXXXXXXX.lst")
    save_configuration_database B "$CONFIG_B"
    report_database_changes "$CONFIG_A" "$CONFIG_B"
}


save_configuration_database() {
    local fase=${1:-fase?}
    local output_file=${2:-output_file?}


    gsettings list-recursively > "$output_file" 2> >($LOGCMD)

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    info "Inhoud configuratiedatabase vastgelegd ($fase)."
}


report_database_changes() {
    local       output_file1=${1:-output_file1?}
    local       output_file2=${2:-output_file2?}

    info '
Wijzigingen in de configuratiedatabase,
< is de oude   instelling (A),
> is de nieuwe instelling (B):'
    diff "$output_file1" "$output_file2" | grep --regexp='[>|<]' || true
    info "
Bij wijzigingen voer uit:
    ${BLUE}gsettings set WIJZIGING${NORMAL}"
    rm "$CONFIG_A" "$CONFIG_B"
}


term_script() {
    exit $SUCCESS
}


###############################################################################
# Main line
###############################################################################

main() {
    init_script
    check_input "$@"
    process_input
    term_script
}


main "$@"


# EOF
