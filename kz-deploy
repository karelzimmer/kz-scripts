#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Pakket kz distribueren.
#
# Geschreven in 2009 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly PROGRAM_NAME='kz-deploy'
readonly PROGRAM_DESC='Pakket kz distribueren'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
PROGRAM_PATH=$(realpath "$(dirname  "${0/#-/}")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh

readonly USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

$PROGRAM_DESC.

Opties:
$OPTIONS_HELP"

readonly SCRIPTS_REPO=$HOME/kz-scripts
readonly UPLOADS_REPO=$HOME/kz-uploads
readonly UPLOADS_DISTDIR=$UPLOADS_REPO/dist


###############################################################################
# Global variables
###############################################################################


###############################################################################
# Functions
###############################################################################

function check-input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi
    eval set -- "$parsed"
    kz-common.process-options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info 'Geen argumenten toegestaan.'
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi

    # Aangemeld als ontwikkelaar?
    if ! kz-common.developer check; then
        kz-common.developer report
        NOERROR=true exit $ERROR
    fi
}


function process-input {
    check-names
    check-scripts
    build-package
    upload-website
    install-package
}


function check-names {
    local -i    check_rc=0
    local       deb_repo=$HOME/kz-deb
    local       docs_repo=$HOME/kz-docs
    local       uploads_repo=$HOME/kz-uploads/app

    info 'Controleer bestandsnamen (kz ckname)...'
    log "Check filenames with 'kz ckname'."
    "$SCRIPTS_REPO"/kz ckname   "$SCRIPTS_REPO" \
                                "$docs_repo"    \
                                "$deb_repo"     \
                                "$uploads_repo" || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        error '
Herstel alle meldingen hierboven en start daarna opnieuw.'
        NOERROR=true exit $check_rc
    fi
}


function check-scripts {
    local -i check_rc=0

    info 'Controleer scripts (kz ivp)...'
    log "Check scripts with 'kz ivp'."
    "$SCRIPTS_REPO"/kz ivp || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        error '
Herstel alle meldingen hierboven en start daarna opnieuw.'
        NOERROR=true exit $check_rc
    fi
}


function build-package {
    local -i check_rc=0

    info 'Bouw pakket en website (kz build)...'
    log "Build package and website with 'kz build'."
    "$SCRIPTS_REPO"/kz build || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        error '
Herstel alle meldingen hierboven en start daarna opnieuw.'
        NOERROR=true exit $check_rc
    fi
}


function upload-website {
    local ftp_set='set ssl:verify-certificate no'
    local ftp_from=$UPLOADS_DISTDIR
    local ftp_to=/httpdocs
    local ftp_opts='--reverse --delete --verbose'
    local ftp_cmd="mirror $ftp_opts $ftp_from $ftp_to; exit"
    local ftp_host=server106.hosting2go.nl
    local ftp_user=kzimmer
    local ftp_login=$HOME/.kz-$ftp_host

    info 'Upload website (lftp)...'
    if ! [[ -f $ftp_login ]]; then
        read -rsp "Wachtwoord voor 'ftp://$ftp_host': "
        info "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login" |& $LOGCMD
    fi
    if ! lftp   --user      "$ftp_user"             \
                --password  "$(cat "$ftp_login")"   \
                -e          "$ftp_set; $ftp_cmd"    \
                "$ftp_host"                         |& $LOGCMD; then
        rm      "$ftp_login"
        error 'Uploaden website is mislukt.'
        NOERROR=true exit $ERROR
    fi
    sleep 5
}


function install-package {
    info 'Installeer pakket kz (kz getdeb)...'
    # Constructie '2> >($LOGCMD)' om stderr naar de log te krijgen.
    if ! wget -O- karelzimmer.nl/kz 2> >($LOGCMD) | bash; then
        error 'Installeren pakket kz is niet uitgevoerd.'
        NOERROR=true exit $ERROR
    fi
}


function term-script {
    exit $SUCCESS
}


###############################################################################
# Script
###############################################################################

function main {
    kz-common.init-script "$@"
    check-input "$@"
    process-input
    term-script
}

main "$@"
