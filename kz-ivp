#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Scripts controleren.
#
# Geschreven in 2015 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly program_name='kz-ivp'
readonly program_desc='Scripts controleren'
readonly display_name=${program_name/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
program_path=$(realpath "$(dirname  "${0/#-/}")")
readonly program_path
source  "$program_path"/kz_common.sh

readonly usage="Gebruik: $display_name $options_usage"
readonly help="Gebruik: $display_name [OPTIE...]

$program_desc.

Opties:
$options_help"


###############################################################################
# Globale variabelen
###############################################################################

declare -i maxrc=0


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usageline"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info 'Geen argumenten toegestaan.'
        info "$usageline"
        exit $err
    fi

    # Aangemeld als ontwikkelaar?
    if ! kz_common.developer check; then
        kz_common.developer report
        exit $err
    fi
}


function process_input {
    local script=''
    local scriptsdir=$HOME/kz-scripts

    cd "$scriptsdir"
    for script in *; do
        if ! [[ -f $script ]]; then
            continue
        fi
        case $script in
            README.md|LICENSE)
                continue
                ;;
        esac
        check_trailing_spaces
        case $script in
            *.policy)
                continue
                ;;
            *.1|*.desktop)
                check_record_length
                ;;
            *.completion)
                check_record_length
                check_shellcheck
                ;;
            kz_common.sh)
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh)
                check_tags
                check_record_types
                check_shellcheck
                ;;
            *)
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done
    cd "$HOME"
}


function check_code {
    if grep --quiet --line-regexp --regexp='#!''/bin/bash' "$script"; then
        check_shellcheck
    elif grep   --quiet                         \
                --line-regexp                   \
                --regexp='#!''/usr/bin/python3' \
                "$script"                       || [[ $script = kz_common.py ]]
    then
        check_pycodestyle
    else
        err "
In $script:
    Onbekend script.  Functie 'check_code' kan scriptcode niet controleren."
        maxrc=$err
    fi
}


function check_pycodestyle {
    local -i check_rc=0

    pycodestyle "$script" || check_rc=$?
    if [[ $check_rc -ne $ok ]]; then
        maxrc=$err
    fi
}


function check_record_length {
    local -i max_line_length=79
    local -i max_line_length_found=0

    max_line_length_found=$(wc --max-line-length < "$script")
    if  [[ $max_line_length_found -gt $max_line_length ]]; then
        err "
In $script:
    Één regel is langer dan $max_line_length ($max_line_length_found).
"
        maxrc=$err
    fi
}


function check_record_types {
    local wrong_record=''

    # Kijk naar regels die beginnen met #1 t/m #9.
    # Goed:
    # #1 en #2
    # #1 foo (bar)              (met optie -a, --app tonen en verwerken)
    # #1-foo (bar)              (met optie -a, --app niet tonen, wel verwerken)
    # #2 Verwijd./reset opdracht
    # Fout:
    # De rest :-)
    wrong_record=$(
        grep --regexp='#[1-9]' "$script" --line-number  |
        grep --regexp='#[1-2]$' --invert-match          |
        grep --regexp='#[1-2] ' --invert-match          |
        grep --regexp='#1-'     --invert-match          || true
        )
    if [[ $wrong_record ]]; then
        err "
In $script:
    Foutieve regel(s) gevonden.
$(
    printf '%s' "$wrong_record" |
                nl --number-width=8 --number-separator='' --body-numbering=n
)
"
        maxrc=$err
    fi
}


function check_shellcheck {
    local -i check_rc=0

    shellcheck --external-sources "$script" || check_rc=$?
    if [[ $check_rc -ne $ok ]]; then
        maxrc=$err
    fi
}


function check_tags {
    if grep --quiet             \
            --word-regexp       \
            --regexp='FIXME'':' \
            --regexp='TODO'':'  \
            "$script"; then
        warn "
In $script:
    Gemarkeerde annotatie gevonden.

$(
    grep    --line-number           \
            --word-regexp           \
            --regexp='FIXME'':'     \
            --regexp='TODO'':'      \
            "$script"               |
    nl      --number-width=4        \
            --number-separator=''   \
            --body-numbering=n
)
"
    while true; do
        read -rp 'Doorgaan? [J/n]: '
        case $REPLY in
            j*|J*|'')
                break
                ;;
            n*|N*)
                exit $ok
                break
                ;;
            *)
                printf '%s' "${rewrite_line}"
                continue
                ;;
        esac
    done
    fi
}


function check_trailing_spaces {
    if grep --quiet --regexp=' ''$' "$script"; then
        err "
In $script:
    Eindspaties gevonden.
$(
    grep    --line-number --regexp=' ''$' "$script" |
    nl      --number-width=4  --number-separator='' --body-numbering=n
)
"
        maxrc=$err
    fi
}


function term_script {
    exit $maxrc
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
