#!/usr/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Scripts controleren.                                                        #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
source "$PROGRAM_PATH"/kz-common.sh
PROGRAM_NAME=kz-ivp
DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
RELEASE_YEAR=2015


###############################################################################
# Global constants                                                            #
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Scripts controleren.

Opties:
$OPTIONS_HELP_COMMON"


###############################################################################
# Globale variabelen
###############################################################################

declare -i MAXRC=0


###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local   -i  getopt_rc=0
    local       parsed=''
    local       prompt=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        TEXT='geen argumenten opgeven'
        printf "$DISPLAY_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    fi

    check_user
    check_dependencies
}


function check_dependencies {
    if ! command -v pycodestyle 1> /dev/null; then
        log 'Installeer pycodestyle...'
        sudo apt-get install --yes pycodestyle
    fi
    if ! command -v shellcheck 1> /dev/null; then
        log 'Installeer shellcheck...'
        # Debian's pakket is oud, snap is nieuwer.
        sudo snap install shellcheck
    fi
}


function process_input {
    local script=''
    local scriptsdir=$HOME/kz-scripts

    cd "$scriptsdir" || exit $ERROR
    for script in *; do
        if ! [[ -f $script ]]; then
            continue
        fi
        case $script in
            LICENSE|README.md)
                continue
                ;;
        esac
        check_lines
        check_tags
        check_trailing_spaces
        case $script in
            *.1|*.desktop|*.policy)
                continue
                ;;
            kz_common.py|kz-genpwd|kz-update)
                check_release_year
                check_pycodestyle
                ;;
            kz-common.sh)
                check_release_year
                check_shellcheck
                ;;
            *.completion|*.sh)
                check_shellcheck
                ;;
            *)
                check_release_year
                check_code
                ;;
        esac
    done
    cd "$HOME" || exit $ERROR
}


function check_code {
    if grep --quiet --line-regexp --regexp='#!''/usr/bin/bash' "$script"; then
            check_shellcheck
    elif grep   --quiet                         \
                --line-regexp                   \
                --regexp='#!''/usr/bin/python3' \
                "$script"; then
            check_pycodestyle
    else
        info "
${BOLD}In $script:${NORMAL}
    Onbekend script.  Functie 'check_code' kan scriptcode niet controleren."
        MAXRC=$ERROR
    fi
}


function check_lines {
    local -i line_num=0
    local -i max_lines=1000
    local -i max_line_length=0
    local -i max_line_length_found=0

    case $script in
        *.sh)
            max_line_length=249
            ;;
        *.policy)
            max_line_length=104
            ;;
        *)
            max_line_length=79
            ;;
    esac

    max_line_length_found=$(wc --max-line-length < "$script")
    if  [[ $max_line_length_found -gt $max_line_length ]]; then
        info "
${BOLD}In $script:${NORMAL}
    Een regel is langer dan $max_line_length ($max_line_length_found).
"
        MAXRC=$ERROR
    fi

    line_num=$(wc --lines < "$script")
    if [[ $line_num -gt $max_lines ]]; then
        info "
${BOLD}In $script:${NORMAL}
    Meer dan $max_lines regels ($line_num).
"
        MAXRC=$ERROR
    fi

    #  '#1'=ok, '#1 foo'=ok,'#1(foo'=ok, '#1foo'=Â¬ok, hetzelfde voor #2 en #3.
    if [[ $script == kz-install*.sh || $script == kz-setup*.sh ]]; then
        wrong_record=$(
            grep --regexp='#[1-9]' "$script" --line-number  |
            grep --regexp='#[1-3]$' --invert-match          |
            grep --regexp='#[1-3] ' --invert-match          |
            grep --regexp='#[1-3](' --invert-match          || true
            )
    else
        wrong_record=''
    fi
    if [[ $wrong_record ]]; then
        info "
${BOLD}In $script:${NORMAL}
    Foutieve regel(s) gevonden.
$(
    printf '%s' "$wrong_record" |
                nl --number-width=8 --number-separator='' --body-numbering=n
)
"
        MAXRC=$ERROR
    fi
}


function check_shellcheck {
    local -i    check_rc=0

    shellcheck --external-sources "$script" || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        MAXRC=$ERROR
    fi
}


function check_release_year {
    if ! grep   --quiet                     \
                --regexp='RELEASE_YEAR='    \
                --regexp='release_year = '  \
                "$script"; then
        info "
${BOLD}In $script:${NORMAL}
    Vrijgavejaar (RELEASE_YEAR/release_year) ontbreekt.
"
        MAXRC=$ERROR
    fi
}


function check_tags {
    if grep --quiet             \
            --word-regexp       \
            --regexp='FIXME'':' \
            --regexp='TODO'':'  \
            "$script"; then
        info "
${BOLD}In $script:${NORMAL}
    Gemarkeerde annotatie gevonden.

$(
    grep    --line-number           \
            --word-regexp           \
            --regexp='FIXME'':'     \
            --regexp='TODO'':'      \
            "$script"               |
    nl      --number-width=4        \
            --number-separator=''   \
            --body-numbering=n
)
"
    fi
}


function check_trailing_spaces {
    if grep --quiet --regexp=' ''$' "$script"; then
        info "
${BOLD}In $script:${NORMAL}
    Eindspaties gevonden.
$(
    grep    --line-number --regexp=' ''$' "$script" |
    nl      --number-width=4  --number-separator='' --body-numbering=n
)
"
        MAXRC=$ERROR
    fi
}


function check_pycodestyle {
    local -i check_rc=0

    pycodestyle "$script" || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        MAXRC=$ERROR
    fi
}


function term_script {
    exit $MAXRC
}


###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}


main "$@"
