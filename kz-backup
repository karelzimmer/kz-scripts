#!/usr/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Back-up maken.                                                              #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
source "$PROGRAM_PATH"/kz-common.sh
PROGRAM_NAME=kz-backup
DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
RELEASE_YEAR=2007


###############################################################################
# Global constants                                                            #
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON'nx'
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON',dry-run,delete'
readonly USAGE="Gebruik: $DISPLAY_NAME [-n|--dry-run] [-x|--delete]
                   $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Back-up maken.

Opties:
  -n --dry-run  een proefrun uitvoeren zonder wijzigingen aan te brengen
  -x --delete   uit de Persoonlijke map verwijderde bestanden ook uit de
                back-up verwijderen (standaard bij optie --gui)
$OPTIONS_HELP_COMMON"

readonly SOURCE=$HOME
TARGET=$(ls --directory /media/"$USER"/* 2> /dev/null); readonly TARGET

###############################################################################
# Global variables                                                            #
###############################################################################

declare OPTION_DELETE=''
declare OPTION_DRY_RUN=''


###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local   -i  getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            -n|--dry-run)
                OPTION_DRY_RUN='--dry-run'
                shift
                ;;
            -x|--delete)
                OPTION_DELETE='--delete'
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        TEXT='geen argumenten opgeven'
        printf "$DISPLAY_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
        exit $ERROR
    fi

    check_user
}


function process_input {

    if [[ -z $TARGET ]]; then
        warning 'Koppel een back-up-medium aan.'
        exit $WARNING
    elif [[ $(printf '%s\n' "$TARGET" | wc --lines) -gt 1 ]]; then
        warning "Koppel slechts één back-up-medium aan.

Nu aangekoppeld zijn:
$TARGET

Koppel media af via Bestanden."
        exit $WARNING
    fi

    TITLE='Back-up maken'
    TEXT='Controleer beschikbare schijfruimte (kan even duren)...'
    if $OPTION_GUI; then
        check_space > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     2> >($LOGCMD)
            )
    else
        info "$TEXT"
        check_space
    fi

    TEXT='Backup maken...'
    check_on_ac_power
    create_backup
}


function check_space {
    local       capacity_human=''
    local       mounted=''
    local       need_human=''
    local   -i  capacity_bytes=0
    local   -i  need_bytes=0

    need_bytes=$(
        du  --apparent-size \
            --block-size=1  \
            --summarize     \
            --total         \
            "$SOURCE"       \
            2> >($LOGCMD)   |
        awk 'END{print $1}'
        )
    capacity_bytes=$(df --block-size=1 "$TARGET" | awk 'END{print $2}')

    if [[ $need_bytes -gt $capacity_bytes ]]; then
        need_human=$(
            du  --apparent-size     \
                --block-size=1      \
                --human-readable    \
                --summarize         \
                --total             \
                "$SOURCE"           \
                2> >($LOGCMD)       |
            awk 'END{print $1}'
            )
        capacity_human=$(df --human-readable "$TARGET" | awk 'END{print $2}')
        mounted=$(df "$TARGET" | awk 'END{print $6}')
        error "
Back-up maken is mislukt.

Te weinig ruimte op $mounted.

Benodigd is ${need_human}iB, beschikbaar is ${capacity_human}iB.

Gebruik een ander back-up-medium met minimaal ${need_human}iB beschikbaar,
zoals een USB-stick of externe harddisk.
"
        exit $ERROR
    fi
}


function create_backup {
    local       backup=backup-$HOSTNAME-$USER
    local   -i  rsync_rc=0
    local       exclude=''

    exclude=$(mktemp -t 'kz-backup-XXXXXXXXXX')

    # Backup solution Déjà Dup exclude these files by default.
    cat << EOF > "$exclude"
.adobe/Flash_Player/AssetCache
.cache
.ccache
.gvfs
.Private
.recent-applications.xbel
.recently-used.xbel
snap/*/*/.cache
.steam/root
.thumbnails
.var/app/*/cache
.xsession-errors
EOF

    if $OPTION_GUI; then
        rsync   --archive                   \
                --verbose                   \
                --delete                    \
                --exclude-from="$exclude"   \
                --delete-excluded           \
                "$SOURCE"/                  \
                "$TARGET/$backup"           \
                2> >($LOGCMD)               |
        awk     '{print "#"$0}'             |
        zenity  --progress                  \
                --auto-close                \
                --no-cancel                 \
                --pulsate                   \
                --width 600                 \
                --height 50                 \
                --title "$TITLE"            \
                --text "$TEXT"              2> >($LOGCMD) || rsync_rc=$?
    else
        rsync   --archive                   \
                --verbose                   \
                --human-readable            \
                $OPTION_DRY_RUN             \
                $OPTION_DELETE              \
                --exclude-from="$exclude"   \
                "$SOURCE"/                  \
                "$TARGET/$backup"           2> >($LOGCMD) || rsync_rc=$?
    fi
    rm "$exclude"

    case $rsync_rc in
        0)
            return
            ;;
        11)
            log 'Te weinig ruimte.'
            error "
Back-up maken is mislukt.

Te weinig ruimte op $(df "$TARGET" | awk 'END{print $6}').

Controleer in het Terminalvenster de log met:
    ${BLUE}$LOGCMD_CHECK${NORMAL}"
            exit $ERROR
            ;;
        23)
            log 'Niet alle bestanden waren leesbaar?'
            warning "
Back-up maken is deels gelukt.

Enkele bestanden waren niet veilig te stellen.

Controleer in het Terminalvenster de log met:
    ${BLUE}$LOGCMD_CHECK${NORMAL}"
            exit $WARNING
            ;;
        *)
            error "
Back-up maken is mislukt.

Foutcode rsync is $rsync_rc.

Controleer in het Terminalvenster de log met:
    ${BLUE}$LOGCMD_CHECK${RED}"
            exit $ERROR
            ;;
    esac
}


function term_script {
    info "
De back-up is gemaakt.
${BOLD}$OPTION_DRY_RUN $OPTION_DELETE${NORMAL}
Koppel zelf (veilig!) het back-up-medium af."
    exit $SUCCESS
}


###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}


main "$@"
