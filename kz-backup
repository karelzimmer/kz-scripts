#!/usr/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Back-up maken.                                                              #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh
readonly PROGRAM_NAME='kz-backup'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
readonly RELEASE_YEAR=2007


###############################################################################
# Global constants                                                            #
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON'gnt:x'
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON',gui,delete,dry-run,target:'
readonly USAGE="Gebruik: $DISPLAY_NAME [-g|--gui] [-n|--dry-run]
                   [-t|--target=DOELMAP][-x|--delete]
                   $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Back-up maken.

Opties:
  -g, --gui      start in grafische modus
  -n, --dry-run  een proefrun uitvoeren zonder wijzigingen aan te brengen
  -x, --delete   uit de Persoonlijke map verwijderde bestanden ook uit de
                 back-up verwijderen (standaard bij optie -g, --gui)
  -t, --target=DOELMAP
                 plaats back-up in de DOELMAP
$OPTIONS_HELP_COMMON"

readonly SOURCE=$HOME
TARGET_DEFAULT=$(ls --directory /media/"$USER"/* 2> /dev/null)
readonly TARGET_DEFAULT

###############################################################################
# Global variables                                                            #
###############################################################################

declare OPTION_DELETE=''
declare OPTION_DRY_RUN=''
declare OPTION_GUI=false
declare OPTION_TARGET=false
declare TARGET_ARGUMENT=''
declare TARGET=''

###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        info "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                OPTION_GUI=true
                if [[ -t 1 ]]; then
                    reset_terminal_attribs
                fi
                shift
                ;;
            -n|--dry-run)
                OPTION_DRY_RUN='--dry-run'
                shift
                ;;
            -t|--target)
                if $OPTION_TARGET; then
                    error "Optie '$1' eenmaal opgeven."
                    info "$USAGELINE" >&2
                    exit    $ERROR
                else
                    OPTION_TARGET=true
                    TARGET_ARGUMENT=$2
                fi
                shift 2
                ;;
            -x|--delete)
                OPTION_DELETE='--delete'
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        error 'Geen argumenten toegestaan.'
        info "$USAGELINE" >&2
        exit $ERROR
    fi

    check_user
}


function process_input {
    if $OPTION_TARGET; then
        TARGET=$TARGET_ARGUMENT
    else
        TARGET=$TARGET_DEFAULT
        if [[ -z $TARGET ]]; then
            warning 'Koppel een back-up-medium aan, en start daarna opnieuw.'
            exit $WARNING
        elif [[ $(printf '%s\n' "$TARGET" | wc --lines) -gt 1 ]]; then
            warning "Koppel slechts één back-up-medium aan.

Nu aangekoppeld zijn:
$TARGET

Koppel media af via Bestanden, en start daarna opnieuw."
            exit $WARNING
        fi
    fi

    check_on_ac_power
    create_backup
}


function create_backup {
    local       backup=backup-$HOSTNAME-$USER
    local -i    rsync_rc=0
    local       exclude=''

    exclude=$(mktemp -t 'kz-backup-XXXXXXXXXX')

    # Backup solution Déjà Dup exclude these files by default.
    cat << EOF > "$exclude"
.adobe/Flash_Player/AssetCache
.cache
.ccache
.gvfs
.Private
.recent-applications.xbel
.recently-used.xbel
snap/*/*/.cache
.steam/root
.thumbnails
.var/app/*/cache
.xsession-errors
EOF

    TITLE='Back-up maken'
    TEXT='Backup voorbereiden...'
    if $OPTION_GUI; then
        rsync   --archive                   \
                --verbose                   \
                --delete                    \
                --exclude-from="$exclude"   \
                --delete-excluded           \
                "$SOURCE"/                  \
                "$TARGET/$backup"           \
                2> >($LOGCMD)               |
        awk     '{print "#"$0}'             |
        zenity  --progress                  \
                --auto-close                \
                --no-cancel                 \
                --pulsate                   \
                --width 600                 \
                --height 50                 \
                --title "$TITLE"            \
                --text "$TEXT"              2> >($LOGCMD) || rsync_rc=$?
    else
        rsync   --archive                   \
                --verbose                   \
                --human-readable            \
                $OPTION_DRY_RUN             \
                $OPTION_DELETE              \
                --exclude-from="$exclude"   \
                "$SOURCE"/                  \
                "$TARGET/$backup"           2> >($LOGCMD) || rsync_rc=$?
    fi
    rm "$exclude"

    case $rsync_rc in
        0)
            return $SUCCESS
            ;;
        11)
            log 'Te weinig ruimte.'
            error "
Back-up maken is mislukt.

Te weinig ruimte op $TARGET.

Koppel een medium aan met meer ruimte, en start daarna opnieuw."
            exit $ERROR
            ;;
        23)
            log 'Niet alle bestanden waren leesbaar?'
            warning "
Back-up maken is gedeeltelijk gelukt.

Mogelijk zijn enkele bestanden niet leesbaar.

Controleer de log in het Terminalvenster met:

    ${BLUE}$LOGCMD_CHECK${NORMAL}"
            exit $WARNING
            ;;
        *)
            error "
Back-up maken is mislukt.

Foutcode rsync is $rsync_rc.

Controleer de log in het Terminalvenster met:
    ${BLUE}$LOGCMD_CHECK${NORMAL}"
            exit $ERROR
            ;;
    esac
}


function term_script {
    info "
${GREEN}De back-up is gemaakt.${NORMAL}
${BLUE}$OPTION_DRY_RUN $OPTION_DELETE${NORMAL}
${YELLOW}Koppel zelf (veilig!) het back-up-medium af.${NORMAL}"
    exit $SUCCESS
}


###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}


main "$@"
