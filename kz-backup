#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Back-up maken.
#
# Geschreven in 2007 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly PROGRAM_NAME='kz-backup'
readonly PROGRAM_DESC='Back-up maken'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
PROGRAM_PATH=$(realpath "$(dirname  "${0/#-/}")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz_common.sh

readonly OPTIONS_SHORT+='gt:'
readonly OPTIONS_LONG+=',delete,dry-run,gui,target:'
readonly USAGE="Gebruik: $DISPLAY_NAME [--delete] [--dry-run] [-g|--gui] \
[-t|--target=DOELMAP]
                   $OPTIONS_USAGE"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

$PROGRAM_DESC.

Opties:
      --delete   uit de Persoonlijke map verwijderde bestanden ook uit de
                 back-up verwijderen (standaard bij optie -g, --gui)
      --dry-run  een proefrun uitvoeren zonder wijzigingen aan te brengen
  -g, --gui      start in grafische modus
  -t, --target=DOELMAP
                 plaats back-up in de DOELMAP
$OPTIONS_HELP"

readonly SOURCE=$HOME


###############################################################################
# Global variables
###############################################################################

declare MEDIUM=''
declare OPTION_DELETE=''
declare OPTION_DELETE_EXCLUDED=''
declare OPTION_DRY_RUN=''
declare OPTION_GUI=false
declare OPTION_TARGET=false
declare TARGET_ARGUMENT=''
declare TARGET_MEDIUM=''
declare TARGET=''
declare TEXT=''
declare TITLE=''


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $OK ]]; then
        info "$USAGELINE"
        exit $ERR
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                OPTION_GUI=true
                kz_common.reset_terminal_attributes
                shift
                ;;
            --delete)
                OPTION_DELETE='--delete'
                OPTION_DELETE_EXCLUDED='--delete-excluded'
                shift
                ;;
            --dry-run)
                OPTION_DRY_RUN='--dry-run'
                shift
                ;;
            -t|--target)
                OPTION_TARGET=true
                TARGET_ARGUMENT=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info 'Geen argumenten toegestaan.'
        info "$USAGELINE"
        exit $ERR
    fi
}


function process_input {
    if $OPTION_TARGET; then
        if ! [[ -d $TARGET_ARGUMENT ]]; then
            info "Map $TARGET_ARGUMENT bestaat niet."
            info "$USAGELINE"
            exit $ERR
        fi
        TARGET=$TARGET_ARGUMENT/backup-$HOSTNAME-$USER
        TARGET_MEDIUM=$TARGET_ARGUMENT
    else
        MEDIUM=$(ls --directory /media/"$USER"/* 2> /dev/null || true)
        if [[ -z $MEDIUM ]]; then
            TEXT="Koppel het USB-medium aan waarop de back-up wordt geplaatst."
            warn "$TEXT"
            if ! $OPTION_GUI; then
                kz_common.wait_for_enter
            fi
            MEDIUM=$(ls --directory /media/"$USER"/* 2> /dev/null || true)
            if [[ -z $MEDIUM ]]; then
                err 'Geen USB-medium gevonden.

Koppel een USB-medium aan, en start daarna backup opnieuw.'
                exit $ERR
            fi
        fi
        if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
            err "Koppel slechts één USB-medium aan.

Nu aangekoppeld zijn:
$MEDIUM

Koppel media af via Bestanden, en start daarna backup opnieuw."
            exit $ERR
        fi
        TARGET=$MEDIUM/backup-$HOSTNAME-$USER
        TARGET_MEDIUM=$MEDIUM
    fi

    kz_common.check_on_ac_power

    TITLE='Instellingen veiligstellen'
    TEXT='Instellingen veiligstellen'
    if $OPTION_GUI; then
        backup_settings                |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$TITLE"    \
                --text      "$TEXT"     2> >($LOGCMD)
    else
        info "$TEXT..."
        backup_settings
    fi

    create_backup
}


function backup_settings {
    local tgtdir=$HOME/Instellingen

    mkdir --parents "$tgtdir" |& $LOGCMD
    backup_settings_desktop_background
    backup_settings_favorite_apps
    backup_settings_installed_apps
    backup_settings_user_photo

    # Old folder, lagacy.
    rm --force --recursive "$HOME"/kz-data/
}


function backup_settings_desktop_background {
    local file=$tgtdir/Achtergrond
    local picture_file=''

    picture_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )
    cp --update "$picture_file" "$file" |& $LOGCMD || true
}


function backup_settings_favorite_apps {
    local file=$tgtdir/Favorieten

    gsettings get org.gnome.shell favorite-apps  > "$file" |& $LOGCMD || true
}


function backup_settings_installed_apps {
    local file=$tgtdir/Apps
    local header1="[1/3] Deze pakketten zijn geïnstalleerd via Software, \
met een opdracht zoals
      'sudo apt --install <pakket|bestand>', of met kz install:"
    local header2="[2/3] Deze snaps zijn geïnstalleerd via Software, \
met '[sudo] install <snap>',
      of met kz install:"
    local header3="[3/3] Deze pakketbronnen zijn toegevoegd met de \
installatie van een pakket, met
      de opdracht 'sudo add-apt-repository ppa:<ppa-gebruiker>/<ppa-naam>', of
      met kz install:"
    local search=/etc/apt/sources.list

    printf '%b\n' "$DASHES\n$(date)\n$DASHES" > "$file"

    printf '%b\n' "$header1\n$DASHES" >> "$file"
    if ! apt list --manual-installed 2> >($LOGCMD) >> "$file"; then
        true
    fi
    printf '%b\n' "$DASHES\n" >> "$file"

    printf '%b\n' "$header2\n$DASHES" >> "$file"
    if ! snap list 2> /dev/null >> "$file"; then
        printf '%s\n' 'snap is niet geïnstalleerd' >> "$file"
    fi
    printf '%b\n' "$DASHES\n" >> "$file"

    printf '%b\n' "$header3\n$DASHES" >> "$file"
    cd  $search.d
    if !    grep    --recursive             \
                    --no-filename           \
                    --regexp='^deb '        \
                    --recursive             \
                    /etc/apt/sources.list   \
                    /etc/apt/sources.list.d |
            grep    --invert-match          \
                    --regexp='ubuntu.com'   |
            sort    --unique                >> "$file"; then
        true
    fi
    printf '%b\n' "$DASHES" >> "$file"
}


function backup_settings_user_photo {
    local srcdir=/var/lib/AccountsService/icons
    local file=$tgtdir/Gebruikersfoto

    cp --update $srcdir/"$USER" "$file" |& $LOGCMD || true
}


function create_backup {
    local       exclude=''
    local   -i  rsync_rc=0

    exclude=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX")

    # Backup solution Déjà Dup exclude these files by default.
    cat << EOF > "$exclude"
.adobe/Flash_Player/AssetCache
.cache
.ccache
.gvfs
.Private
.recent-applications.xbel
.recently-used.xbel
snap/*/*/.cache
.steam/root
.thumbnails
.var/app/*/cache
.xsession-errors
EOF

    # Skip git-controlled directories.
    cat << EOF >> "$exclude"
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    TITLE='Back-up maken'
    TEXT='Backup voorbereiden (dit kan even duren)'
    if $OPTION_GUI; then
        rsync   --archive                   \
                --verbose                   \
                --delete                    \
                --exclude-from="$exclude"   \
                --delete-excluded           \
                "$SOURCE"/                  \
                "$TARGET"/                  \
                2> >($LOGCMD)               |
        sed     --expression='s/^/#/'       |
        zenity  --progress                  \
                --auto-close                \
                --no-cancel                 \
                --pulsate                   \
                --width     600             \
                --height    50              \
                --title     "$TITLE"        \
                --text      "$TEXT"         2> >($LOGCMD) || rsync_rc=$?
    else
        info "$TEXT..."
        rsync   --archive                   \
                --verbose                   \
                --human-readable            \
                $OPTION_DRY_RUN             \
                $OPTION_DELETE              \
                $OPTION_DELETE_EXCLUDED     \
                --exclude-from="$exclude"   \
                "$SOURCE"/                  \
                "$TARGET"/                  2> >($LOGCMD) || rsync_rc=$?
    fi
   rm "$exclude"

    case $rsync_rc in
        0)
            return $OK
            ;;
        *)
            err "Back-up maken is geeindigd met fouten.

Mogelijk zijn enkele bestanden niet leesbaar, of zijn er bestanden verwijderd
of toegevoegd tijdens het maken van de back-up, of is er te weinig ruimte op
$TARGET."
            exit $ERR
            ;;
    esac

}


function term_script {
    local       dev=''
    local   -i  rc=0

    TEXT='Gegevens uit tijdelijk geheugen wegschrijven (dit kan even duren)'
    if $OPTION_GUI; then
        sync                                        |
        zenity  --progress                          \
                --pulsate                           \
                --auto-close                        \
                --no-cancel                         \
                --width     600                     \
                --height    50                      \
                --title     "$TITLE"                \
                --text      "$TEXT"                 2> >($LOGCMD) || rc+=$?
    else
        info "
$TEXT..."
        sync |& $LOGCMD || rc+=$?
    fi

    TEXT=''
    if [[ $TARGET_MEDIUM == /media/* ]]; then
        TEXT='Het USB-medium afkoppelen'
        dev='/dev/'$(
            lsblk   --ascii             |
            grep    --before-context=1  \
                    "$TARGET_MEDIUM"    |
            head    -1                  |
            cut     --delimiter='-'     \
                    --fields=2          |
            cut     --delimiter=' '     \
                    --fields=1
        )
        if $OPTION_GUI; then
            umount "$TARGET_MEDIUM";                    \
            udisksctl lock --block-device "$dev";       \
            udisksctl power-off --block-device "$dev"   |
            zenity  --progress                          \
                    --pulsate                           \
                    --auto-close                        \
                    --no-cancel                         \
                    --width     600                     \
                    --height    50                      \
                    --title     "$TITLE"                \
                    --text      "$TEXT"                 2> >($LOGCMD) || rc+=$?
        else
            info "$TEXT..."
            umount "$TARGET_MEDIUM" |& $LOGCMD || rc+=$?
            udisksctl lock --block-device "$dev" |& $LOGCMD || rc+=$?
            udisksctl power-off --block-device "$dev" |& $LOGCMD || rc+=$?
        fi
        if [[ $rc -eq $OK ]]; then
            info "
De back-up is gemaakt.

Het USB-medium kan verwijderd worden."
        else
            warn "
De back-up is gemaakt.

Koppel zelf (veilig!) het USB-medium af."
        fi
    fi
    exit $OK
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
