#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Bestandsnamen controleren.
#
# Geschreven in 2012 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly PROGRAM_NAME='kz-ckname'
readonly PROGRAM_DESC='Bestandsnamen controleren'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

# Redhat reports $0 as '-bash', dirname "$0" -> dirname: invalid option -- 'b'.
PROGRAM_PATH=$(realpath "$(dirname  "${0/#-/}")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh

readonly USAGE="Gebruik: $DISPLAY_NAME $OPTIONS_USAGE
                   [MAP...]"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...] [MAP...]

$PROGRAM_DESC.

Opties:
$OPTIONS_HELP

Argumenten:
  MAP            begin te controleren vanaf map MAP"

declare -ir FILENAME_MAXLEN=142
readonly    START_DFLT=$HOME


###############################################################################
# Global variables
###############################################################################

declare     ARGUMENT_MAP=false
declare -a  MAP_ARGUMENTS=()


###############################################################################
# Functions
###############################################################################

function check-input {
    local -i    getopt_rc=0
    local -i    map_arg_num=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $OK ]]; then
        info "$USAGELINE"
        NOERR=true exit $ERR
    fi
    eval set -- "$parsed"
    kz-common.process-options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    while [[ "$*" ]]; do
        ARGUMENT_MAP=true
        MAP_ARGUMENTS[$map_arg_num]=$1
        ((++map_arg_num))
        shift
    done
    if ! $ARGUMENT_MAP; then
        MAP_ARGUMENTS[0]=$START_DFLT
    fi
    for dir in "${MAP_ARGUMENTS[@]}"; do
        if ! [[ -d $dir ]]; then
            info "Map '$dir' bestaat niet"
            info "$USAGELINE"
            NOERR=true exit $ERR
        fi
    done
}


function process-input {
    check-files-and-folders
}


function check-files-and-folders {
    local       basename
    local -i    count=0
    local       dirname
    local       file
    local       good

    # Het maakt niet uit of in de bestandsnaam speciale tekens voorkomen zoals
    # tab, spatie, enz.  Hiervoor zorgt de find met print0,en de read met IFS=
    # en als delimiter de null character die niet mag voorkomen in een
    # bestandsnaam.  N.B.: In Linux is alles een bestand!
    while IFS= read -r -d $'\0' file; do

        dirname=$(dirname "$file")
        basename=$(basename "$file")

        # Verwijder de slechte tekens, \ is escape voor \.
        good=$(printf '%s'"$file" | tr --delete '?"\\<>*|:')

        if ! [[ $file = "$good" ]]; then
            ((++count))
            if [[ -d "$file" ]]; then
                info "BadName  DIR '$file'."
            elif [[ -f "$file" ]]; then
                info "BadName FILE '$basename' in map '$dirname'."
            else
                info "BadName SYML '$file'."
            fi
        fi

        if [[ ${#basename} -gt $FILENAME_MAXLEN ]]; then
            ((++count))
            if [[ -d "$file" ]]; then
                info "BadLen.  DIR '$basename'."
            else
                info "BadLen. FILE '$basename' in map '$dirname'."
            fi
        fi

    done < <(
        find    "${MAP_ARGUMENTS[@]}"   \
                -not -name '.*'         \
                -not -path '*/.*'       \
                -type f                 \
                -print0                 \
                -or                     \
                -not -name '.*'         \
                -not -path '*/.*'       \
                -type d                 \
                -print0                 \
                -or                     \
                -not -name '.*'         \
                -not -path '*/.*'       \
                -type l                 \
                -print0
        )

    if [[ $count -eq 0 ]]; then
        return $OK
    elif [[ $count -eq 1 ]]; then
        info 'Er is een fout gevonden.'
    else
        info "Er zijn $count fouten gevonden."
    fi
}


function term-script {
    exit $OK
}


###############################################################################
# Script
###############################################################################

function main {
    kz-common.init-script "$@"
    check-input "$@"
    process-input
    term-script
}

main "$@"
