#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Back-up terugzetten.                                                        #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh
readonly PROGRAM_NAME='kz-restore'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
readonly RELEASE_YEAR=2007

###############################################################################
# Global constants                                                            #
###############################################################################

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON'gs:'
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON',dry-run,gui,source:'
readonly USAGE="Gebruik: $DISPLAY_NAME [--dry-run] [-g|--gui] \
[-s|--source=BRONMAP]
                    $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

Back-up terugzetten.

Opties:
      --dry-run  een proefrun uitvoeren zonder wijzigingen aan te brengen
  -g, --gui      start in grafische modus
  -s, --source=BRONMAP
                 gebruik back-up in de BRONMAP
$OPTIONS_HELP_COMMON"

MEDIUM=$(ls --directory /media/"$USER"/* 2> /dev/null)
readonly MEDIUM
TARGET=$HOME

###############################################################################
# Global variables                                                            #
###############################################################################

declare OPTION_DRY_RUN=''
declare OPTION_GUI=false
declare OPTION_SOURCE=false
declare SOURCE_ARGUMENT=''
declare SOURCE_MEDIUM=''
declare SOURCE=''

###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        process_usage
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                OPTION_GUI=true
                reset_terminal_attributes
                shift
                ;;
            --dry-run)
                OPTION_DRY_RUN='--dry-run'
                shift
                ;;
            -s|--source)
                OPTION_SOURCE=true
                SOURCE_ARGUMENT=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        error 'Geen argumenten toegestaan.'
        process_usage
    fi

    check_user
}


function process_input {
    if $OPTION_SOURCE; then
        if ! [[ -d $SOURCE_ARGUMENT ]]; then
            error "Map $SOURCE_ARGUMENT bestaat niet."
            info "$USAGELINE" >&2
            exit $ERROR
        fi
        SOURCE=$SOURCE_ARGUMENT/backup-$HOSTNAME-$USER
        SOURCE_MEDIUM=$SOURCE_ARGUMENT
    else
        SOURCE=$MEDIUM/backup-$HOSTNAME-$USER
        if [[ -z $MEDIUM ]]; then
            error 'Geen USB-medium gevonden.

Koppel een USB-medium aan, en start daarna opnieuw.'
            exit $ERROR
        elif [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
            error "Koppel slechts één USB-medium aan.

Nu aangekoppeld zijn:
$MEDIUM

Koppel media af via Bestanden, en start daarna opnieuw."
            exit $ERROR
        elif ! [[ -d $SOURCE ]]; then
            error "Geen back-up gevonden op aangekoppeld USB-medium.

Koppel een USB-medium aan met hierop de map backup-$HOSTNAME-$USER, en start \
daarna opnieuw."
            exit $ERROR
        fi
        SOURCE_MEDIUM=$MEDIUM
    fi

    check_on_ac_power
    restore_backup
}


function restore_backup {
    local -i rsync_rc=0

    TITLE='Back-up terugzetten'
    TEXT="Restore voorbereiden..."
    if $OPTION_GUI; then
        rsync   --archive                   \
                --verbose                   \
                "$SOURCE"/                  \
                "$TARGET"                   \
                2> >($LOGCMD)               |
        awk     '{print "#"$0}'             |
        zenity  --progress                  \
                --auto-close                \
                --no-cancel                 \
                --pulsate                   \
                --width     600             \
                --height    50              \
                --title     "$TITLE"        \
                --text      "$TEXT"         2> >($LOGCMD) || rsync_rc=$?
    else
        rsync   --archive                   \
                --verbose                   \
                --human-readable            \
                $OPTION_DRY_RUN             \
                "$SOURCE"/                  \
                "$TARGET"                   2> >($LOGCMD) || rsync_rc=$?
    fi

    case $rsync_rc in
        0)
            return $SUCCESS
            ;;
        *)
            logcmd_check "Back-up terugzetten is geëindigd met fouten.

Mogelijk zijn enkele bestanden niet leesbaar, of zijn er bestanden verwijderd
of toegevoegd tijdens het terugzetten van de back-up, of is er te weinig
ruimte op $TARGET."
            exit $ERROR
            ;;
    esac
}


function term_script {
    local       device=''
    local   -i  rc=0

    sync |& $LOGCMD || rc+=$?
    TEXT=''
    if [[ $SOURCE_MEDIUM == /media/* ]]; then
        device='/dev/'$(
            lsblk   --ascii             |
            grep    --before-context=1  \
                    "$SOURCE_MEDIUM"    |
            head    -1                  |
            awk     -F'-'               \
                    '{print $2}'        |
            awk     -F' '               \
                    '{print $1}'
        )
        umount "$SOURCE_MEDIUM" |& $LOGCMD  || rc+=$?
        udisksctl lock --block-device "$device" |& $LOGCMD  || rc+=$?
        udisksctl power-off --block-device "$device" |& $LOGCMD  || rc+=$?
        if [[ $rc -eq $SUCCESS ]]; then
            TEXT='

Het USB-medium kan verwijderd worden.'
        else
            TEXT="

${YELLOW}Koppel zelf (veilig!) het USB-medium af."
        fi
    fi
    info "
${GREEN}De back-up is teruggezet.$TEXT${NORMAL}"
    exit $SUCCESS
}

###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
