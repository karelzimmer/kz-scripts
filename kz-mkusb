#!/usr/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# USB-sticks maken.                                                           #
#                                                                             #
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.                         #
###############################################################################

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
source "$PROGRAM_PATH"/kz-common.sh
PROGRAM_NAME=kz-mkusb
DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
RELEASE_YEAR=2014


###############################################################################
# Global constants                                                            #
###############################################################################

readonly RUN_AS_SUPERUSER=true
readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON's:t:'
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON',source:,target:'
readonly USAGE="Gebruik: $DISPLAY_NAME [-s|--source=BRON] \
[-t|--target=DOEL]
                  $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

USB-sticks maken.

Apties:
  -s --source=BRONMAP
                gebruik beeldbestand (.iso) in de BRONMAP
  -t --target=APPARAAT
                gebruik de opgegeven USB-stick-device APPARAAT
$OPTIONS_HELP_COMMON"

readonly DEVICE_DEFAULT=/dev/sdb
readonly SOURCE_DEFAULT=/home/${SUDO_USER:-$USER}/Downloads


###############################################################################
# Global variables                                                            #
###############################################################################

DEVICE=''
NO_FILES_FOUND=true
OPTION_SOURCE=false
OPTION_TARGET=false
SOURCEDIR=''
SOURCE_ARGUMENT=''
TARGET_ARGUMENT=''

# Terminalattributen, zie 'man terminfo'.  Gebruik ${<variabele-naam>}.
REWRITE_LINE=$(tput cuu1;tput el)


###############################################################################
# Functions                                                                   #
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            -s|--source)
                if $OPTION_SOURCE; then
                    TEXT="Optie '$1' eenmaal opgeven."
                    printf '%s\n%s\n' "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_SOURCE=true
                    SOURCE_ARGUMENT=$2
                fi
                shift 2
                ;;
            -t|--target)
                if $OPTION_TARGET; then
                    TEXT="Optie '$1' eenmaal opgeven."
                    printf '%s\n%s\n' "$TEXT" "$USAGELINE" >&2
                    exit $ERROR
                else
                    OPTION_TARGET=true
                    TARGET_ARGUMENT=$2
                fi
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf '%s\n%s\n' 'Teveel argumenten.' "$USAGELINE" >&2
        exit $ERROR
    fi

    if $OPTION_SOURCE; then
        SOURCEDIR=$SOURCE_ARGUMENT
    else
        SOURCEDIR=$SOURCE_DEFAULT
    fi
    if ! [[ -d $SOURCEDIR ]]; then
        TEXT=""
        printf '%s\n%s\n' "Map '$SOURCEDIR' bestaat niet." "$USAGELINE" >&2
        exit $ERROR
    fi

    if $OPTION_TARGET; then
        DEVICE=$TARGET_ARGUMENT
    else
        DEVICE=$DEVICE_DEFAULT
    fi

    check_user
    request_input
}


function request_input {
    printf '%s\n' 'De volgende /dev/sd schijven en partities zijn aanwezig:'
    if findmnt --list --output=SOURCE,TARGET | grep --regexp='/dev/sd'; then
        printf '%s\n' "
$DEVICE wordt gebruikt als doel en OVERSCHREVEN!"
        while true; do
            read -rp 'Is dit OK? [j/N]: '
            case $REPLY in
                j*|J*)
                    break
                    ;;
                n*|N*|'')
                    printf '\n%s\n%s\n' "$TEXT" "$USAGELINE"
                    exit $SUCCESS
                    ;;
                *)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
            esac
        done
    else
        printf '%s\n' "
Geen $DEVICE gevonden om te gebruiken als doel!

Gebruik optie --target om een ander device op te geven."
        exit $WARNING
    fi
}


function process_input {
    local -i    isosize=0
    local       usbname=''
    local       file=''

    NO_FILES_FOUND=true

    for file in "$SOURCEDIR"/*.iso; do

        if ! [[ -f "$file" ]]; then
            continue
        fi

        NO_FILES_FOUND=false
        usbname=$(basename "$file" .iso | tr '-' ' ')

        printf "\n${BOLD}%s${NORMAL}\n" "$usbname"

        while true; do
            read -rp 'maken/Overslaan/stoppen? [m/O/s]: '
            case $REPLY in
                m*|M*)
                    isosize=$(
                        du  --apparent-size \
                            --block-size=1  \
                            "$file"         |
                        cut --fields=1
                        )
                    check_on_ac_power
                    create_usb_stick "$file"
                    while true; do
                        read -rp "Nog een USB-stick '$usbname' maken? [j/N]: "
                        case $REPLY in
                            j*|J*)
                                check_on_ac_power
                                create_usb_stick "$file"
                                continue
                                ;;
                            n*|N*|'')
                                printf '%s\n' 'Klaar.'
                                break
                                ;;
                            *)
                                printf '%s' "${REWRITE_LINE}"
                                continue
                                ;;
                        esac
                    done
                    break
                    ;;
                o*|O*|'')
                    printf '%s\n' 'Overgeslagen.'
                    break
                    ;;
                s*|S*)
                    printf '%s\n' 'Gestopt.'
                    exit $SUCCESS
                    ;;
                *)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
            esac
        done
    done

    if $NO_FILES_FOUND; then
        TEXT="Geen beeldbestanden (.iso) gevonden in map '$SOURCEDIR'."
        printf '%s\n' "$TEXT" >&2
        exit $WARNING
    fi
}


function create_usb_stick {
    local dd_from=${1:-dd_from?}

    read -rp "Plaats USB-stick '$usbname', gevolgd door Enter [Enter]: "
    if [[ -e $DEVICE ]]; then
        printf '%s\n' "USB-stick $usbname wordt gemaakt..."

        dd  if="$dd_from"       \
            status=none         |
        pv  --size="$isosize"   |
        dd  of=$DEVICE          \
            bs=4M               \
            status=none

        printf '%s\n' "Gegevens schrijven naar $usbname (kan even duren)..."
        sync

        printf '%s\n' "USB-stick '$usbname' is gemaakt."

        printf '%s\n' "Ter controle is er een Kernel-based Virtuele Machine \
(KVM) gestart."
        if ! qemu-system-x86_64 -enable-kvm     \
                                -m 2048         \
                                -hda $DEVICE    |& $LOGCMD; then
            true
        fi

        if ! umount "$DEVICE" 2> /dev/null; then
            read -rp "Ontkoppel de USB-stick '$usbname', gevolgd door Enter \
[Enter]: "
        fi
        read -rp "Verwijder de USB-stick '$usbname', gevolgd door Enter \
[Enter]: "
    else
        printf '%s\n' "USB-stick '$usbname' is niet aanwezig op $DEVICE." >&2
        exit $WARNING
    fi
}


function term_script {
    exit $SUCCESS
}


###############################################################################
# Main line                                                                   #
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}


main "$@"
