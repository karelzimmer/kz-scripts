#!/usr/bin/env python3
"""
Show WiFi information.

This script shows WiFi information.
"""
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz wifi'
PROGRAM_DESC: str = _('Show WiFi information')

USAGE: str = f'{PROGRAM_NAME} {kz_common.OPTIONS_USAGE} [-g|--gui]'

X_OPTIONS_HELP: str = f"{_('  -g, --gui      run in graphical mode,')}\n"
X_OPTIONS_HELP += f"{_('                 requires a desktop environment')}"

HELP: str = (f"{_('Usage: {} [<options>]').format(PROGRAM_NAME)}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{X_OPTIONS_HELP}\n'
             f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Functions
###############################################################################

def process_options() -> bool:
    """
    This function handles the script options and arguments.
    """
    OPTION_GUI: bool = False

    PARSER = argparse.ArgumentParser(prog=PROGRAM_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-h', '--help', action='store_true')
    PARSER.add_argument('-m', '--manual', action='store_true')
    PARSER.add_argument('-u', '--usage', action='store_true')
    PARSER.add_argument('-v', '--version', action='store_true')
    PARSER.add_argument('-g', '--gui', action='store_true')
    args = PARSER.parse_args()

    if args.help:
        kz_common.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.manual:
        kz_common.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.usage:
        kz_common.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.version:
        kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.gui:
        if not kz_common.DESKTOP:
            TEXT: str = f"{PROGRAM_NAME}: {sys.argv[1]}: "
            TEXT += f"{_('no desktop environment available')}"
            OPTION_GUI = False
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            RC = kz_common.OK
            kz_common.term(PROGRAM_NAME, RC)
        else:
            OPTION_GUI = True

    return OPTION_GUI


def process_input(OPTION_GUI: bool = False) -> None:
    """
    This function processes the script options and arguments.
    """
    COMMAND: str = ''
    NMCLI_OUTPUT: str = ''

    TEXT: str = f"{_('Record this data to connect to the wireless network.')}"
    TEXT += '\n'
    COMMAND = 'nmcli device wifi show-password'

    if OPTION_GUI:
        try:
            NMCLI_OUTPUT = subprocess.run(COMMAND, shell=True, check=True,
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.DEVNULL,
                                          executable='bash')  # type: ignore
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
        else:
            NMCLI_OUTPUT = NMCLI_OUTPUT.stdout  # type: ignore
            NMCLI_OUTPUT = NMCLI_OUTPUT.decode("utf-8")  # type: ignore
            TEXT = TEXT + '\n' + NMCLI_OUTPUT
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
    else:
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        try:
            # Shows in Terminal QR code for quick connection to Wi-Fi network.
            subprocess.run(COMMAND, shell=True, check=True,
                           stderr=subprocess.DEVNULL, executable='bash')
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)


def term_script() -> None:
    """
    This function controls the termination of the script.
    """
    RC = kz_common.OK
    kz_common.term(PROGRAM_NAME, RC)


###############################################################################
# Main
###############################################################################

kz_common.init_script(PROGRAM_NAME)

OPTION_GUI = process_options()

process_input(OPTION_GUI)

term_script()
