#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import getopt
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-wifi'
PROGRAM_DESC: str = _('Show WiFi information')

USAGE: str = f'kz wifi [-g|--gui] [-h|--help] [-m|--manual] [-u|--usage] \
[-v|--version]'

HELP: str = (f"{_('Usage: kz wifi [<options>]')}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f"{_('  -g, --gui      run in graphical mode,')}\n"
             f"{_('                 requires a desktop environment')}\n"
             f"{_('  -h, --help     show this help text')}\n"
             f"{_('  -m, --manual   show manual page')}\n"
             f"{_('  -u, --usage    show a short usage summary')}\n"
             f"{_('  -v, --version  show program version')}")

OPTIONS_SHORT: str = 'ghmuv'
OPTIONS_LONG: list = ['gui', 'help', 'manual', 'usage', 'version']


###############################################################################
# Globals
###############################################################################


###############################################################################
# Functions
###############################################################################

def process(OPTION_GUI: bool = False) -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    command: str = 'nmcli device wifi show-password'
    nmcli_output: str = ''

    OPTION_GUI = process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)

    if not kz_common.become_root_check(PROGRAM_NAME, PROGRAM_DESC, OPTION_GUI):
        term()

    TEXT = f"{_('Use this data to connect to the wireless network.')}"
    if OPTION_GUI:
        try:
            nmcli_output = subprocess.run(command, executable='bash',
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.DEVNULL,
                                          shell=True, check=True,
                                          ).stdout  # type: ignore
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
        else:
            nmcli_output = nmcli_output  # type: ignore
            nmcli_output = nmcli_output.decode("utf-8")  # type: ignore
            TEXT = nmcli_output + TEXT
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
    else:
        try:
            # Shows in Terminal QR code for quick connection to Wi-Fi network.
            subprocess.run(command, executable='bash',
                           stderr=subprocess.DEVNULL, shell=True, check=True)
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        else:
            kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str) -> bool:
    """
    This function handles the script options and arguments.
    """
    args: list = []
    err: str = ''
    opt: str = ''
    opts: list = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    OPTION_GUI: bool = False

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        TEXT = f'{program_name}: {err}\n'
        TEXT += f"{_('Usage:')} {USAGE}"
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)

    for opt, arg in opts:
        if opt in ('-g', '--gui'):
            OPTION_GUI = True
        elif opt in ('-h', '--help'):
            kz_common.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-m', '--manual'):
            kz_common.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-u', '--usage'):
            kz_common.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-v', '--version'):
            kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        else:
            TEXT = f'{PROGRAM_NAME}: getopt: {_('internal error')}'
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)

    if args:
        TEXT = f"{program_name}: {args}: {_('arguments are not allowed')}\n"
        TEXT += f"{_('Usage:')} {USAGE}"
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)

    return OPTION_GUI


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(PROGRAM_NAME)
process()
term()
