#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-wifi'
PROGRAM_DESC: str = _('Show WiFi information')
DISPLAY_NAME: str = PROGRAM_NAME.replace('kz-', 'kz ')

USAGE: str = f'{DISPLAY_NAME} {kz_common.OPTIONS_USAGE} [-g|--gui]'

X_OPTIONS_HELP: str = f"{_('  -g, --gui      run in graphical mode,')}\n"
X_OPTIONS_HELP += f"{_('                 requires a desktop environment')}"

HELP: str = (f"{_('Usage: {} [<options>]').format(DISPLAY_NAME)}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{X_OPTIONS_HELP}\n'
             f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Functions
###############################################################################

def process(OPTION_GUI: bool = False) -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    COMMAND: str = 'nmcli device wifi show-password'
    NMCLI_OUTPUT: str = ''
    TEXT: str = f"{_('Use this data to connect to the wireless network.')}"

    kz_common.process_options(PROGRAM_NAME, PROGRAM_DESC, DISPLAY_NAME, USAGE,
                              HELP)
    OPTION_GUI = process_x_options()

    if not kz_common.become_root_check(DISPLAY_NAME, PROGRAM_DESC, OPTION_GUI):
        term()

    if OPTION_GUI:
        try:
            NMCLI_OUTPUT = subprocess.run(COMMAND, executable='bash',
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.DEVNULL,
                                          shell=True, check=True,
                                          ).stdout  # type: ignore
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
        else:
            NMCLI_OUTPUT = NMCLI_OUTPUT  # type: ignore
            NMCLI_OUTPUT = NMCLI_OUTPUT.decode("utf-8")  # type: ignore
            TEXT = NMCLI_OUTPUT + TEXT
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT, OPTION_GUI)
    else:
        try:
            # Shows in Terminal QR code for quick connection to Wi-Fi network.
            subprocess.run(COMMAND, executable='bash',
                           stderr=subprocess.DEVNULL, shell=True, check=True)
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        else:
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)


def process_x_options() -> bool:
    """
    This function handles the script options and arguments.
    """
    OPTION_GUI: bool = False
    ARGS = None
    PARSER = None

    PARSER = argparse.ArgumentParser(prog=DISPLAY_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-g', '--gui', action='store_true')
    ARGS = PARSER.parse_args()

    if ARGS.gui:
        if subprocess.run('[[ ${DISPLAY-} ]]', executable='bash',
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                          shell=True).returncode == kz_common.ERR:
            TEXT: str = f"{DISPLAY_NAME}: {sys.argv[1]}: "
            TEXT += f"{_('no desktop environment available')}"
            TEXT += f"\n{_('Usage:')} {USAGE}"
            OPTION_GUI = False
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        else:
            OPTION_GUI = True

    return OPTION_GUI


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(DISPLAY_NAME)
process()
term()
