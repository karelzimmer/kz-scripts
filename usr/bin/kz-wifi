#!/usr/bin/env python3
"""
Show WiFi information.

This script shows WiFi information.
"""
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME = 'kz-wifi'
PROGRAM_DESC = _('Show WiFi information')
DISPLAY_NAME = PROGRAM_NAME.replace('kz-', 'kz ')

USAGE = f'{DISPLAY_NAME} {kz_common.OPTIONS_USAGE} [-g|--gui]'

X_OPTIONS_HELP = f"{_('  -g, --gui      run in graphical mode,')}\n"
X_OPTIONS_HELP += f"{_('                 requires a desktop environment')}"

HELP = (f"{_('Usage: {} [OPTION...]').format(DISPLAY_NAME)}\n\n"
        f'{PROGRAM_DESC}.\n\n'
        f"{_('Options:')}\n"
        f'{X_OPTIONS_HELP}\n'
        f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

def process_options():
    """
    This function handles the script options and arguments.
    """
    PARSER = argparse.ArgumentParser(prog=DISPLAY_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-h', '--help', action='store_true')
    PARSER.add_argument('-m', '--manual', action='store_true')
    PARSER.add_argument('-u', '--usage', action='store_true')
    PARSER.add_argument('-v', '--version', action='store_true')
    PARSER.add_argument('-g', '--gui', action='store_true')
    args = PARSER.parse_args()

    if args.help:
        kz_common.process_option_help(PROGRAM_NAME, DISPLAY_NAME, PROGRAM_DESC,
                                      HELP)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.manual:
        kz_common.process_option_manual(PROGRAM_NAME, DISPLAY_NAME,
                                        PROGRAM_DESC)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.usage:
        kz_common.process_option_usage(DISPLAY_NAME, PROGRAM_DESC, USAGE)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.version:
        kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC,
                                         DISPLAY_NAME)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.gui:
        if not kz_common.DESKTOP_ENVIRONMENT:
            kz_common.OPTION_GUI = False
            TEXT = f"{DISPLAY_NAME}: {sys.argv[1]}: "
            TEXT += f"{_('no desktop environment available')}"
            kz_common.term(PROGRAM_NAME, kz_common.OK, DISPLAY_NAME,
                           PROGRAM_DESC, TEXT)
        else:
            kz_common.OPTION_GUI = True


def process_input():
    """
    This function processes the script options and arguments.
    """
    COMMAND = ''
    NMCLI_OUTPUT = ''

    TEXT = f"{_('Record this data to connect to the wireless network.')}\n"
    COMMAND = 'nmcli device wifi show-password'

    if kz_common.OPTION_GUI:
        try:
            NMCLI_OUTPUT = subprocess.run({COMMAND}, shell=True, check=True,
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.DEVNULL,
                                          executable='bash')
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        else:
            NMCLI_OUTPUT = NMCLI_OUTPUT.stdout
            NMCLI_OUTPUT = NMCLI_OUTPUT.decode("utf-8")
            TEXT = TEXT + '\n' + NMCLI_OUTPUT
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
    else:
        kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        try:
            # Shows in Terminal QR code for quick connection to Wi-Fi network.
            subprocess.run({COMMAND}, shell=True, check=True,
                           stderr=subprocess.DEVNULL, executable='bash')
        except Exception:
            TEXT = _('No WiFi device found.')
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)


def term_script():
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init_script(PROGRAM_NAME)

process_options()

process_input()

term_script()
