#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-wifi'
readonly PROGRAM_DESC=$(gettext 'Show WiFi information')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-g | --gui] \$OPTIONS_US\
AGE")

readonly X_OPTIONS_HELP=$(gettext "  -g, --gui      run in graphical mode, req\
uires desktop environment")

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='g'
readonly X_OPTIONS_LONG=',gui'


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true; do
        case $1 in
            -g | --gui)
                if ! $DESKTOP_ENVIRONMENT; then
                    text=\
"$DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local nmcli_output=''

    text=$(gettext "Record this data to connect to the wireless network later.\
")
    if $option_gui; then
        if nmcli_output=$(nmcli device wifi show-password 2> >($LOGCMD)); then
            text="$nmcli_output

$text"
        else
            text=$(gettext 'No WiFi device found.')
        fi
    else
        # Shows QR code for quick connection to Wi-Fi network.
        nmcli device wifi show-password 2> >($LOGCMD) || text=$(gettext "No Wi\
Fi device found.")
    fi
    infomsg "$text"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
