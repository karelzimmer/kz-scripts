#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare KZ_PROGRAM_NAME='kz-wifi'
declare KZ_PROGRAM_DESC
        KZ_PROGRAM_DESC=$(gettext 'Show WiFi information')
declare KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare KZ_USAGE
        KZ_USAGE=$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [-g|--gui] \
\$KZ_OPTIONS_USAGE")

declare KZ_X_OPTIONS_HELP
        KZ_X_OPTIONS_HELP=$(gettext "  -g, --gui      run in graphical mode, \
requires desktop environment")

declare KZ_HELP
        KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_X_OPTIONS_HELP
$KZ_OPTIONS_HELP"

declare KZ_X_OPTIONS_SHORT='g'
declare KZ_X_OPTIONS_LONG=',gui'


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                                               \
                --options       "${KZ_OPTIONS_SHORT}$KZ_X_OPTIONS_SHORT"    \
                --longoptions   "${KZ_OPTIONS_LONG}$KZ_X_OPTIONS_LONG"      \
                --name          "$KZ_DISPLAY_NAME"                          \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -g | --gui )
                if ! $KZ_DESKTOP_ENVIRONMENT; then
                    KZ_TEXT=\
"$KZ_DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_GUI=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local L_NMCLI_OUTPUT=''

    KZ_TEXT=$(gettext "Record this data to connect to the wireless network.")

    if $KZ_OPTION_GUI; then

        if L_NMCLI_OUTPUT=$(nmcli device wifi show-password 2> >($LOGCMD))
        then
            KZ_TEXT="$L_NMCLI_OUTPUT

$KZ_TEXT"
        else
            KZ_TEXT=$(gettext 'No WiFi device found.')
        fi

    else
        # Shows QR code for quick connection to Wi-Fi network.
        if ! nmcli device wifi show-password 2> >($LOGCMD); then
            KZ_TEXT=$(gettext "No WiFi device found.")
        fi
    fi

    infomsg "$KZ_TEXT"
}


# This function controls the termination of the script.
function term_script() {
    exit $KZ_OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
