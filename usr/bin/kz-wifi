#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Show WiFi information.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2022-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat --identifier=kz_common.sh)


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-wifi'
PROGRAM_DESC=$(gettext 'Show WiFi information')
readonly PROGRAM_DESC
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] \$OPTIONS_USAGE")
readonly USAGE
HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP
  -g, --gui      $(gettext 'starts in graphics mode')"
readonly HELP
readonly X_OPTIONS_SHORT='g'
readonly X_OPTIONS_LONG=',gui'


###############################################################################
# Variables
###############################################################################

declare option_gui=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || ( printf '%s\n' "$USAGE_LINE"; exit $ERROR )
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    printf  "$DISPLAY_NAME: $1: %s\n$USAGE_LINE\n" \
                            "$(gettext 'not allowed on a server')"
                    exit $ERROR
                fi
                option_gui=true
                reset_terminal_attributes
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local -i nmcli_rc=''
    local nmcli_output=''
    local text
    text=$(gettext "Record this data to connect to the wireless network \
later.")

    if $option_gui; then
        if nmcli_output=$(nmcli device wifi show-password 2> >($logcmd)); then
            msg_info "$(gettext 'WiFi data:')

$nmcli_output

$text"
        else
            msg_info "$(gettext 'No WiFi device found.')"
        fi
    else
        msg_info "$(gettext 'WiFi data:')
"
        nmcli device wifi show-password 2> >($logcmd) || nmcli_rc=$?
        if [[ $nmcli_rc -eq 0 ]]; then
            msg_info "
$text"
        else
            msg_info "$(gettext 'No WiFi device found.')"
        fi
    fi
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
