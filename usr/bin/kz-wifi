#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Show WiFi information
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import getopt
import gettext
import kz_common as kz
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-wifi'
PROGRAM_DESC: str = _('Show WiFi information')

USAGE: str = _("Usage: kz wifi [-g|--gui] [-h|--help] [-m|--manual] "
               "[-u|--usage]\n[-v|--version]")

HELP: str = (f"{_('Usage: kz wifi [<options>]')}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f"{_('  -g, --gui      run in graphical mode,')}\n"
             f"{_('                 requires a desktop environment')}\n"
             f"{_('  -h, --help     show this help text')}\n"
             f"{_('  -m, --manual   show manual page')}\n"
             f"{_('  -u, --usage    show a short usage summary')}\n"
             f"{_('  -v, --version  show program version')}")

OPTIONS_SHORT: str = 'ghmuv'
OPTIONS_LONG: list[str] = ['gui', 'help', 'manual', 'usage', 'version']


###############################################################################
# Globals
###############################################################################


###############################################################################
# Functions
###############################################################################

def process(OPTION_GUI: bool = False) -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    OPTION_GUI = check_input(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)

    show_secrets(PROGRAM_NAME, PROGRAM_DESC, OPTION_GUI)


def check_input(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                HELP: str) -> bool:
    """
    This function checks the script input.
    """
    args: list[str] = []
    err: str = ''
    opts: list[tuple[str, str]] = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        text = f'{program_name}: {err}\n'
        text += f"{_('Usage:')} {USAGE}"
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    OPTION_GUI = process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP, opts,
                                 args)

    return OPTION_GUI


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str, opts: list[tuple[str, str]],
                    args: list[str]) -> bool:
    """
    This function handles the script options and arguments.
    """
    arg: str = ''
    opt: str = ''
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str
    OPTION_GUI: bool = False

    for opt, arg in opts:
        if opt in ('-g', '--gui'):
            OPTION_GUI = True
        elif opt in ('-h', '--help'):
            kz.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-m', '--manual'):
            kz.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-u', '--usage'):
            kz.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-v', '--version'):
            kz.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        else:
            text = f"{PROGRAM_NAME}: getopt: {_('internal error')}"
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)

    if args:
        text = f"{program_name}: {' '.join(args)}: "
        text += f"{_('arguments are not allowed')}\n"
        text += f"{_('Usage:')} {USAGE}"
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    return OPTION_GUI


def show_secrets(PROGRAM_NAME: str, PROGRAM_DESC: str,
                 OPTION_GUI: bool = False) -> None:
    """
    This function shows the Wi-Fi secrets.
    """
    command: str = 'pkexec /usr/bin/kz-wifi-pkexec'
    nmcli_output: bytes
    text: str = f"{_('Use this data to connect to the wireless network.')}"

    if OPTION_GUI:
        try:
            nmcli_output = subprocess.run(command, executable='bash',
                                          stdout=subprocess.PIPE,
                                          stderr=subprocess.DEVNULL,
                                          shell=True, check=True,
                                          ).stdout
        except Exception:
            text = _('No WiFi device found.')
            kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text, OPTION_GUI)
        else:
            text = str(nmcli_output.decode("utf-8")) + text
            kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text, OPTION_GUI)
    else:
        try:
            # Shows in Terminal QR code for quick connection to Wi-Fi network.
            subprocess.run(command, executable='bash',
                           stderr=subprocess.DEVNULL, shell=True, check=True)
        except Exception:
            text = _('No WiFi device found.')
            kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        else:
            kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz.term(PROGRAM_NAME, 0)


###############################################################################
# Main
###############################################################################

kz.init(PROGRAM_NAME)
process()
term()
