#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Execute IVP
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-ivp'
readonly PROGRAM_DESC=$(gettext 'Execute IVP')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"


###############################################################################
# Variables
###############################################################################

declare error_flag=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        msg_info "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        msg_info "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local dir=''
    local scriptname=''

    # Message catalogue (gettext).
    dir=/usr/share/locale/nl/LC_MESSAGES
    if [[ ! -e $dir/kz.mo ]]; then
        text=$(eval_gettext "Message catalog \$dir/kz.mo not found.")
        msg_error "$text"
        error_flag=true
    fi

    # Check all kz scripts.
    while read -r script; do
        scriptname=$(basename "$script")
        check_script
    done < <(
            find /usr/bin   \
            -name 'kz*'     \
            -type f         \
            -executable     \
            -print          |
            sort
            )
}


# This function checks the operation of the script and associated files.
function check_script {
    local gui='-''-''g''u''i'
    local root=' kz_common.''c''h''e''c''k''_''u''s''e''r''_''r''o''o''t'

    # Script.
    if ! "$scriptname" --version |& $LOGCMD; then
        text=$(eval_gettext "Script \$scriptname returned an error.")
        msg_error "$text"
        error_flag=true
    fi

    # Desktop file.
    if grep --quiet --regexp="$gui" "/usr/bin/$scriptname"; then
        dir=/usr/share/applications
        if [[ ! -e $dir/$scriptname.desktop ]]; then
            text=$(eval_gettext "Desktop configuration file \$dir/\$scriptname\
.desktop not found.")
            msg_error "$text"
            error_flag=true
        fi
    fi

    # PolicyKit action definition file.
    if grep --quiet --regexp="$root" "/usr/bin/$scriptname"; then
        dir=/usr/share/polkit-1/actions
        if [[ ! -e $dir/nl.karelzimmer.$scriptname.policy ]]; then
            text=$(eval_gettext "PolicyKit action definition file \$dir/nl.kar\
elzimmer.\$scriptname.policy not found.")
            msg_error "$text"
            error_flag=true
        fi
    fi

    # Tab-completion script.
    dir=/usr/share/bash-completion/completions
    if [[ ! -e $dir/$scriptname ]]; then
        text=$(eval_gettext "Tab completion script \$dir/\$scriptname not foun\
d.")
        msg_error "$text"
        error_flag=true
    fi

    # Manual page (EN + NL).
    dir=/usr/share/man/man1
    if [[ ! -e $dir/$scriptname.1.gz ]]; then
        text=$(eval_gettext "Manual \$dir/\$scriptname.1.gz not found.")
        msg_error "$text"
        error_flag=true
    fi
    dir=/usr/share/man/nl/man1
    if [[ ! -e $dir/$scriptname.1.gz ]]; then
        text=$(eval_gettext "Manual \$dir/\$scriptname.1.gz not found.")
        msg_error "$text"
        error_flag=true
    fi
}


# This function controls the termination of the script.
function term_script {
    if $error_flag; then
        text=$(gettext 'Fix all the messages above.')
        msg_error "$text"
        exit $ERROR
    else
        text=$GREEN$(gettext 'Finished')$NORMAL
        msg_info "$text"
        exit $OK
    fi
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
