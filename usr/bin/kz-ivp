#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Checking scripts.
#
# Written in 2015 by Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Public Domain Dedication <https://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################

set -o errexit
program_path=$(cd "$(dirname "$(realpath "$0")")" && pwd)
source "$program_path"/kz_common.sh


###############################################################################
# Constants
###############################################################################

declare program_name='kz-ivp'
declare program_desc
program_desc=$(gettext 'Checking scripts')
declare display_name=${program_name/kz-/kz }

declare usage
usage=$(eval_gettext "Usage: \$display_name \$options_usage")
declare help
help="$(eval_gettext "Usage: \$display_name [OPTION...]")

$program_desc.

$(gettext 'Options:')
$options_help"


###############################################################################
# Globale variabelen
###############################################################################

declare -i maxrc=0


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i getopt_rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usage_line"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf  "$display_name: $*: %s\n$usage_line\n" \
                "$(gettext 'arguments are not allowed')"
        exit $err
    fi
}


function process_input {
    local script=''
    local scriptdir=''
    local scriptname=''
    local scripts_repo=$HOME/kz-scripts

    cd "$scripts_repo"
    while read -r script; do
        scriptdir=$(realpath "$(dirname "$script")")
        scriptname=$(basename "$script")
        check_trailing_spaces
        case $scriptname in
            *.policy)
                continue
                ;;
            *.1|*.desktop)
                check_record_length
                ;;
            kz_common.py)
                check_tags
                check_record_length
                check_pycodestyle
                ;;
            kz_common.sh)
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh)
                check_tags
                check_record_types
                check_shellcheck
                ;;
            *)
                check_tags
                check_record_length
                check_code
                run_code
                ;;
        esac
    done < <(
            find .                      \
            -type f                     \
            -not -path './.git*'        \
            -not -path '*/__pycache__*' \
            -not -name kz.mo            \
            -not -name kz.po            \
            -not -name kz.pot           \
            -not -name LICENSE          \
            -not -name README.md        \
            -print                      |
            sort
            )
    cd "$HOME"
}


function check_code {
    local bash_script='#!''/bin/bash'
    local python_script='#!''/usr/bin/python3'
    local tab_completion_script='# ''shellcheck shell=bash'

    if grep --quiet --line-regexp --regexp="$bash_script" "$script"; then
        check_shellcheck
    elif grep --quiet --line-regexp --regexp="$tab_completion_script" "$script"
        then
        check_shellcheck
    elif grep --quiet --line-regexp --regexp="$python_script" "$script"; then
        check_pycodestyle
    else
        err "
In $scriptdir / $scriptname:
$(gettext "    Unknown script. Function check_code cannot check script code.")"
        maxrc=$err
    fi
}


function check_pycodestyle {
    local -i check_rc=0

    pycodestyle "$script" || check_rc=$?
    if [[ $check_rc -ne $ok ]]; then
        maxrc=$err
    fi
}


function check_record_length {
    local -i max_line_length=79
    local -i max_line_length_found=0

    max_line_length_found=$(wc --max-line-length < "$script")
    if  [[ $max_line_length_found -gt $max_line_length ]]; then
        err "
In $scriptdir / $scriptname:
$(eval_gettext "    A line is longer than \$max_line_length \
(\$max_line_length_found).")
"
        maxrc=$err
    fi
}


function check_record_types {
    local wrong_record=''

    # Look at lines that start with #1 to #9.
    # Ok:
    # #1 en #2
    # #1 foo              (with option -a, --app: show and process foo)
    # #1-foo              (woth option -a, --app: do not show, but process foo)
    # #2 Remove/reset command
    # Wrong:
    # The rest :-)
    wrong_record=$(
        grep --regexp='#[1-9]' "$script" --line-number  |
        grep --regexp='#[1-2]$' --invert-match          |
        grep --regexp='#[1-2] ' --invert-match          |
        grep --regexp='#1-'     --invert-match          || true
        )
    if [[ $wrong_record ]]; then
        err "
In $scriptdir / $scriptname:
    $(gettext 'Faulty line(s) found.')
$(
    printf '%s' "$wrong_record" |
                nl --number-width=8 --number-separator='' --body-numbering=n
)
"
        maxrc=$err
    fi
}


function check_shellcheck {
    local -i check_rc=0

    # Shellcheck doesn't work well with absolute filenames.
    cd "$scriptdir"
    shellcheck --external-sources "$scriptname" || check_rc=$?
    if [[ $check_rc -ne $ok ]]; then
        maxrc=$err
    fi
    cd "$scripts_repo"
}


function check_tags {
    local bug='B''U''G'
    local fixme='F''I''X''M''E'
    local todo='T''O''D''O'

    if grep --quiet             \
            --word-regexp       \
            --regexp="$bug"     \
            --regexp="$fixme"   \
            --regexp="$todo"    \
            "$script"; then
        warn "
In $scriptdir / $scriptname:
$(gettext '    Flagged annotation found.')

$(
    grep    --line-number           \
            --word-regexp           \
            --regexp="$bug"         \
            --regexp="$fixme"       \
            --regexp="$todo"        \
            "$script"               |
    nl      --number-width=4        \
            --number-separator=''   \
            --body-numbering=n
)
"
    fi
}


function check_trailing_spaces {
    if grep --quiet --regexp=' ''$' "$script"; then
        err "
In $scriptdir / $scriptname:
$(gettext '    End spaces found.')
$(
    grep    --line-number --regexp=' ''$' "$script" |
    nl      --number-width=4  --number-separator='' --body-numbering=n
)
"
        maxrc=$err
    fi
}


function run_code {
    # Skip tab completion scripts.
    if [[ $script == */usr/bin/* ]]; then
        "$script" --usage |& $logcmd
    fi
}


function term_script {
    exit $maxrc
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
