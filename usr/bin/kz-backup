#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# Make backup.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2007-2024.
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly    PROGRAM_NAME='kz-backup'
readonly    PROGRAM_DESC=$(gettext 'Make backup')
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly    USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-d|--dry-run] [-g|--\
gui] [-t|--target DIRECTORY]
                 \$OPTIONS_USAGE")"
readonly    HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short optio\
ns too.")

$(gettext '  -d, --dry-run  perform a test run without making any changes')
$(gettext '  -g, --gui      starts in graphical mode')
$(gettext '  -t, --target DIRECTORY
                 put backup in DIRECTORY')
$OPTIONS_HELP"

readonly    X_OPTIONS_SHORT='dgt:'
readonly    X_OPTIONS_LONG=',dry-run,gui,target:'


###############################################################################
# Variables
###############################################################################

declare     dry_run_option=''
declare     medium=''
declare     option_dry_run=false
declare     option_target=false
declare     target_argument=''
declare     target_medium=''
declare     target=''


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        msg_info "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -d|--dry-run)
                option_dry_run=true
                dry_run_option='--dry-run'
                shift
                ;;
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    text="$DISPLAY_NAME: $1: \
$(gettext 'not allowed on a server')
$USAGE_LINE"
                    msg_info "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            -t|--target)
                if $option_target; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    msg_info "$text"
                    exit $ERROR
                fi
                option_target=true
                target_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        msg_info "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local   -i  backup_rc=0
    local       rsync_messages=''
    local       target=''

    if $option_target; then
        if ! [[ -d $target_argument ]]; then
            text="$DISPLAY_NAME: $target_argument: \
$(gettext 'directory does not exist')
$USAGE_LINE"
            msg_info "$text"
            exit $ERROR
        fi
        target=$target_argument/backup-$HOSTNAME-$USER
        target_medium=$target_argument
    else
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ -z $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            msg_warning "$text"
            if ! $option_gui; then
                wait_for_enter
            fi
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ -z $medium ]]; then
                msg_error "$text"
                exit $ERROR
            fi
        fi
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            msg_warning "$text"
            if ! $option_gui; then
                wait_for_enter
            fi
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                msg_error "$text"
                exit $ERROR
            fi
        fi
        target=$medium/backup-$HOSTNAME-$USER
        target_medium=$medium
    fi

    check_on_ac_power

    if ! $option_dry_run; then
        if [[ $EDITION = 'desktop' ]]; then
            title=$(gettext 'Secure settings')
            text=$title
            if $option_gui; then
                sleep 2
                backup_settings                 |
                zenity  --progress              \
                        --pulsate               \
                        --auto-close            \
                        --no-cancel             \
                        --width     600         \
                        --height    50          \
                        --title     "$title"    \
                        --text      "$text"     2> >($LOGCMD)
            else
                text+='...'
                msg_info "$text"
                backup_settings
            fi
        fi
    fi

    create_backup
    if [[ $backup_rc -ne $OK ]]; then
        # shellcheck disable=SC2034
        rsync_messages=$(cat "$tmp_file_2")
        text="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable,
or were any files added or removed while creating the backup,
or is there not enough space on \$target.

Check the rsync messages:
\$rsync_messages

Try creating the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app Terminal, type 'kz backup'.")"
        msg_error "$text"
        exit $ERROR
    fi
}


# This function backs up user settings.
function backup_settings {
    backup_settings_desktop_background
    backup_settings_favorite_apps
    backup_settings_installed_apps
    backup_settings_user_photo
    delete_settings_previously_backuped
    # In case the desktop background has been removed.
    restore_settings_desktop_background
}


# This function copies the desktop background.
function backup_settings_desktop_background {
    local   input_file=''
    local   output_file=$SETTINGS/background

    msg_log 'Copy the desktop background...'
    input_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )
    cp "$input_file" "$output_file" |& $LOGCMD || true
}


# This function saves the favorite apps.
function backup_settings_favorite_apps {
    local   output_file=$SETTINGS/favorites

    msg_log 'Save the favorite apps...'
    gsettings get org.gnome.shell favorite-apps > "$output_file" |&
        $LOGCMD || true
}


# This function creates a list of installed apps.
function backup_settings_installed_apps {
    local   output_file=$SETTINGS/apps
    local   header1=$(gettext '==== START list of installed packages ====')
    local   footer1=$(gettext '==== END list of installed packages ====')
    local   header2=$(gettext '==== START list of installed snaps ====')
    local   footer2=$(gettext '==== END list of installed snaps ====')
    local   header3=$(gettext '==== START list of added repositories ====')
    local   footer3=$(gettext '==== END list of added repositories ====')
    local   search=/etc/apt/sources.list

    msg_log 'Create a list of installed apps...(ignore WARNING)'

    printf '%s\n' "$header1" > "$output_file"
    apt list --manual-installed 2> >($LOGCMD) >> "$output_file" || true
    printf '%s\n' "$footer1" >> "$output_file"

    printf '\n%s\n' "$header2" >> "$output_file"
    if ! snap list 2> >($LOGCMD) >> "$output_file"; then
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$output_file"
    fi
    printf '%s\n' "$footer2" >> "$output_file"

    printf '\n%s\n' "$header3" >> "$output_file"
    cd  $search.d
    grep    --recursive             \
            --no-filename           \
            --regexp='^deb '        \
            --recursive             \
            /etc/apt/sources.list   \
            /etc/apt/sources.list.d |
    grep    --invert-match          \
            --regexp='ubuntu.com'   |
    sort    --unique                >> "$output_file" || true
    printf '%s\n' "$footer3" >> "$output_file"
}


# This function copies the user photo.
function backup_settings_user_photo {
    local   input_file=/var/lib/AccountsService/icons/"$USER"
    local   output_file=$SETTINGS/userphoto

    msg_log 'Copy the user photo...'
    cp "$input_file" "$output_file" |& $LOGCMD || true
}


# This function deletes previously backuped user settings.
function delete_settings_previously_backuped {
    msg_log 'Delete previously backuped user settings...'
    rm  --force                             \
        "$HOME"/.kz/Apps                    \
        "$HOME"/.kz/Background              \
        "$HOME"/.kz/Favorites               \
        "$HOME"/.kz/Userphoto               \
        "$HOME"/Afbeeldingen/Gebruikersfoto \
        "$HOME"/Documenten/Apps             \
        "$HOME"/Documenten/Favorieten       \
        "$HOME"/Documents/Apps              \
        "$HOME"/Documents/Favorites         \
        "$HOME"/Pictures/Background         \
        "$HOME"/Pictures/Userphoto
}


# This function restores the desktop background.
function restore_settings_desktop_background {
    local   input_file=$SETTINGS/background

    msg_log 'Restore the desktop background...'
    if [[ -f $input_file ]]; then
        gsettings   set                                         \
                    org.gnome.desktop.background picture-uri    \
                    "file://$input_file"
    fi
}


# This function creates the backup.
function create_backup {
    local   source=$HOME

    tmp_file_1=$(mktemp -t "$PROGRAM_NAME-exclude-XXXXXXXXXX")
    tmp_file_2=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")

    # Déjà Dup: Some locations are ignored by default.
    cat << EOF > "$tmp_file_1"
.adobe/Flash_Player/AssetCache
.cache
.ccache
.gvfs
.Private
.recent-applications.xbel
.recently-used.xbel
.steam/root
.thumbnails
.var/app/*/cache
.xsession-errors
snap/*/*/.cache
*CACHEDIR.TAG*
EOF

    # Skip git-controlled directories.
    cat << EOF >> "$tmp_file_1"
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    title=$(gettext 'Make backup')
    text=$(gettext 'Preparing backup (this may take a while)')
    if $option_gui; then
        msg_log "$title"...
        rsync   --archive                       \
                --verbose                       \
                $dry_run_option                 \
                --delete                        \
                --exclude-from="$tmp_file_1"    \
                --delete-excluded               \
                "$source"/                      \
                "$target"/                      \
                2> "$tmp_file_2"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$title"            \
                --text      "$text"             2> >($LOGCMD) || backup_rc=$?
    else
        text+='...'
        msg_info "$text"
        rsync   --archive                       \
                --verbose                       \
                --human-readable                \
                $dry_run_option                 \
                --delete                        \
                --exclude-from="$tmp_file_1"    \
                --delete-excluded               \
                "$source"/                      \
                "$target"/                      2> "$tmp_file_2" ||
                                                backup_rc=$?
    fi

    text=$(gettext "Writing data from memory (this may take a while)")
    if $option_gui; then
        msg_log "$text"...
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     &> >($LOGCMD)
    else
        text+='...'
        msg_info "$text"
        sync |& $LOGCMD
    fi
}


# This function controls the termination of the script.
function term_script {
    if $option_dry_run; then
        text=$(gettext 'The backup has NOT been created (DRY RUN).')
        msg_warning "$text"
        exit $ERROR
    fi

    if [[ $target_medium == /media/* ]]; then
        term_script_unmount
    else
        text=$(gettext 'The backup has been made.')
        msg_info "$text"
    fi
    exit $OK
}


# This function tries to unmount the USB device.
function term_script_unmount {
    local       dev=''
    local   -i  rc=0

    text=$(gettext 'Disconnect the USB media')
    dev='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$target_medium"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )
    if $option_gui; then
        msg_log "$text"...
        umount "$target_medium"                     |& $LOGCMD || rc+=$?;   \
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?;   \
        udisksctl power-off --block-device "$dev"   |& $LOGCMD              |
        zenity  --progress                                                  \
                --pulsate                                                   \
                --auto-close                                                \
                --no-cancel                                                 \
                --width     600                                             \
                --height    50                                              \
                --title     "$title"                                        \
                --text      "$text"                                         \
                2> >($LOGCMD) || rc+=$?
    else
        text+='...'
        msg_info "$text"
        umount "$target_medium"                     |& $LOGCMD || rc+=$?
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?
        udisksctl power-off --block-device "$dev"   |& $LOGCMD || rc+=$?
    fi
    if [[ $rc -eq $OK ]]; then
        text="$(gettext 'The backup has been made.')

$(gettext 'The USB medium can be removed.')"
        msg_info "$text"
    else
        text="$(gettext 'The backup has been made.')

$(gettext 'Disconnect the USB medium yourself (safely!).')"
        msg_warning "$text"
    fi
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
