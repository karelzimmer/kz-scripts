#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Make backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare PROGRAM_NAME='kz-backup'
declare PROGRAM_DESC
        PROGRAM_DESC=$(gettext 'Make backup')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE
        USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] \
[-t|--target DIRECTORY]
                 \$OPTIONS_USAGE")"

declare X_OPTIONS_HELP
        X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext "  -g, --gui      run in graphical mode, requires desktop \
environment")
$(gettext '  -t, --target DIRECTORY
                 put backup in DIRECTORY')"

declare HELP
        HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

declare X_OPTIONS_SHORT='gt:'
declare X_OPTIONS_LONG=',gui,target:'

declare MEDIUM=''
declare OPTION_TARGET=false
declare SOURCE=$HOME
declare TARGET_ARGUMENT=''
declare TARGET_MEDIUM=''
declare TARGET=''
declare USERS=''


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -g | --gui )
                if ! $DESKTOP_ENVIRONMENT; then
                    TEXT=\
"$DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_GUI=true
                shift
                ;;
            -t | --target )
                if $OPTION_TARGET; then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_TARGET=true
                TARGET_ARGUMENT=$2
                shift 2
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    check_target
    check_on_ac_power
    backup_settings
    create_backup
}


# This function checks if the target is available.
function check_target() {
    if $OPTION_TARGET; then

        if [[ ! -d $TARGET_ARGUMENT ]]; then
            TEXT="$DISPLAY_NAME: $TARGET_ARGUMENT: \
$(gettext 'directory does not exist')
$USAGE"
            infomsg "$TEXT"
            exit $ERROR
        fi

        TARGET=$TARGET_ARGUMENT/$USER@$HOSTNAME
        TARGET_MEDIUM=$TARGET_ARGUMENT
    else

        MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)

        if [[ -z $MEDIUM ]]; then
            TEXT=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter
            MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)

            if [[ -z $MEDIUM ]]; then
                errormsg "$TEXT"
                exit $ERROR
            fi
        fi

        MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)

        if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
            TEXT="$(eval_gettext "Connect only one USB medium.

Now connected:
\$MEDIUM

Disconnect media via Files.")"
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter

            MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)

            if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
                errormsg "$TEXT"
                exit $ERROR
            fi
        fi

        TARGET=$MEDIUM/$PROGRAM_NAME/$USER@$HOSTNAME

        [[ -d $MEDIUM/$PROGRAM_NAME ]] ||
            mkdir --mode=a=rwx --verbose "$MEDIUM/$PROGRAM_NAME" |& $LOGCMD
        TARGET_MEDIUM=$MEDIUM
    fi

    if [[ -e $TARGET_MEDIUM/backup-$HOSTNAME-$USER ]]; then
        TEXT="$(gettext "Backup found with old name: 'backup-HOSTNAME-USER'. \
Please rename to 'USER@HOST'.")"
        errormsg "$TEXT"
        exit $ERROR
    fi
}


# This function backups the user settings.
function backup_settings() {
    local SETTINGS_DIR=$HOME/$PROGRAM_NAME

    $OPTION_GUI || infomsg "$(gettext 'Secure settings...')"

    [[ -d $SETTINGS_DIR ]] || mkdir --verbose "$SETTINGS_DIR" |& $LOGCMD

    backup_setting_readme
    backup_setting_apps
    backup_setting_users
    backup_setting_wifi

    if $DESKTOP_ENVIRONMENT; then
        backup_setting_avatar
        backup_setting_desktop
        backup_setting_favs
    fi
}


# This function creates a README.
function backup_setting_readme() {
    local OUTPUT_FILE=$SETTINGS_DIR/README

    logmsg 'Create settings README...'

    TEXT="$(gettext "This folder contains files created by kz-backup.
These files are used by kz-restore and others.

Further reading:")
    man:kz-backup(1)
    man:kz-restore(1)"
    printf '%s\n' "$TEXT" > "$OUTPUT_FILE"

    touch "$OUTPUT_FILE"
}


# This function creates a list of installed apps.
function backup_setting_apps() {
    local OUTPUT_FILE=$SETTINGS_DIR/apps.txt
    local HEADER1
    local FOOTER1
    local HEADER2
    local FOOTER2

    HEADER1=$(gettext "==== START list of manual installed packages \
====")
    FOOTER1=$(gettext '==== END list of manual installed packages ====')
    HEADER2=$(gettext '==== START list of installed snaps ====')
    FOOTER2=$(gettext '==== END list of installed snaps ====')

    logmsg 'Create a list of installed apps...(ignore WARNING).'

    printf '%s\n' "$HEADER1" > "$OUTPUT_FILE"
    apt list --manual-installed 2> >($LOGCMD) >> "$OUTPUT_FILE" || true
    printf '%s\n' "$FOOTER1" >> "$OUTPUT_FILE"

    printf '\n%s\n' "$HEADER2" >> "$OUTPUT_FILE"
    snap list 2> >($LOGCMD) >> "$OUTPUT_FILE" ||
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$OUTPUT_FILE"
    printf '%s\n' "$FOOTER2" >> "$OUTPUT_FILE"
}


# This function saves instructions for adding additional users.
function backup_setting_users() {
    local OUTPUT_FILE=$SETTINGS_DIR/users.txt
    local USER_NAME=''

    USERS=$(
            gettext '_username_|userid|_user_'
            printf '\n'
            grep --regexp='/home' /etc/passwd   |
            cut --delimiter=':' --fields=1,3,5  |
            tr ':' '|'
            )
    USERS+=$(
            printf '\n'
            while read -r USER_NAME; do
                printf '\n'
                id "$USER_NAME"
            done < <(
                grep --regexp='/home' /etc/passwd |
                cut --delimiter=':' --fields=1
                )
            )

    logmsg 'Adding additional users instructions...'

    if $DESKTOP_ENVIRONMENT; then
        TEXT="$(gettext 'Additional _user_s can be added manually:')
$(gettext "1. Press the Super key[1], type 'user' and click behind Settings \
on Users.
2. Click on Unlock and then Add User.
3. Enter Name _user_ and Username _username_.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")

$USERS"
    else
        TEXT="$(gettext 'Additional _user_s can be added manually:')
$(gettext "# Standard:
sudo useradd --create-home --comment '_user_' _username_
# Administrator:
sudo usermod --append --groups adm,sudo _username_
# User sets password on first login:
sudo passwd --delete --expire _username_")

$USERS"
    fi

    printf '%b\n' "$TEXT" > "$OUTPUT_FILE"
}


# This function saves the WiFi information.
function backup_setting_wifi() {
    local OUTPUT_FILE=$SETTINGS_DIR/wifi.txt

    logmsg 'Save the WiFi information...'

    # Call kz wifi.
    logmsg 'Calling kz wifi...'
    kz wifi > "$OUTPUT_FILE"
    logmsg 'Called kz wifi.'
}


# This function copies the user avatar and saves instructions for restoring, if
# possible.
function backup_setting_avatar() {
    local INPUT_FILE=/var/lib/AccountsService/icons/$USER
    local OUTPUT_FILE_1=$SETTINGS_DIR/avatar
    local OUTPUT_FILE_2=$SETTINGS_DIR/avatar.txt

    if [[ -e $INPUT_FILE ]]; then
        logmsg 'Copy the user avatar...'
        cp --preserve --verbose "$INPUT_FILE" "$OUTPUT_FILE_1" |& $LOGCMD
        touch "$OUTPUT_FILE_1"
    fi
    logmsg 'Save restore the avatar instructions...'
    TEXT="$(gettext "To restore the users avatar:
1. Press the Super key[1], type 'user' and click behind Settings on Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / kz, or another picture file.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")"

    printf '%s\n' "$TEXT" > "$OUTPUT_FILE_2"

    touch "$OUTPUT_FILE_2"
}


# This function copies the desktop background, if available, and saves
# instructions for setting desktop background.
function backup_setting_desktop() {
    local INPUT_FILE
    local OUTPUT_FILE_1=$SETTINGS_DIR/desktop
    local OUTPUT_FILE_2=$SETTINGS_DIR/desktop.txt

    INPUT_FILE=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ -e $INPUT_FILE && $INPUT_FILE != *.xml ]]; then
        logmsg 'Copy the desktop background...'
        cp --preserve --verbose "$INPUT_FILE" "$OUTPUT_FILE_1" |& $LOGCMD ||
            true
        touch "$OUTPUT_FILE_1"
    fi

    logmsg 'Save set the desktop background instructions...'

    TEXT="$(gettext "To set the desktop background:
1. Press the Super key[1], type 'file' and click on Files.
2. Open the folder containing the desired image.
3. Right-click on the desired image and choose Set as Background.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")"

    printf '%s\n' "$TEXT" > "$OUTPUT_FILE_2"

    touch "$OUTPUT_FILE_2"
}


# This function saves the favorite apps in the dash.
function backup_setting_favs() {
    local OUTPUT_FILE=$SETTINGS_DIR/favs.txt

    logmsg 'Save the favorite apps...'
    gsettings get                           \
              org.gnome.shell favorite-apps > "$OUTPUT_FILE" |& $LOGCMD || true
}


# This function creates the backup.
function create_backup() {
    local       ERROR_FILE=''
    local       EXCLUDE_FILE=$HOME/$PROGRAM_NAME
    local       RSYNC_MESSAGES=''
    local   -i  BACKUP_RC=0

    ERROR_FILE=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")
    EXCLUDE_FILE=$(mktemp -t "$PROGRAM_NAME-exclude-XXXXXXXXXX")

    cat << EOF > "$EXCLUDE_FILE"
# ==== START exclude https://github.com/rubo77/rsync-homedir-excludes ====
# Contains mounted file systems
.gvfs
.local/share/gvfs-metadata
# contains the actual encrypted home directory
/.Private

# Session-specific
/.dbus
.cache
.var/app/*/cache
.var/app/*/.cache
/.Trash
.Trash-1*
.local/share/Trash
/Trash

# Cached info about audio CDs
.cddb

# Cached packages lists
.aptitude

# Node Package Manager cache
.npm

# Node Version Manager
.nvm

# Contains errors from the current graphical session
.xsession-errors
.xsession-errors.old
.wayland-errors

# Recently used files
.local/share/RecentDocuments
.recently-used
.recently-used.xbel
recently-used.xbel
.thumbnails
.thumb
Thumbs.db
.DS_Store
.localised
.CFUserTextEncoding
.zcompdump*
.wget-hsts

# Session-specific
.Xauthority
.ICEauthority
.gksu.lock
.pulse
.pulse-cookie
.esd_auth

# GNOME tracker data files
.local/share/tracker

# Firefox-specific (see also Profile folder)
.mozilla/firefox/*/Cache
# in case Fx crashes dumps will be stored in this
.mozilla/firefox/*/minidumps
# session-specific
.mozilla/firefox/*/.parentlock
# phishing database, recreated
.mozilla/firefox/*/urlclassifier3.sqlite
# blacklisted extensions
.mozilla/firefox/*/blocklist.xml
# extension database, recreated on startup
.mozilla/firefox/*/extensions.sqlite
.mozilla/firefox/*/extensions.sqlite-journal
.mozilla/firefox/*/extensions.rdf
.mozilla/firefox/*/extensions.ini
.mozilla/firefox/*/extensions.cache
# cached UI data, recreated
.mozilla/firefox/*/XUL.mfasl
.mozilla/firefox/*/XPC.mfasl
.mozilla/firefox/*/xpti.dat
.mozilla/firefox/*/compreg.dat
# cached plugin data, recreated
.mozilla/firefox/*/pluginreg.dat

# Thunderbird Cache in your profile folder
.thunderbird/*/Cache

# Opera-specific
.opera/temporary_downloads
.opera/cache
.opera/thumbnails
.opera/opcache
.opera/icons
.opera/application_cache
.opera/widgets/*/cache
.opera/lock

# Keychain dir (manage SSH and GPG keys, front-end to ssh-agent and ssh-add)
/.keychain

# GnuPG
.gnupg/rnd
.gnupg/random_seed
.gnupg/.#*
.gnupg/*.lock
.gnupg/gpg-agent-info-*

# Google Earth
.googleearth/Temp
.googleearth/Cache

# Google Chrome
.config/google-chrome/ShaderCache
.config/google-chrome/*/Local Storage
.config/google-chrome/*/Session Storage
.config/google-chrome/*/Application Cache
.config/google-chrome/*/History Index *
.config/google-chrome/*/Service Worker/CacheStorage
.config/google-chrome/*/WebStorage/*/CacheStorage

# Chromium
.config/chromium/*/Local Storage
.config/chromium/*/Session Storage
.config/chromium/*/Service Worker/CacheStorage
.config/chromium/*/Application Cache
.config/chromium/*/History Index *
/snap/chromium/common/.cache
/snap/chromium/*/.config/chromium/*/Service Worker/CacheStorage
/snap/chromium/*/.local/share/

# Brave
.config/BraveSoftware/Brave-Browser/*/Feature Engagement Tracker/
.config/BraveSoftware/Brave-Browser/*/Local Storage/
.config/BraveSoftware/Brave-Browser/*/Service Worker/CacheStorage/
.config/BraveSoftware/Brave-Browser/*/Session Storage/
.config/BraveSoftware/Brave-Browser/Safe Browsing/
.config/BraveSoftware/Brave-Browser/ShaderCache/

# Indexer
.local/share/baloo
.local/share/zeitgeist
.local/share/akonadi

# Cached applets
.guayadeque/cache.db
.java/deployment/cache
.icedteaplugin
.icedtea
.gnome2/epiphany/favicon_cache

# LibreOffice cache files
.config/libreoffice/3/cache
.config/libreoffice/4/cache

# Snap caches
.config/*/Cache

# Atom
.config/Atom/*Cache
.config/Atom/IndexedDB
.atom/compile-cache/

# Vim
.vim/bundle/*
.viminfo

# VS Code
.vscode-oss/extensions/*
.vscode/extensions/*
.config/Code - OSS/logs/
.config/Code/logs/
.config/Code/CachedData/*

# VS Codium
.config/VSCodium/CachedExtensionVSIXs

# VirtualBox
.config/VirtualBox/VBoxSVC.log*
.config/VirtualBox/VBoxGuestAdditions_*

# Rust artefacts
.cargo
.rustup

# ccache, remove cache but keep config
.ccache/?
.ccache/tmp

# Nvidia OpenGL Shader Cache
.nv/GLCache

# Citrix ICA Client
.ICAClient/logs
.ICAClient/.tmp
.ICAClient/cache/zlcache

# Electron Apps
.config/**/blob_storage
.config/**/Application Cache
.config/**/Cache
.config/**/CachedData
.config/**/Code Cache
.config/**/GPUCache
.config/**/Service Worker/CacheStorage
.var/app/**/blob_storage
.var/app/**/Application Cache
.var/app/**/Cache
.var/app/**/CachedData
.var/app/**/Code Cache
.var/app/**/GPUCache
.var/app/**/Service Worker/CacheStorage
# ==== END exclude https://github.com/rubo77/rsync-homedir-excludes ====

# ==== START exclude Git-managed directories ====
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sed     's|^|/|'        |
    sort
    )
# ==== END exclude Git-managed directories ====
EOF

    TITLE=$(gettext 'Make backup')
    TEXT=$(gettext 'Preparing backup (this may take a while)')

    if $OPTION_GUI; then
        logmsg "$TITLE..."
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --delete                        \
                --exclude-from="$EXCLUDE_FILE"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$TARGET"/                      \
                2> "$ERROR_FILE"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$TITLE"            \
                --text      "$TEXT"             2> >($LOGCMD) || BACKUP_RC=$?
    else
        TEXT+='...'
        infomsg "$TEXT"
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$EXCLUDE_FILE"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$TARGET"/                      2> "$ERROR_FILE" ||
                                                    BACKUP_RC=$?
    fi
    rm --verbose "$EXCLUDE_FILE" |& $LOGCMD

    TEXT=$(gettext "Writing data from memory (this may take a while)")

    if $OPTION_GUI; then
        logmsg "$TEXT..."
        sync;                           \
        sleep 1                         |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$TITLE"    \
                --text      "$TEXT"     &> >($LOGCMD)
    else
        TEXT+='...'
        infomsg "$TEXT"
        sync |& $LOGCMD
    fi

    if [[ $BACKUP_RC -ne $OK ]]; then
        # shellcheck disable=SC2034
        RSYNC_MESSAGES=$(cat "$ERROR_FILE")
        TEXT="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while creating the backup, or
is there not enough space on \$TARGET.

Check the rsync messages (also in \$ERROR_FILE):
\$RSYNC_MESSAGES

Try creating the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Make backup', or
use app 'Terminal', type 'kz backup'.")"
        errormsg "$TEXT"
        exit $ERROR
    fi

    rm --verbose "$ERROR_FILE" |& $LOGCMD
}


# This function controls the termination of the script.
function term_script() {
    local   -i  NUM_USERS

    NUM_USERS=$(find /home/* -prune -print | wc --lines)

    if [[ $NUM_USERS -eq 1 ]]; then
        TEXT=$(gettext "The backup has been made.")
    else
        TEXT="$(eval_gettext "The backup has been made for \$USER (there are \
\$NUM_USERS users).")

$USERS"
    fi

    if [[ $TARGET_MEDIUM == /media/* ]]; then
        term_script_usb || RC=$?

        if [[ $RC -eq $OK ]]; then
            TEXT+="

$(gettext 'The USB medium can be removed.')"
        else
            TEXT+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi

    fi
    infomsg "$TEXT"

    exit $OK
}


# This function tries to unmount the USB device.
function term_script_usb() {
    local DEV=''
    local TEXT=''

    TEXT=$(gettext 'Disconnect the USB media')
    DEV='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$TARGET_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )

    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        logmsg "$TEXT..."
        term_script_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     \
                    2> >($LOGCMD)
            )
    else
        infomsg "$TEXT..."
        term_script_unmount
    fi

    return $RC
}


# This function unmounts the USB device.
function term_script_unmount() {
    umount "$TARGET_MEDIUM"                     |& $LOGCMD || RC+=$?
    udisksctl lock --block-device "$DEV"        |& $LOGCMD || RC+=$?
    udisksctl power-off --block-device "$DEV"   |& $LOGCMD || RC+=$?
    sleep 1
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
