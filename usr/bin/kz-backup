#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Make backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-backup'
readonly PROGRAM_DESC=$(gettext 'Make backup')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] [-t|--target \
DIRECTORY]
                 \$OPTIONS_USAGE")"

readonly X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext "  -g, --gui      run in graphical mode, requires desktop environmen\
t")
$(gettext '  -t, --target DIRECTORY
                 put backup in DIRECTORY')"

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='gt:'
readonly X_OPTIONS_LONG=',gui,target:'

readonly SOURCE=$HOME


###############################################################################
# Variables
###############################################################################

declare medium=''
declare option_target=false
declare target_argument=''
declare target_medium=''
declare target=''
declare users=''


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true; do
        case $1 in
            -g | --gui)
                if ! $DESKTOP_ENVIRONMENT; then
                    text=\
"$DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            -t | --target)
                if $option_target; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_target=true
                target_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    check_target
    check_on_ac_power
    backup_settings
    create_backup
}


# This function checks if the target is available.
function check_target {
    if $option_target; then
        if [[ ! -d $target_argument ]]; then
            text="$DISPLAY_NAME: $target_argument: \
$(gettext 'directory does not exist')
$USAGE_LINE"
            infomsg "$text"
            exit $ERROR
        fi
        target=$target_argument/$USER@$HOSTNAME
        target_medium=$target_argument
    else
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ -z $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ -z $medium ]]; then
                errormsg "$text"
                exit $ERROR
            fi
        fi
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            infomsg "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                errormsg "$text"
                exit $ERROR
            fi
        fi
        target=$medium/$USER@$HOSTNAME
        target_medium=$medium
    fi
    if [[ -e $target_medium/backup-$HOSTNAME-$USER ]]; then
        text="$(gettext "Backup found with old name: 'backup-HOSTNAME-USER'. P\
lease rename to 'USER@HOST'.")"
        errormsg "$text"
        exit $ERROR
    fi
}


# This function backups the user settings.
function backup_settings {
    mkdir --parents --verbose "$HOME"/kz |& $LOGCMD
    backup_setting_apps
    backup_setting_users
    if $DESKTOP_ENVIRONMENT; then
        backup_setting_avatar
        backup_setting_desktop
        backup_setting_favs
    fi
}


# This function creates a list of installed apps.
function backup_setting_apps {
    local output_file="$HOME"/kz/apps.txt
    local header1=$(gettext "==== START list of manual installed packages ====\
")
    local footer1=$(gettext '==== END list of manual installed packages ====')
    local header2=$(gettext '==== START list of installed snaps ====')
    local footer2=$(gettext '==== END list of installed snaps ====')

    logmsg 'Create a list of installed apps...(ignore WARNING).'

    printf '%s\n' "$header1" > "$output_file"
    apt list --manual-installed 2> >($LOGCMD) >> "$output_file" || true
    printf '%s\n' "$footer1" >> "$output_file"

    printf '\n%s\n' "$header2" >> "$output_file"
    snap list 2> >($LOGCMD) >> "$output_file" ||
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$output_file"
    printf '%s\n' "$footer2" >> "$output_file"
}


# This function saves instructions for adding additional users.
function backup_setting_users {
    local output_file="$HOME"/kz/users.txt

    users=$(
            gettext '_username_|UID|_user_'
            printf '\n'
            grep --regexp='/home' /etc/passwd   |
            cut --delimiter=: --fields=1,3,5    |
            tr ':' '|'
            )
    users+=$(
            printf '\n'
            while read -r uid; do
                printf '\n'
                id "$uid"
            done < <(
                grep --regexp='/home' /etc/passwd |
                cut --delimiter=: --fields=1
                )
            )

    logmsg 'Adding additional users instructions...'
    if $DESKTOP_ENVIRONMENT; then
        text="$(gettext 'Additional _user_s can be added manually:')
$(gettext "1. Press the Super key[1], type 'user' and click behind Settings on\
 Users.
2. Click on Unlock and then Add User.
3. Enter Name _user_ and Username _username_.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key (C\
hromebook).")

$users"
    else
        text="$(gettext 'Additional _user_s can be added manually:')
$(gettext "# Standard:
sudo useradd --create-home --comment '_user_' _username_
# Administrator:
sudo usermod --append --groups adm,sudo _username_
# User sets password on first login:
sudo passwd --delete --expire _username_")

$users"
    fi
    printf '%b\n' "$text" > "$output_file"
}


# This function copies the user avatar and saves instructions for restoring, if
# possible.
function backup_setting_avatar {
    local input_file=/var/lib/AccountsService/icons/"$USER"
    local output_file_1="$HOME"/kz/avatar
    local output_file_2="$HOME"/kz/avatar.txt

    if [[ -e $input_file ]]; then
        logmsg 'Copy the user avatar...'
        cp --preserve --verbose "$input_file" "$output_file_1" |& $LOGCMD
        touch "$output_file_1"
    fi
    logmsg 'Save restore the avatar instructions...'
    text="$(gettext "To restore the users avatar:
1. Press the Super key[1], type 'user' and click behind Settings on Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / kz, or another picture file.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key (C\
hromebook).")"
    printf '%s\n' "$text" > "$output_file_2"
    touch "$output_file_2"
}


# This function copies the desktop background, if available, and saves
# instructions for setting desktop background.
function backup_setting_desktop {
    local input_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )
    local output_file_1="$HOME"/kz/desktop
    local output_file_2="$HOME"/kz/desktop.txt

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ -e $input_file && $input_file != *.xml ]]; then
        logmsg 'Copy the desktop background...'
        cp --preserve --verbose "$input_file" "$output_file_1" |& $LOGCMD ||
            true
        touch "$output_file_1"
    fi
    logmsg 'Save set the desktop background instructions...'
    text="$(gettext "To set the desktop background:
1. Press the Super key[1], type 'file' and click on Files.
2. Open the folder containing the desired image.
3. Right-click on the desired image and choose Set as Background.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key (C\
hromebook).")"
    printf '%s\n' "$text" > "$output_file_2"
    touch "$output_file_2"
}


# This function saves the favorite apps in the dash.
function backup_setting_favs {
    local output_file="$HOME"/kz/favs.txt

    logmsg 'Save the favorite apps...'
    gsettings get                           \
              org.gnome.shell favorite-apps > "$output_file" |& $LOGCMD || true
}


# This function creates the backup.
function create_backup {
    local       error_file=''
    local       exclude_file=''
    local       rsync_messages=''
    local   -i  backup_rc=0

    error_file=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")
    exclude_file=$(mktemp -t "$PROGRAM_NAME-exclude-XXXXXXXXXX")
    # Déjà Dup: Some locations are ignored by default.
    cat << EOF > "$exclude_file"
.cache
.ccache
.gvfs
.Private
.steam/root
.var/app/*/cache
.xsession-errors
snap/*/*/.cache
*CACHEDIR.TAG*
EOF

    # Skip git-controlled directories.
    cat << EOF >> "$exclude_file"
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    title=$(gettext 'Make backup')
    text=$(gettext 'Preparing backup (this may take a while)')
    if $option_gui; then
        logmsg "$title..."
        rsync   --archive                       \
                --verbose                       \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$target"/                      \
                2> "$error_file"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$title"            \
                --text      "$text"             2> >($LOGCMD) || backup_rc=$?
    else
        text+='...'
        infomsg "$text"
        rsync   --archive                       \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$target"/                     2> "$error_file" || backup_rc=$?
    fi
    rm --verbose "$exclude_file" |& $LOGCMD

    text=$(gettext "Writing data from memory (this may take a while)")
    if $option_gui; then
        logmsg "$text..."
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     &> >($LOGCMD)
    else
        text+='...'
        infomsg "$text"
        sync |& $LOGCMD
    fi
    if [[ $backup_rc -ne $OK ]]; then
        # shellcheck disable=SC2034
        rsync_messages=$(cat "$error_file")
        text="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while creating the backup, or
is there not enough space on \$target.

Check the rsync messages (also in \$error_file):
\$rsync_messages

Try creating the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Make backup', or
use app 'Terminal', type 'kz backup'.")"
        errormsg "$text"
        exit $ERROR
    fi
    rm --verbose "$error_file" |& $LOGCMD
}


# This function controls the termination of the script.
function term_script {
    local   -i  unmount_rc=0
    local       num_users=$(find /home/* -prune -print | wc --lines)

    if [[ $num_users -eq 1 ]]; then
        text=$(gettext "The backup has been made.")
    else
        text="$(eval_gettext "The backup has been made for \$USER (there are \
\$num_users users).")

$users"
    fi

    if [[ $target_medium == /media/* ]]; then
        term_script_unmount || unmount_rc=$?
        if [[ $unmount_rc -eq $OK ]]; then
            text+="

$(gettext 'The USB medium can be removed.')"
        else
            text+="

$(gettext 'Disconnect the USB medium yourself (safely!).')"
        fi
    fi
    infomsg "$text"

    exit $OK
}


# This function tries to unmount the USB device.
function term_script_unmount {
    local       dev=''
    local   -i  rc=0
    local       text

    text=$(gettext 'Disconnect the USB media')
    dev='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$target_medium"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )
    if $option_gui; then
        logmsg "$text..."
        umount "$target_medium"                     |& $LOGCMD || rc+=$?;   \
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?;   \
        udisksctl power-off --block-device "$dev"   |& $LOGCMD              |
        zenity  --progress                                                  \
                --pulsate                                                   \
                --auto-close                                                \
                --no-cancel                                                 \
                --width     600                                             \
                --height    50                                              \
                --title     "$title"                                        \
                --text      "$text"                                         \
                2> >($LOGCMD) || rc+=$?
    else
        text+='...'
        infomsg "$text"
        umount "$target_medium"                     |& $LOGCMD || rc+=$?
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?
        udisksctl power-off --block-device "$dev"   |& $LOGCMD || rc+=$?
    fi

    return $rc
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
