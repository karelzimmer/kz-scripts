#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Backup home folder
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-backup'
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"
PROGRAM_DESC=$(gettext 'Backup home folder')
readonly PROGRAM_DESC

USAGE="$(eval_gettext "Usage: kz backup [-g|--gui] [-t|--target <directory>]
                 \$OPTIONS_USAGE")"
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -t, --target <directory>
                 place backup in specified directory')"
readonly X_OPTIONS_HELP

HELP="$(gettext "Usage: kz backup [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"
readonly HELP

readonly X_OPTIONS_SHORT='gt:'
readonly X_OPTIONS_LONG=',gui,target:'


###############################################################################
# Globals
###############################################################################

declare TARGET_MEDIUM=''
declare TARGET=''
declare -i BACKUP_RC=0


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local medium=''
    local option_target=false
    local target_argument=''

    check_input "$@"
    check_target
    backup_settings
    create_backup
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          'kz backup'                         \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -g | --gui )
                if ! [[ ${DISPLAY-} ]]; then
                    TEXT=\
"kz backup: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -t | --target )
                if $option_target; then
                    TEXT="kz backup: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                option_target=true
                target_argument=$2
                shift 2
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="kz backup: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function checks if the target is available.
function check_target() {
    local usb_mount_point="/media/$USER"

    if grep --quiet rhel /etc/os-release; then
        usb_mount_point="/run/media/$USER"
    fi

    if $option_target; then

        if ! [[ -d $target_argument ]]; then
            TEXT="kz backup: $target_argument: \
$(gettext 'directory does not exist')
$USAGE"
            infomsg "$TEXT"
            exit $ERR
        fi

        TARGET=$target_argument/$USER@$HOSTNAME
        TARGET_MEDIUM=$target_argument
    else

        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if ! [[ $medium ]]; then
            TEXT=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter
            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if ! [[ $medium ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            TEXT="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter

            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        TARGET=$medium/Backups/$USER@$HOSTNAME

        [[ -d $medium/Backups ]] ||
            mkdir --mode=a=rwx --verbose "$medium/Backups" |& $PROGRAM_LOGS
        TARGET_MEDIUM=$medium
    fi

    if [[ -e $TARGET_MEDIUM/backup-$HOSTNAME-$USER ]]; then
        TEXT="$(gettext "Backup found with old name: \
backup-<hostname>-<username>
Please rename to:           <username>@<hostname>")"
        errmsg "$TEXT"
        exit $ERR
    fi

    if [[ -e $TARGET_MEDIUM/$PROGRAM_NAME-$HOSTNAME-$USER ]]; then
        TEXT="$(gettext "Backup found with old name: \
kz-backup-<hostname>-<username>
Please rename to:           <username>@<hostname>")"
        errmsg "$TEXT"
        exit $ERR
    fi

    if [[ -e $medium/$USER@$HOSTNAME ]]; then
        TEXT="$(gettext "Backup found in wrong place: \
<medium>/<username>@<hostname>
Please move to:              <medium>/Backups/")"
        errmsg "$TEXT"
        exit $ERR
    fi
}


# This function backups the user settings.
function backup_settings() {
    local settings_dir=''

    logmsg 'Backup settings...'

    settings_dir=$HOME/$(gettext 'Settings')
    if ! [[ -d $settings_dir ]]; then
        mkdir --verbose "$settings_dir" |& $PROGRAM_LOGS
    fi

    backup_setting_readme
    backup_setting_apps
    backup_setting_users
    backup_setting_wifi

    if [[ ${DISPLAY-} ]]; then
        backup_setting_avatar
        backup_setting_desktop
        backup_setting_favs
    fi

    # Remove previous version of settings folder.
    rm --force --recursive --verbose "$HOME/kz-backup" |& $PROGRAM_LOGS
}


# This function creates a README.
function backup_setting_readme() {
    local output_file=''

    logmsg 'Create settings README...'

    output_file=$settings_dir/$(gettext 'README')

    TEXT="$(gettext "This folder contains files created by kz-backup.
These files are used by kz-restore and others.

Further reading:")
    man kz backup
    man kz restore"
    printf '%s\n' "$TEXT" > "$output_file"
}


# This function creates a list of installed apps.
function backup_setting_apps() {
    local footer1
    local footer2
    local header1
    local header2
    local output_file=$settings_dir/apps.txt

    header1=$(gettext "==== START list of manual installed packages \
====")
    footer1=$(gettext '==== END list of manual installed packages ====')
    header2=$(gettext '==== START list of installed snaps ====')
    footer2=$(gettext '==== END list of installed snaps ====')

    logmsg 'Create a list of installed apps...(ignore WARNING).'

    printf '%s\n' "$header1" > "$output_file"
    apt list --manual-installed 2> /dev/null >> "$output_file" || true
    printf '%s\n' "$footer1" >> "$output_file"

    printf '\n%s\n' "$header2" >> "$output_file"
    snap list 2> /dev/null >> "$output_file" ||
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$output_file"
    printf '%s\n' "$footer2" >> "$output_file"
}


# This function saves instructions for adding additional users.
function backup_setting_users() {
    local groups=''
    local output_file=$settings_dir/users.txt
    local user=''
    local users=''

    output_file=$settings_dir/$(gettext 'users.txt')

    users=$(
        gettext 'USERNAME|USERID|USER'
        printf  '\n'
        grep    /bin/bash /etc/passwd           |
        grep    root --invert-match             |
        cut     --delimiter=':' --fields=1,3,5  |
        tr      ',,,' '   '                     |
        tr      ':' '|'
        )
    groups=$(
        while read -r user; do
            printf '\n'
            id "$user"
        done < <(grep /home /etc/passwd | cut --delimiter=':' --fields=1)
        )

    logmsg 'Save instructions for adding additional users...'

    if [[ ${DISPLAY-} ]]; then
        TEXT="$(gettext 'Additional users can be added manually:')

$(gettext "1. Type 'user' on the activities overview[1] and click behind \
Settings on Users.
2. Click on Unlock and then Add User.
3. Enter Name <user> and Username <username>.")

$(gettext "[1] Press the Super key (Windows, Command, or Magnifier key) or \
click on Activities at the top left.")

$users
$groups"
    else
        TEXT="$(gettext 'Additional users can be added manually:')

$(gettext "# Standard user:
sudo useradd --create-home --comment '<user>' <username>
# Administrator:
# Debian-based:
sudo usermod --append --groups adm,sudo <username>
# Red Hat-based:
sudo usermod --append --groups wheel <username>
# User sets password on first login:
sudo passwd --delete --expire <username>")

$users
$groups"
    fi

    printf '%b\n' "$TEXT" > "$output_file"
}


# This function saves the WiFi information.
function backup_setting_wifi() {
    local output_file=$settings_dir/wifi.txt

    logmsg 'Save the WiFi information...'

    # Call kz wifi.
    logmsg 'Calling kz wifi...'
    kz wifi > "$output_file"
    logmsg 'Called kz wifi.'
}


# This function copies the user avatar and saves instructions for restoring, if
# possible.
function backup_setting_avatar() {
    local input_file=/var/lib/AccountsService/icons/$USER
    local output_file_1=$settings_dir/avatar
    local output_file_2=$settings_dir/avatar.txt

    if [[ -f $input_file ]]; then
        logmsg 'Copy the user avatar...'
        cp --verbose "$input_file" "$output_file_1" |& $PROGRAM_LOGS
    fi
    logmsg 'Save instructions for restoring the avatar...'
    TEXT="$(gettext "To set the users avatar:

1. Type 'user' on the activities overview[1] and click behind Settings on \
Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / Settings, or another picture file.")

$(gettext "[1] Press the Super key (Windows, Command, or Magnifier key) or \
click on Activities at the top left.")"

    printf '%s\n' "$TEXT" > "$output_file_2"
}


# This function copies the desktop background, if available, and saves
# instructions for setting desktop background.
function backup_setting_desktop() {
    local input_file
    local output_file_1=$settings_dir/desktop
    local output_file_2=$settings_dir/desktop.txt

    input_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed 's|%20| |g'                                         |
        sed "s/'//g"                                            |
        sed 's|file://||'                                       || true
        )

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ -f $input_file && $input_file != *.xml ]]; then
        logmsg 'Copy the desktop background...'
        cp "$input_file" "$output_file_1" |& $PROGRAM_LOGS || true
    fi

    logmsg 'Save instructions for setting the desktop background...'

    TEXT="$(gettext "To set the desktop background:

1. Type 'file' on the activities overview[1] and click on Files.
2. Open the folder containing the desired image.
3. Right-click on the desired image and choose Set as Background.")

$(gettext "[1] Press the Super key (Windows, Command, or Magnifier key) or \
click on Activities at the top left.")"

    printf '%s\n' "$TEXT" > "$output_file_2"
}


# This function saves the favorite apps in the dash.
function backup_setting_favs() {
    local output_file=$settings_dir/favs.txt

    logmsg 'Save the favorite apps...'
    gsettings get                           \
              org.gnome.shell favorite-apps \
              > "$output_file"              |& $PROGRAM_LOGS || true
}


# This function creates the backup.
function create_backup() {
    local exclude_file=''
    local title=''

    exclude_file=$(mktemp -t "$PROGRAM_NAME-excludes-XXXXXXXXXX")

    cat << EOF > "$exclude_file"
# Exclude Git-managed directories.
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    title=$(gettext 'Backup home folder')
    TEXT=$(gettext 'Preparing backup (this may take a while)')

    if $OPTION_GUI; then
        logmsg "$title..."
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$HOME"/                        \
                "$TARGET"/                      \
                2> >($PROGRAM_LOGS)             |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$title"            \
                --text      "$TEXT"             2> /dev/null || BACKUP_RC=$?
    else
        TEXT+='...'
        infomsg "$TEXT"
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$HOME"/                        \
                "$TARGET"/                      2> /dev/null || BACKUP_RC=$?
    fi

    TEXT=$(gettext "Writing data from memory (this may take a while)")
    if $OPTION_GUI; then
        logmsg "$TEXT..."
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$TEXT"     &> >($PROGRAM_LOGS)
    else
        TEXT+='...'
        infomsg "$TEXT"
        sync |& $PROGRAM_LOGS
    fi
}


# This function controls the termination of the script.
function term() {
    local users=''
    local -i num_users=0

    if [[ $BACKUP_RC -ne $OK ]]; then
        TEXT="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while creating the backup, or
is there not enough space on \$TARGET.")

$(eval_gettext "Use \"journalctl --boot --id=\$PROGRAM_NAME\" in Terminal to \
view log messages.")

$(gettext "Try creating the back up again.")"
        errmsg "$TEXT"
        exit $ERR
    fi

    users=$(
        gettext 'USERNAME|USERID|USER'
        printf  '\n'
        grep    /bin/bash /etc/passwd           |
        grep    root --invert-match             |
        cut     --delimiter=':' --fields=1,3,5  |
        tr      ',,,' '   '                     |
        tr      ':' '|'
        )
    num_users=$(find /home/* -prune -print | wc --lines)

    if [[ $num_users -eq 1 ]]; then
        TEXT=$(gettext "The backup has been made.")
    else
        TEXT="$(eval_gettext "The backup has been made for \$USER (there are \
\$num_users users).")

$users"
    fi

    if [[ $TARGET_MEDIUM == */media/$USER* ]]; then
        term_usb || RC=$?
        if [[ $RC -eq $OK ]]; then
            TEXT+="

$(gettext 'The USB medium can be removed.')"
        else
            TEXT+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi
    fi
    infomsg "$TEXT"

    exit $OK
}


# This function tries to unmount the USB device.
function term_usb() {
    local device=''
    local text=''

    device='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$TARGET_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
        )

    title=$(gettext 'Backup home folder')
    text=$(gettext 'Disconnect the USB media')
    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        logmsg "$TEXT..."
        term_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> /dev/null
            )
    else
        infomsg "$text..."
        term_unmount
    fi

    return $RC
}


# This function unmounts the USB device.
function term_unmount() {
    umount "$TARGET_MEDIUM"                         |& $PROGRAM_LOGS || RC+=$?
    udisksctl lock --block-device "$device"         |& $PROGRAM_LOGS || RC+=$?
    udisksctl power-off --block-device "$device"    |& $PROGRAM_LOGS || RC+=$?
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
