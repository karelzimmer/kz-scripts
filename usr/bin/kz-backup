#!/usr/bin/env bash
# shellcheck source=kz_common.sh
# #############################################################################
# SPDX-FileComment: Backup home folder
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
# #############################################################################


# #############################################################################
# Imports
# #############################################################################

source kz_common.sh as kz


# #############################################################################
# Constants
# #############################################################################

readonly PROGRAM_NAME='kz-backup'
PROGRAM_DESC=$(gettext 'Backup home folder')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz backup [-g|--gui] [-t|--target <directory>] \
[-h|--help] [-m|--manual]
                 [-u|--usage] [-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz backup [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short \
options too.")

$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -t, --target <directory>
                 place backup in specified directory')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='gt:hmuv'
readonly OPTIONS_LONG='gui,target:,help,manual,usage,version'


# #############################################################################
# Globals
# #############################################################################

declare -i BACKUP_RC=0
declare ERROR_LOG=''
declare OPTION_GUI=false
declare TARGET_MEDIUM=''
declare TARGET=''


# #############################################################################
# Functions
# #############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local medium=''
    local option_target=false
    local target_argument=''

    check_input "$@"
    check_target
    backup_settings
    create_backup
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -g | --gui )
                if [[ -z ${DISPLAY-} ]]; then
                    text="$program_name: $1: $(gettext "no desktop \
environment available")"
                    kz.infomsg "$text"
                    exit 1
                fi
                OPTION_GUI=true
                shift
                ;;
            -t | --target )
                if $option_target; then
                    text="$program_name: $1 $2: $(gettext 'too many options')
$USAGE"
                    kz.infomsg "$text"
                    exit 1
                fi
                option_target=true
                target_argument=$2
                shift 2
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function checks if the target is available.
function check_target() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''
    local usb_mount_point=/media/$USER

    if grep --quiet --regexp=rhel /etc/os-release; then
        usb_mount_point=/run/media/$USER
    fi

    if $option_target; then

        if ! [[ -d $target_argument ]]; then
            text="$program_name: $target_argument: \
$(gettext 'directory does not exist')
$USAGE"
            kz.infomsg "$text"
            exit 1
        fi

        TARGET=$target_argument/$USER@$HOSTNAME
        TARGET_MEDIUM=$target_argument
    else

        medium=$(ls --directory "$usb_mount_point/"* 2> /dev/null || true)

        if [[ -z $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            kz.infomsg "$text"

            $OPTION_GUI || kz.wait_for_enter
            medium=$(ls --directory "$usb_mount_point/"* 2> /dev/null || true)

            if [[ -z $medium ]]; then
                kz.errmsg "$text"
                exit 1
            fi
        fi

        medium=$(ls --directory "$usb_mount_point/"* 2> /dev/null || true)

        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            kz.infomsg "$text"

            $OPTION_GUI || kz.wait_for_enter

            medium=$(ls --directory "$usb_mount_point/"* 2> /dev/null || true)

            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                kz.errmsg "$text"
                exit 1
            fi
        fi

        TARGET=$medium/backups/$USER@$HOSTNAME

        [[ -d $medium/backups ]] ||
            mkdir --mode=a=rwx --verbose "$medium/backups" |& $PROGRAM_LOGS
        TARGET_MEDIUM=$medium
    fi

    if [[ -e $TARGET_MEDIUM/backup-$HOSTNAME-$USER ]]; then
        text="$(gettext "Backup found with old name: \
backup-<hostname>-<username>
Please rename to:           <username>@<hostname>")"
        kz.errmsg "$text"
        exit 1
    fi

    if [[ -e $TARGET_MEDIUM/$PROGRAM_NAME-$HOSTNAME-$USER ]]; then
        text="$(gettext "Backup found with old name: \
kz-backup-<hostname>-<username>
Please rename to:           <username>@<hostname>")"
        kz.errmsg "$text"
        exit 1
    fi

    if [[ -e $medium/$USER@$HOSTNAME ]]; then
        text="$(gettext "Backup found in wrong place: \
<medium>/<username>@<hostname>
Please move to:              <medium>/backups")"
        kz.errmsg "$text"
        exit 1
    fi

    if [[ -e $medium/Backups ]]; then
        text="$(gettext "Backup found in wrong place: \
<medium>/Backups
Please move to:              <medium>/backups")"
        kz.errmsg "$text"
        exit 1
    fi
}


# This function backups the user settings.
function backup_settings() {
    local settings_dir=''

    kz.logmsg 'Backup settings...'

    settings_dir=$HOME/$(gettext 'Settings')
    if ! [[ -d $settings_dir ]]; then
        mkdir --verbose "$settings_dir" |& $PROGRAM_LOGS
    fi

    backup_setting_readme
    backup_setting_apps
    backup_setting_users
    backup_setting_wifi

    if [[ -n ${DISPLAY-} ]]; then
        backup_setting_avatar
        backup_setting_desktop
        backup_setting_favs
    fi

    # Remove previous version of settings folder.
    rm --force --recursive --verbose "$HOME/kz-backup" |& $PROGRAM_LOGS
}


# This function creates a README.
function backup_setting_readme() {
    local output_file=''
    local text=''

    kz.logmsg 'Create settings README...'

    output_file=$settings_dir/$(gettext 'README')

    text="$(gettext "This folder contains files created by kz-backup and \
kz-setup.
These files are used by kz-restore and others.

Further reading:")
    man kz backup
    man kz restore
    man kz setup"
    printf '%s\n' "$text" > "$output_file"
}


# This function creates a list of installed apps.
function backup_setting_apps() {
    local footer1
    local footer2
    local header1
    local header2
    local output_file=$settings_dir/apps.txt
    local text=''

    header1=$(gettext '==== START list of manual installed packages')
    footer1=$(gettext '==== END list of manual installed packages')
    header2=$(gettext '==== START list of installed snaps')
    footer2=$(gettext '==== END list of installed snaps')
    header3=$(gettext '==== START list of installed Flatpak apps')
    footer3=$(gettext '==== END list of installed Flatpak apps')

    kz.logmsg 'Create a list of installed apps...(ignore WARNING).'

    printf '%s\n' "$header1" > "$output_file"
    apt list                \
        --manual-installed  \
        2> /dev/null        |
    cut --delimiter='/'     \
        --fields=1          >> "$output_file" || true
    printf '%s\n' "$footer1" >> "$output_file"

    if snap 2> /dev/null; then
        {
            printf '\n%s\n' "$header2"
            snap list
            printf '%s\n' "$footer2"
        } >> "$output_file"
    fi

    if flatpak 2> /dev/null; then
        {
            printf '\n%s\n' "$header3"
            flatpak list
            printf '%s\n' "$footer3"
        } >> "$output_file"
    fi
}


# This function saves instructions for adding additional users.
function backup_setting_users() {
    local groups=''
    local output_file=$settings_dir/users.txt
    local text=''
    local user=''
    local users=''

    output_file=$settings_dir/$(gettext 'users.txt')

    users=$(
        gettext 'USERNAME|USERID|USER'
        printf  '\n'
        grep    --regexp=/bin/bash /etc/passwd  |
        grep    --invert-match --regexp=root    |
        cut     --delimiter=':' --fields=1,3,5  |
        tr      ',,,' '   '                     |
        tr      ':' '|'
        )
    groups=$(
        while read -r user; do
            printf '\n'
            id "$user"
        done < <(grep /home /etc/passwd | cut --delimiter=':' --fields=1)
        )

    kz.logmsg 'Save instructions for adding additional users...'

    if [[ -n ${DISPLAY-} ]]; then
        text="$(gettext 'Additional users can be added manually:')

$(gettext "1. Press the Super key[1], type 'user' and click behind Settings \
on Users.
2. Click on Unlock and then Add User.
3. Enter Name <user> and Username <username>.")

$(gettext "[1] Windows, command, or magnifying glass key.")

$users
$groups"
    else
        text="$(gettext 'Additional users can be added manually:')

$(gettext "# Standard user:
sudo useradd --create-home --comment '<user>' <username>
# Administrator:
# Debian or Debian-based:
sudo usermod --append --groups adm,sudo <username>
# Red Hat or Red Hat-based:
sudo usermod --append --groups wheel <username>
# User sets password on first login:
sudo passwd --delete --expire <username>")

$users
$groups"
    fi

    printf '%b\n' "$text" > "$output_file"
}


# This function saves the WiFi information.
function backup_setting_wifi() {
    local output_file=$settings_dir/wifi.txt

    kz.logmsg 'Save the WiFi information...'

    # Call kz-wifi.
    kz.logmsg 'Calling kz-wifi...'
    kz-wifi > "$output_file"
    kz.logmsg 'Called kz-wifi.'
}


# This function copies the user avatar and saves instructions for restoring, if
# possible.
function backup_setting_avatar() {
    local input_file=/var/lib/AccountsService/icons/$USER
    local output_file_1=$settings_dir/avatar
    local output_file_2=$settings_dir/avatar.txt
    local text=''

    if [[ -f $input_file ]]; then
        kz.logmsg 'Copy the user avatar...'
        cp --verbose "$input_file" "$output_file_1" |& $PROGRAM_LOGS
    fi
    kz.logmsg 'Save instructions for restoring the avatar...'
    text="$(gettext "To set the users avatar:

1. Press the Super key[1], type 'user' and click behind Settings on Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / Settings, or another picture file.")

$(gettext '[1] Windows, command, or magnifying glass key.')"

    printf '%s\n' "$text" > "$output_file_2"
}


# This function copies the desktop background, if available, and saves
# instructions for setting desktop background.
function backup_setting_desktop() {
    local input_file
    local output_file_1=$settings_dir/desktop
    local output_file_2=$settings_dir/desktop.txt
    local text=''

    input_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ -f $input_file && $input_file != *.xml ]]; then
        kz.logmsg 'Copy the desktop background...'
        cp "$input_file" "$output_file_1" |& $PROGRAM_LOGS || true
    fi

    kz.logmsg 'Save instructions for setting the desktop background...'

    text="$(gettext "To set the desktop background:

1. Press the Super key[1], type 'file' and click on Files.
2. Open the folder containing the desired image.
3. Right-click on the desired image and choose Set as Background.")

$(gettext '[1] Windows, command, or magnifying glass key.')"

    printf '%s\n' "$text" > "$output_file_2"
}


# This function saves the favorite apps in the dash.
function backup_setting_favs() {
    local output_file=$settings_dir/favs.txt

    kz.logmsg 'Save the favorite apps...'
    gsettings   get                             \
                org.gnome.shell favorite-apps   |
                tr '[' ' '                      |
                tr ']' ' '                      |
                tr "'" ' '                      |
                tr --delete '[:space:]'         |
                tr ',' '\n'                     \
                > "$output_file"                |& $PROGRAM_LOGS || true
}


# This function creates the backup.
function create_backup() {
    local exclude_file=''
    local text=''
    local title=''

    exclude_file=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX.exclude")

    cat <<EOF > "$exclude_file"
# Exclude Git-managed directories.
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    ERROR_LOG=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX-error.log")
    text="** $ERROR_LOG (stderr)"
    printf '%s\n' "$text" > "$ERROR_LOG"

    title="$(gettext 'Backup home folder') $(gettext 'progress')"
    text=$(gettext 'Preparing backup (this may take a while)')
    kz.debugmsg "$title"...

    if $OPTION_GUI; then
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$HOME/"                        \
                "$TARGET/"                      \
                2>> "$ERROR_LOG"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$title"            \
                --text      "$text"             2> /dev/null || BACKUP_RC=$?
    else
        text+='...'
        kz.infomsg "$text"
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$HOME/"                        \
                "$TARGET/"                      2>> "$ERROR_LOG" ||
                                                BACKUP_RC=$?
    fi

    text=$(gettext "Writing data from memory (this may take a while)")
    if $OPTION_GUI; then
        kz.debugmsg "$text..."
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     \
                1> >($PROGRAM_LOGS)     \
                2>> "$ERROR_LOG"
    else
        text+='...'
        kz.infomsg "$text"
        sync 1> >($PROGRAM_LOGS) 2>> "$ERROR_LOG"
    fi
}


# This function controls the termination of the script.
function term() {
    local -i num_users=0
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''
    local title=''
    local users=''

    # Error-log (stderr) also to the main log.
    kz.logmsg '---------------------------------------------------------------'
    printf '%s' "$(<"$ERROR_LOG")" |& $PROGRAM_LOGS
    kz.logmsg '---------------------------------------------------------------'

    if [[ $BACKUP_RC -ne 0 ]]; then
        title="$PROGRAM_DESC $(gettext 'error messages')"
        text="$(gettext 'Backup ended with errors.')

$(gettext 'Possible causes:')
$(gettext 'Were any files added or deleted during the backup, or')
$(gettext 'some files may not be readable or changeable, or')
$(eval_gettext "is there not enough space on \$TARGET.")

$(gettext 'Actions to take:')
$(gettext 'Check the error messages after this.')
$(gettext 'Try creating the back up again.')"
        kz.errmsg "$text"

        if $OPTION_GUI; then
            zenity  --text-info             \
                    --filename="$ERROR_LOG" \
                    --width     700         \
                    --height    500         \
                    --title     "$title"    2> /dev/null || true
        else
            kz.infomsg "$title $ERROR_LOG:"
            less --no-init --quit-if-one-screen "$ERROR_LOG"
        fi
        exit 1
    fi

    users=$(
        gettext 'USERNAME|USERID|USER'
        printf  '\n'
        grep    --regexp=/bin/bash /etc/passwd  |
        grep    --invert-match --regexp=root    |
        cut     --delimiter=':' --fields=1,3,5  |
        tr      ',,,' '   '                     |
        tr      ':' '|'
        )
    num_users=$(find /home/* -prune -print | wc --lines)

    if [[ $num_users -eq 1 ]]; then
        text=$(gettext "The backup has been made.")
    else
        text="$(eval_gettext "The backup has been made for \$USER (there \
are \$num_users users).")

$users"
    fi
    if [[ $TARGET_MEDIUM == /media/$USER* ]]; then
        text+="

$(gettext '*** Remember to SAFELY remove the USB media ***')"
    fi
    kz.infomsg "$text"

    exit 0
}


# #############################################################################
# Main
# #############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
