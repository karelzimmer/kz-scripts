#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Make backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz backup'
PROGRAM_DESC=$(gettext 'Make backup')
readonly PROGRAM_DESC

USAGE="$(eval_gettext "Usage: \$PROGRAM_NAME [-g|--gui] \
[-t|--target <directory>]
                 \$OPTIONS_USAGE")"
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -t, --target <directory>
                 place backup in specified directory')"
readonly X_OPTIONS_HELP

HELP="$(eval_gettext "Usage: \$PROGRAM_NAME [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"
readonly HELP

readonly X_OPTIONS_SHORT='gt:'
readonly X_OPTIONS_LONG=',gui,target:'


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''
    local -i RC=$OK

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$PROGRAM_NAME"                     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -g | --gui )
                if ! $DESKTOP_ENVIRONMENT; then
                    TEXT=\
"$PROGRAM_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -t | --target )
                if $OPTION_TARGET; then
                    TEXT="$PROGRAM_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_TARGET=true
                TARGET_ARGUMENT=$2
                shift 2
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$PROGRAM_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    check_target
    backup_settings
    create_backup
}


# This function checks if the target is available.
function check_target() {
    local TEXT=''
    local USB_MOUNT_POINT="/media/$USER"

    if $RPM; then
        USB_MOUNT_POINT="/run/media/$USER"
    fi

    if $OPTION_TARGET; then

        if [[ ! -d $TARGET_ARGUMENT ]]; then
            TEXT="$PROGRAM_NAME: $TARGET_ARGUMENT: \
$(gettext 'directory does not exist')
$USAGE"
            infomsg "$TEXT"
            exit $ERR
        fi

        TARGET=$TARGET_ARGUMENT/$USER@$HOSTNAME
        TARGET_MEDIUM=$TARGET_ARGUMENT
    else

        MEDIUM=$(ls --directory "$USB_MOUNT_POINT"/* 2> >($LOGCMD) || true)

        if [[ -z $MEDIUM ]]; then
            TEXT=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter
            MEDIUM=$(ls --directory "$USB_MOUNT_POINT"/* 2> >($LOGCMD) || true)

            if [[ -z $MEDIUM ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        MEDIUM=$(ls --directory "$USB_MOUNT_POINT"/* 2> >($LOGCMD) || true)

        if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
            TEXT="$(eval_gettext "Connect only one USB medium.

Now connected:
\$MEDIUM

Disconnect media via Files.")"
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter

            MEDIUM=$(ls --directory "$USB_MOUNT_POINT"/* 2> >($LOGCMD) || true)

            if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        TARGET=$MEDIUM/kz-backup/$USER@$HOSTNAME

        [[ -d $MEDIUM/kz-backup ]] ||
            mkdir --mode=a=rwx --verbose "$MEDIUM/kz-backup" |& $LOGCMD
        TARGET_MEDIUM=$MEDIUM
    fi

    if [[ -e $TARGET_MEDIUM/backup-$HOSTNAME-$USER ]]; then
        TEXT="$(gettext "Backup found with old name: \
'backup-<hostname>-<username>'. \
Please rename to '<username>@<hostname>'.")"
        errmsg "$TEXT"
        exit $ERR
    fi
}


# This function backups the user settings.
function backup_settings() {
    local SETTINGS_DIR=$HOME/kz-backup
    local TEXT=''

    logmsg 'Backup settings...'

    if [[ ! -d $SETTINGS_DIR ]]; then
        mkdir --verbose "$SETTINGS_DIR" |& $LOGCMD
    fi

    backup_setting_readme
    backup_setting_apps
    backup_setting_users
    backup_setting_wifi

    if $DESKTOP_ENVIRONMENT; then
        backup_setting_avatar
        backup_setting_desktop
        backup_setting_favs
    fi
}


# This function creates a README.
function backup_setting_readme() {
    local OUTPUT_FILE=$SETTINGS_DIR/README

    logmsg 'Create settings README...'

    TEXT="$(gettext "This folder contains files created by kz-backup.
These files are used by kz-restore and others.

Further reading:")
    man kz-backup
    man kz-restore"
    printf '%s\n' "$TEXT" > "$OUTPUT_FILE"
}


# This function creates a list of installed apps.
function backup_setting_apps() {
    local FOOTER1
    local FOOTER2
    local HEADER1
    local HEADER2
    local OUTPUT_FILE=$SETTINGS_DIR/apps.txt

    HEADER1=$(gettext "==== START list of manual installed packages \
====")
    FOOTER1=$(gettext '==== END list of manual installed packages ====')
    HEADER2=$(gettext '==== START list of installed snaps ====')
    FOOTER2=$(gettext '==== END list of installed snaps ====')

    logmsg 'Create a list of installed apps...(ignore WARNING).'

    printf '%s\n' "$HEADER1" > "$OUTPUT_FILE"
    apt list --manual-installed 2> >($LOGCMD) >> "$OUTPUT_FILE" || true
    printf '%s\n' "$FOOTER1" >> "$OUTPUT_FILE"

    printf '\n%s\n' "$HEADER2" >> "$OUTPUT_FILE"
    snap list 2> >($LOGCMD) >> "$OUTPUT_FILE" ||
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$OUTPUT_FILE"
    printf '%s\n' "$FOOTER2" >> "$OUTPUT_FILE"
}


# This function saves instructions for adding additional users.
function backup_setting_users() {
    local GROUPS_LIST=''
    local OUTPUT_FILE=$SETTINGS_DIR/users.txt
    local USER_NAME=''

    USERS_LIST=$(
            gettext 'USERNAME|USERID|USER'
            printf '\n'
            grep --regexp='/home' /etc/passwd   |
            cut --delimiter=':' --fields=1,3,5  |
            tr ':' '|'
            )
    GROUPS_LIST=$(
            printf '\n'
            while read -r USER_NAME; do
                printf '\n'
                id "$USER_NAME"
            done < <(
                grep --regexp='/home' /etc/passwd |
                cut --delimiter=':' --fields=1
                )
            )

    logmsg 'Save instructions for adding additional users...'

    if $DESKTOP_ENVIRONMENT; then
        TEXT="$(gettext 'Additional users can be added manually:')
$(gettext "1. Press the Super key[1], type 'user' and click behind Settings \
on Users.
2. Click on Unlock and then Add User.
3. Enter Name <user> and Username <username>.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")

$USERS_LIST
$GROUPS_LIST"
    else
        TEXT="$(gettext 'Additional users can be added manually:')
$(gettext "# Standard user:
sudo useradd --create-home --comment '<user>' <username>
# Administrator:
# Debian-based:
sudo usermod --append --groups adm,sudo <username>
# Red Hat-based:
sudo usermod --append --groups wheel <username>
# User sets password on first login:
sudo passwd --delete --expire <username>")

$USERS_LIST
$GROUPS_LIST"
    fi

    printf '%b\n' "$TEXT" > "$OUTPUT_FILE"
}


# This function saves the WiFi information.
function backup_setting_wifi() {
    local OUTPUT_FILE=$SETTINGS_DIR/wifi.txt

    logmsg 'Save the WiFi information...'

    # Call kz wifi.
    logmsg 'Calling kz wifi...'
    kz wifi > "$OUTPUT_FILE"
    logmsg 'Called kz wifi.'
}


# This function copies the user avatar and saves instructions for restoring, if
# possible.
function backup_setting_avatar() {
    local INPUT_FILE=/var/lib/AccountsService/icons/$USER
    local OUTPUT_FILE_1=$SETTINGS_DIR/avatar
    local OUTPUT_FILE_2=$SETTINGS_DIR/avatar.txt

    if [[ -e $INPUT_FILE ]]; then
        logmsg 'Copy the user avatar...'
        cp --preserve --verbose "$INPUT_FILE" "$OUTPUT_FILE_1" |& $LOGCMD
    fi
    logmsg 'Save instructions for restoring the avatar...'
    TEXT="$(gettext "To restore the users avatar:
1. Press the Super key[1], type 'user' and click behind Settings on Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / kz, or another picture file.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")"

    printf '%s\n' "$TEXT" > "$OUTPUT_FILE_2"
}


# This function copies the desktop background, if available, and saves
# instructions for setting desktop background.
function backup_setting_desktop() {
    local INPUT_FILE
    local OUTPUT_FILE_1=$SETTINGS_DIR/desktop
    local OUTPUT_FILE_2=$SETTINGS_DIR/desktop.txt

    INPUT_FILE=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ -e $INPUT_FILE && $INPUT_FILE != *.xml ]]; then
        logmsg 'Copy the desktop background...'
        cp --preserve --verbose "$INPUT_FILE" "$OUTPUT_FILE_1" |& $LOGCMD ||
            true
    fi

    logmsg 'Save instructions for setting the desktop background...'

    TEXT="$(gettext "To set the desktop background:
1. Press the Super key[1], type 'file' and click on Files.
2. Open the folder containing the desired image.
3. Right-click on the desired image and choose Set as Background.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")"

    printf '%s\n' "$TEXT" > "$OUTPUT_FILE_2"
}


# This function saves the favorite apps in the dash.
function backup_setting_favs() {
    local OUTPUT_FILE=$SETTINGS_DIR/favs.txt

    logmsg 'Save the favorite apps...'
    gsettings get                           \
              org.gnome.shell favorite-apps > "$OUTPUT_FILE" |& $LOGCMD || true
}


# This function creates the backup.
function create_backup() {
    local ERROR_FILE=''
    local EXCLUDE_FILE=''
    local RSYNC_MESSAGES=''
    local TEXT=''
    local TITLE=''
    local -i BACKUP_RC=0

    ERROR_FILE=$(mktemp -t "kz-backup-errors-XXXXXXXXXX")
    EXCLUDE_FILE=$(mktemp -t "kz-backup-exclude-XXXXXXXXXX")

    cat << EOF > "$EXCLUDE_FILE"
# Exclude Git-managed directories.
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    TITLE=$(gettext 'Make backup')
    TEXT=$(gettext 'Preparing backup (this may take a while)')

    if $OPTION_GUI; then
        logmsg "$TITLE..."
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --delete                        \
                --exclude-from="$EXCLUDE_FILE"  \
                --delete-excluded               \
                "$HOME"/                        \
                "$TARGET"/                      \
                2> "$ERROR_FILE"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$TITLE"            \
                --text      "$TEXT"             2> >($LOGCMD) || BACKUP_RC=$?
    else
        TEXT+='...'
        infomsg "$TEXT"
        rsync   --archive                       \
                --acls                          \
                --xattrs                        \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$EXCLUDE_FILE"  \
                --delete-excluded               \
                "$HOME"/                        \
                "$TARGET"/                      2> "$ERROR_FILE" ||
                                                    BACKUP_RC=$?
    fi
    rm --verbose "$EXCLUDE_FILE" |& $LOGCMD

    TEXT=$(gettext "Writing data from memory (this may take a while)")

    if $OPTION_GUI; then
        logmsg "$TEXT..."
        sync;                           \
        sleep 1                         |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$TITLE"    \
                --text      "$TEXT"     &> >($LOGCMD)
    else
        TEXT+='...'
        infomsg "$TEXT"
        sync |& $LOGCMD
    fi

    if [[ $BACKUP_RC -ne $OK ]]; then
        # shellcheck disable=SC2034
        RSYNC_MESSAGES=$(cat "$ERROR_FILE")
        TEXT="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while creating the backup, or
is there not enough space on \$TARGET.

Check the rsync messages (also in \$ERROR_FILE):
\$RSYNC_MESSAGES

Try creating the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Make backup', or
use app 'Terminal', type 'kz backup'.")"
        errmsg "$TEXT"
        exit $ERR
    fi

    rm --verbose "$ERROR_FILE" |& $LOGCMD
}


# This function controls the termination of the script.
function term_script() {
    local TEXT=''
    local -i NUM_USERS=0
    local -i RC=$OK

    NUM_USERS=$(find /home/* -prune -print | wc --lines)

    if [[ $NUM_USERS -eq 1 ]]; then
        TEXT=$(gettext "The backup has been made.")
    else
        TEXT="$(eval_gettext "The backup has been made for \$USER (there are \
\$NUM_USERS users).")

$USERS_LIST"
    fi

    if [[ $TARGET_MEDIUM == */media/$USER* ]]; then
        term_script_usb || RC=$?

        if [[ $RC -eq $OK ]]; then
            TEXT+="

$(gettext 'The USB medium can be removed.')"
        else
            TEXT+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi

    fi
    infomsg "$TEXT"

    exit $OK
}


# This function tries to unmount the USB device.
function term_script_usb() {
    local DEV=''
    local TEXT=''

    DEV='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$TARGET_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )

    TEXT=$(gettext 'Disconnect the USB media')
    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        logmsg "$TEXT..."
        term_script_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     \
                    2> >($LOGCMD)
            )
    else
        infomsg "$TEXT..."
        term_script_unmount
    fi

    return $RC
}


# This function unmounts the USB device.
function term_script_unmount() {
    umount "$TARGET_MEDIUM"                     |& $LOGCMD || RC+=$?
    udisksctl lock --block-device "$DEV"        |& $LOGCMD || RC+=$?
    udisksctl power-off --block-device "$DEV"   |& $LOGCMD || RC+=$?
    sleep 1
}


###############################################################################
# Main
###############################################################################

function main() {
    local MEDIUM=''
    local TARGET=''
    local TARGET_MEDIUM=''
    local OPTION_TARGET=false
    local TARGET_ARGUMENT=''

    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
