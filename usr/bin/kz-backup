#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Make backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-backup'
readonly PROGRAM_DESC=$(gettext 'Make backup')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] [-t|--target \
DIRECTORY]
                 \$OPTIONS_USAGE")"
readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short optio\
ns too.")

$(gettext '  -g, --gui      starts in graphical mode')
$(gettext '  -t, --target DIRECTORY
                 put backup in DIRECTORY')
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='gt:'
readonly X_OPTIONS_LONG=',gui,target:'

readonly SOURCE=$HOME


###############################################################################
# Variables
###############################################################################

declare medium=''
declare option_target=false
declare target_argument=''
declare target_medium=''
declare target=''


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    text="$DISPLAY_NAME: $1: \
$(gettext 'not allowed on a server')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            -t|--target)
                if $option_target; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_target=true
                target_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    check_target
    check_on_ac_power
    backup_settings
    create_backup
}


# This function checks if the target is available.
function check_target {
    if $option_target; then
        if [[ ! -d $target_argument ]]; then
            text="$DISPLAY_NAME: $target_argument: \
$(gettext 'directory does not exist')
$USAGE_LINE"
            infomsg "$text"
            exit $ERROR
        fi
        target=$target_argument/$USER@$HOSTNAME
        target_medium=$target_argument
    else
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ -z $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ -z $medium ]]; then
                errormsg "$text"
                exit $ERROR
            fi
        fi
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            infomsg "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                errormsg "$text"
                exit $ERROR
            fi
        fi
        target=$medium/$USER@$HOSTNAME
        target_medium=$medium
    fi
    if [[ -e $target_medium/backup-$HOSTNAME-$USER ]]; then
        text="$(gettext "Backup found with old name: 'backup-HOSTNAME-USER'. P\
lease rename to 'USER@HOST'.")"
        errormsg "$text"
        exit $ERROR
    fi
}


# This function backups the user settings.
function backup_settings {
    $option_gui || infomsg "$(gettext 'Secure settings...')"
    backup_setting_apps
    backup_setting_avatar
    backup_setting_desktop
    backup_setting_favs
}


# This function creates a list of installed apps.
function backup_setting_apps {
    local output_file=$(xdg-user-dir DOCUMENTS)/apps
    local header1=$(gettext "==== START list of manual installed packages ====\
")
    local footer1=$(gettext '==== END list of manual installed packages ====')
    local header2=$(gettext '==== START list of installed snaps ====')
    local footer2=$(gettext '==== END list of installed snaps ====')

    logmsg 'Create a list of installed apps...(ignore WARNING)'

    printf '%s\n' "$header1" > "$output_file"
    apt list --manual-installed 2> >($LOGCMD) >> "$output_file" || true
    printf '%s\n' "$footer1" >> "$output_file"

    printf '\n%s\n' "$header2" >> "$output_file"
    snap list 2> >($LOGCMD) >> "$output_file" ||
        printf '%s\n' "$(gettext 'snap is not installed')" >> "$output_file"
    printf '%s\n' "$footer2" >> "$output_file"
}


# This function copies the user avatar.
function backup_setting_avatar {
    local input_file=/var/lib/AccountsService/icons/"$USER"
    local output_file=$(xdg-user-dir PICTURES)/avatar

    logmsg 'Copy the user avatar...'
    cp --preserve --verbose "$input_file" "$output_file" |& $LOGCMD || true
}


# This function copies the desktop background.
function backup_setting_desktop {
    local input_file=''
    local output_file=$(xdg-user-dir PICTURES)/desktop

    logmsg 'Copy the desktop background...'
    input_file=$(
        gsettings get org.gnome.desktop.background picture-uri  |
        sed --expression='s|%20| |g'                            |
        sed --expression="s/'//g"                               |
        sed --expression='s|file://||'                          || true
        )

    # By default, the Debian input_file retrieved with gsettings results in
    # /usr/share/images/desktop-base/desktop-background.xml, which is not an
    # image file, and restoring it from xdg-user-dir to gsettings doesn't work.
    if [[ $input_file != *.xml ]]; then
        cp --preserve --verbose "$input_file" "$output_file" |& $LOGCMD || true
    fi
}


# This function saves the favorite apps in the dash.
function backup_setting_favs {
    local output_file=$(xdg-user-dir DOCUMENTS)/favs

    logmsg 'Save the favorite apps...'
    gsettings get                           \
              org.gnome.shell favorite-apps > "$output_file" |& $LOGCMD || true
}


# This function creates the backup.
function create_backup {
    local       error_file=''
    local       exclude_file=''
    local       rsync_messages=''
    local   -i  backup_rc=0

    error_file=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")
    exclude_file=$(mktemp -t "$PROGRAM_NAME-exclude-XXXXXXXXXX")

    # Déjà Dup: Some locations are ignored by default.
    cat << EOF > "$exclude_file"
.adobe/Flash_Player/AssetCache
.cache
.ccache
.gvfs
.Private
.recent-applications.xbel
.recently-used.xbel
.steam/root
.thumbnails
.var/src/*/cache
.xsession-errors
snap/*/*/.cache
*CACHEDIR.TAG*
EOF

    # Skip git-controlled directories.
    cat << EOF >> "$exclude_file"
$(
    find    "$HOME"         \
            -maxdepth 2     \
            -name .git      \
            -type d         \
            -print          |
    cut     --delimiter='/' \
            --fields=4      |
    sort
    )
EOF

    title=$(gettext 'Make backup')
    text=$(gettext 'Preparing backup (this may take a while)')
    if $option_gui; then
        logmsg "$title"...
        rsync   --archive                       \
                --verbose                       \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$target"/                      \
                2> "$error_file"                |
        sed     --expression='s/^/#/'           |
        zenity  --progress                      \
                --auto-close                    \
                --no-cancel                     \
                --pulsate                       \
                --width     600                 \
                --height    50                  \
                --title     "$title"            \
                --text      "$text"             2> >($LOGCMD) || backup_rc=$?
    else
        text+='...'
        infomsg "$text"
        rsync   --archive                       \
                --verbose                       \
                --human-readable                \
                --delete                        \
                --exclude-from="$exclude_file"  \
                --delete-excluded               \
                "$SOURCE"/                      \
                "$target"/                     2> "$error_file" || backup_rc=$?
    fi
    rm --verbose "$exclude_file" |& $LOGCMD
    text=$(gettext "Writing data from memory (this may take a while)")
    if $option_gui; then
        logmsg "$text"...
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     &> >($LOGCMD)
    else
        text+='...'
        infomsg "$text"
        sync |& $LOGCMD
    fi
    if [[ $backup_rc -ne $OK ]]; then
        # shellcheck disable=SC2034
        rsync_messages=$(cat "$error_file")
        text="$(eval_gettext "Backup ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while creating the backup, or
is there not enough space on \$target.

Check the rsync messages (also in \$error_file):
\$rsync_messages

Try creating the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Make backup', or
use app 'Terminal', type 'kz backup'.")"
        errormsg "$text"
        exit $ERROR
    fi
    rm --verbose "$error_file" |& $LOGCMD
}


# This function controls the termination of the script.
function term_script {
    if [[ $target_medium == /media/* ]]; then
        term_script_unmount
    else
        text=$(gettext 'The backup has been made.')
        infomsg "$text"
    fi
    exit $OK
}


# This function tries to unmount the USB device.
function term_script_unmount {
    local       dev=''
    local   -i  rc=0

    text=$(gettext 'Disconnect the USB media')
    dev='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$target_medium"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )
    if $option_gui; then
        logmsg "$text"...
        umount "$target_medium"                     |& $LOGCMD || rc+=$?;   \
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?;   \
        udisksctl power-off --block-device "$dev"   |& $LOGCMD              |
        zenity  --progress                                                  \
                --pulsate                                                   \
                --auto-close                                                \
                --no-cancel                                                 \
                --width     600                                             \
                --height    50                                              \
                --title     "$title"                                        \
                --text      "$text"                                         \
                2> >($LOGCMD) || rc+=$?
    else
        text+='...'
        infomsg "$text"
        umount "$target_medium"                     |& $LOGCMD || rc+=$?
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?
        udisksctl power-off --block-device "$dev"   |& $LOGCMD || rc+=$?
    fi
    if [[ $rc -eq $OK ]]; then
        text="$(gettext 'The backup has been made.')

$(gettext 'The USB medium can be removed.')"
        infomsg "$text"
    else
        text="$(gettext 'The backup has been made.')

$(gettext 'Disconnect the USB medium yourself (safely!).')"
        infomsg "$text"
    fi
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
