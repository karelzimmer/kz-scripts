#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Distribute website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

if [[ -e ~/kz-scripts/usr/bin/kz_common.sh ]]; then
    source ~/kz-scripts/usr/bin/kz_common.sh as kz
else
    source kz_common.sh as kz
fi


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-deploy'
PROGRAM_DESC=$(gettext 'Distribute website including kz packages')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz deploy [-d|--dev] [-h|--help] [-m|--manual] \
[-u|--usage]
                [-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz deploy [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -d, --dev      deploy the development version of package kz')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='dhmuv'
readonly OPTIONS_LONG='dev,help,manual,usage,version'


###############################################################################
# Globals
###############################################################################

declare OPTION_DEV=false
declare ERR_FLAG=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local text=''

    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        text=$(gettext 'Must run on a Debian or Debian-based system.')
        kz.infomsg "$text"
        exit 1
    fi
    kz.become_check || exit 0
    sudo true
    check
    deploy
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -d | --dev )
                OPTION_DEV=true
                shift
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function performs checks.
function check() {
    local text=''

    text=$(gettext 'CHECK -- 1/2')
    kz.infomsg "$text"
    if ! kz.check_repos; then
        OPTION_DEV=true
        ERR_FLAG=true
    fi
    check_scripts_and_website
}


# This function performs the deploy.
function deploy() {
    local text=''

    text=$(gettext 'DEPLOY -- 2/2')
    kz.infomsg "\n$text"
    upload_website
    install_package
}


# This function check the scripts and website.
function check_scripts_and_website() {
    local text=''

    text=$(gettext 'Check scripts and website')...
    kz.infomsg "$text"

    # Call kz-check.
    kz.logmsg 'Calling kz-check...'
    kz-check || ERR_FLAG=true
    kz.logmsg 'Called kz-check.'
}


# This function uploads the website.
function upload_website() {
    local ftp_from=$HOME/kz-uploads/dist
    local ftp_host=server106.hosting2go.nl
    local ftp_login=$HOME/.$ftp_host'.login'
    local ftp_opts='--reverse --delete --verbose'
    local ftp_set='set ssl:verify-certificate no'
    local ftp_to=/httpdocs
    local ftp_user=kzimmer
    local ftp_x_cmd="mirror $ftp_opts $ftp_from $ftp_to; exit"
    local prompt=''
    local text=''

    text=$(gettext 'Upload website')...
    kz.infomsg "$text"

    if ! [[ -f $ftp_login ]]; then
        prompt="$(gettext 'Password for') ftp://$ftp_host': "
        kz.debugmsg "$prompt"
        read -rsp "$prompt" < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$ftp_login" |& $PROGRAM_LOGS
    fi

    if ! lftp   --user      "$ftp_user"             \
                --password  "$(cat "$ftp_login")"   \
                -e          "$ftp_set; $ftp_x_cmd"  \
                "$ftp_host"; then
        # Force entering the password next time.
        rm --verbose "$ftp_login"*
        text=$(gettext 'Website upload failed.')
        kz.errmsg "$text"
        ERR_FLAG=true
    fi
    # Make reply with password empty.
    REPLY=''
}


# This function installs package kz.
function install_package() {
    local parm=''
    local text=''

    text=$(gettext 'Install Debian package (this may take a while)...')
    kz.infomsg "$text"

    kz.logmsg 'Calling kz-get (via wget and bash)...'
    # Call kz-get via wget and bash as a regular user would do.
    cd "$HOME"
    if $OPTION_DEV; then
        parm='--dev'
    fi
    if ! (wget karelzimmer.nl/getkz; bash getkz "$parm"); then
        text=$(gettext 'Install Debian package failed.')
        kz.errmsg "$text"
    fi
    cd "$OLDPWD"
    kz.logmsg 'Called kz-get (via wget and bash).'
}


# This function controls the termination of the script.
function term() {
    local text=''

    if $ERR_FLAG; then
        text=$(gettext 'Please check all the messages above and fix them.')
        kz.errmsg "$text"
        exit 1
    else
        text=$(gettext 'Complete!')
        kz.infomsg "$text"
        exit 0
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
