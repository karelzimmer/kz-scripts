#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Distribute website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source ~/kz-scripts/usr/bin/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-deploy'
PROGRAM_DESC=$(gettext 'Distribute website including kz packages')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: kz deploy \$OPTIONS_USAGE")
readonly USAGE

HELP="$(gettext "Usage: kz deploy [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    ###########################################################################
    # Global variables
    ###########################################################################
    local -g ERR_FLAG=false

    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi
    become_root_check || exit $OK
    build
    check
    deploy
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          'kz deploy'         \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="kz deploy: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function builds package kz and website.
function build() {
    TEXT=$(gettext 'Build website including kz packages')...
    infomsg "$TEXT"

    # Call kz build.
    logmsg 'Calling kz build...'
    kz build || ERR_FLAG=true
    logmsg 'Called kz build.'
}


# This function performs checks.
function check() {
    check_repos || ERR_FLAG=true
    check_scripts_and_website
}


# This function performs the deploy.
function deploy() {
    upload_website
    install_package
}


# This function check the scripts and website.
function check_scripts_and_website() {
    TEXT=$(gettext 'Check scripts and website')...
    infomsg "$TEXT"

    # Call kz check.
    logmsg 'Calling kz check...'
    kz check || ERR_FLAG=true
    logmsg 'Called kz check.'
}


# This function uploads the website.
function upload_website() {
    local ftp_from=$HOME/kz-uploads/dist
    local ftp_host=server106.hosting2go.nl
    local ftp_login=$HOME/.$ftp_host'.login'
    local ftp_opts='--reverse --delete --verbose'
    local ftp_set='set ssl:verify-certificate no'
    local ftp_to=/httpdocs
    local ftp_user=kzimmer
    local ftp_x_cmd="mirror $ftp_opts $ftp_from $ftp_to; exit"
    local prompt=''

    TEXT=$(gettext 'Upload website')...
    infomsg "$TEXT"

    if ! [[ -f $ftp_login ]]; then
        prompt="$(gettext 'Password for') ftp://$ftp_host': "
        read -rp "$prompt" < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$ftp_login" |& $LOGCMD
    fi

    if ! lftp   --user      "$ftp_user"             \
                --password  "$(cat "$ftp_login")"   \
                -e          "$ftp_set; $ftp_x_cmd"  \
                "$ftp_host"; then
        # Force entering the password next time.
        rm --verbose "$ftp_login"*
        TEXT=$(gettext 'Website upload failed.')
        errmsg "$TEXT"
        ERR_FLAG=true
    fi
    # Make reply with password empty.
    REPLY=''
}


# This function installs package kz.
function install_package() {
    local dev=false
    local parm=''

    TEXT=$(gettext 'Install package')...
    infomsg "$TEXT"

    check_repos || dev=true

    logmsg 'Calling kz-get (via wget and bash)...'
    # Call kz-get via wget and bash as a regular user would do.
    cd "$HOME"
    if $dev; then
        parm='--dev'
    fi
    if ! (wget karelzimmer.nl/getkz; bash getkz "$parm"); then
        TEXT=$(gettext 'Install package kz failed.')
        errmsg "$TEXT"
    fi
    cd "$OLDPWD"
    logmsg 'Called kz-get (via wget and bash).'
}


# This function controls the termination of the script.
function term() {
    if $ERR_FLAG; then
        TEXT=$(gettext "Please check all the messages above and fix them if \
necessary.")
        errmsg "$TEXT"
        exit $ERR
    else
        TEXT=$(gettext 'Complete!')
        infomsg "$TEXT"
        exit $OK
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
