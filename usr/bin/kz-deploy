#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# Distribute kz package.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2009-2024.
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly    PROGRAM_NAME='kz-deploy'
readonly    PROGRAM_DESC=$(gettext 'Distribute kz package')
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly    USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly    HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"

readonly    DEB_REPO=$HOME/kz-deb
readonly    DOCS_REPO=$HOME/kz-docs
readonly    SCRIPTS_REPO=$HOME/kz-scripts
readonly    UPLOADS_REPO=$HOME/kz-uploads
readonly    UPLOADS_REPO_DISTDIR=$UPLOADS_REPO/dist


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        text=$USAGE_LINE
        msg_info "$text"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        msg_info "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    # shellcheck disable=SC2310
    if ! become_root_check; then
        return $OK
    fi
    check_repos
    build_package
    upload_website
    install_package
}


# This function check that the repos are in the desired state.
function check_repos {
    local   error_flag=false


    text=$(gettext 'Check that all repos are on branch main')...
    msg_info "$text"
    for repo in  $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$repo"
        if [[ $(git branch --show-current) != 'main' ]]; then
            text=$(gettext "Repo \$repo not on branch main.")
            msg_error "$text"
            git status
            error_flag=true
        fi
    done
    text=$(gettext 'Check that all repos are clean')...
    msg_info "$text"
    for repo in  $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$repo"
        # Prevent false positives.
        git status &> /dev/null
        if ! git diff-index --quiet HEAD; then
            text=$(eval_gettext "Repo \$repo is not clean.")
            msg_error "$text"
            git status
            error_flag=true
        fi
    done
    if $error_flag; then
        exit $ERROR
    fi
}


# This function builds package kz.
function build_package {
    text=$(gettext 'Build package and website')...
    msg_info "$text"
    # Call kz-build.
    text='Calling kz-build...'
    msg_log "$text"
    "$SCRIPTS_REPO"/usr/bin/kz-build || exit $ERROR
    text='Called kz-build.'
    msg_log "$text"
}


# This function uploads the website.
function upload_website {
    local   ftp_set='set ssl:verify-certificate no'
    local   ftp_from=$UPLOADS_REPO_DISTDIR
    local   ftp_to=/httpdocs
    local   ftp_opts='--reverse --delete --verbose'
    local   ftp_cmd="mirror $ftp_opts $ftp_from $ftp_to; exit"
    local   ftp_host=server106.hosting2go.nl
    local   ftp_user=kzimmer
    local   ftp_login=$HOME/.kz-$ftp_host
    local   prompt="$(gettext 'Password for') ftp://$ftp_host': "


    text=$(gettext 'Upload website')...
    msg_info "$text"
    if ! [[ -f $ftp_login ]]; then
        read -rp "$prompt" < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login" |& $LOGCMD
    fi
    if ! lftp   --user      "$ftp_user"             \
                --password  "$(cat "$ftp_login")"   \
                -e          "$ftp_set; $ftp_cmd"    \
                "$ftp_host"; then
        rm "$ftp_login"
        text=$(gettext 'Website upload failed.')
        msg_error "$text"
        exit $ERROR
    fi
    sleep 5
}


# This function installs package kz.
function install_package {
    # Call kz-getdeb (via wget and bash as a regular user would do).
    text=$(gettext 'Install package kz')...
    msg_info "$text"
    text='Calling kz-getdeb...'
    msg_log "$text"
    if ! wget --output-document=- karelzimmer.nl/kz 2> >($LOGCMD) | bash; then
        text=$(gettext 'Install package kz failed.')
        msg_error "$text"
        exit $ERROR
    fi
    text='Called kz-getdeb.'
    msg_log "$text"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
