#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Distribute website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz deploy'
PROGRAM_DESC=$(gettext 'Distribute website including kz packages')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: kz deploy \$OPTIONS_USAGE")
readonly USAGE

HELP="$(gettext "Usage: kz deploy [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''
    local -i RC=$OK

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$PROGRAM_NAME"     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$PROGRAM_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi

    if ! $DESKTOP; then
        TEXT="$PROGRAM_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local TEXT=''

    if ! $APT; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi
    become_root_check || exit $OK
    build
    check
    deploy
}


# This function builds package kz and website.
function build() {
    local TEXT=''

    TEXT=$(gettext 'Build website including kz packages')...
    infomsg "$TEXT"

    # Call kz build.
    logmsg 'Calling kz build...'
    kz build || ERR_FLAG=true
    logmsg 'Called kz build.'
}


# This function performs checks.
function check() {
    check_repos
    check_scripts_and_website
}


# This function performs the deploy.
function deploy() {
    upload_website
    install_package
}


# This function check that the repos are in the desired state.
function check_repos() {
    local DEB_REPO=$HOME/kz-deb
    local DOCS_REPO=$HOME/kz-docs
    local SCRIPTS_REPO=$HOME/kz-scripts
    local TEXT=''
    local UPLOADS_REPO=$HOME/kz-uploads

    TEXT=$(gettext 'Check that all repos are on branch main')...
    infomsg "$TEXT"

    for REPO in  $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$REPO"
        if [[ $(git branch --show-current) != 'main' ]]; then
            TEXT=$(eval_gettext "Repo \$REPO not on branch main.")
            errmsg "$TEXT"
            git status
            ERR_FLAG=true
        fi
    done

    TEXT=$(gettext 'Check that all repos are clean')...
    infomsg "$TEXT"

    for REPO in  $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$REPO"

        # Prevent false positives.
        git status |& $LOGCMD

        if ! git diff-index --quiet HEAD; then
            TEXT=$(eval_gettext "Repo \$REPO is not clean.")
            errmsg "$TEXT"
            git status
            ERR_FLAG=true
        fi
    done
}

# This function check the scripts and website.
function check_scripts_and_website() {
    local TEXT=''

    TEXT=$(gettext 'Check scripts and website')...
    infomsg "$TEXT"

    # Call kz check.
    logmsg 'Calling kz check...'
    kz check || ERR_FLAG=true
    logmsg 'Called kz check.'
}


# This function uploads the website.
function upload_website() {
    local FTP_FROM=$HOME/kz-uploads/dist
    local FTP_HOST=server106.hosting2go.nl
    local FTP_LOGIN=$HOME/.$FTP_HOST'.login'
    local FTP_OPTS='--reverse --delete --verbose'
    local FTP_SET='set ssl:verify-certificate no'
    local FTP_TO=/httpdocs
    local FTP_USER=kzimmer
    local FTP_X_CMD="mirror $FTP_OPTS $FTP_FROM $FTP_TO; exit"
    local PROMPT=''
    local TEXT=''

    TEXT=$(gettext 'Upload website')...
    infomsg "$TEXT"

    if [[ ! -f $FTP_LOGIN ]]; then
        PROMPT="$(gettext 'Password for') ftp://$FTP_HOST': "
        read -rp "$PROMPT" < /dev/tty
        printf '%s' "$REPLY" > "$FTP_LOGIN"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$FTP_LOGIN" |& $LOGCMD
    fi

    if ! lftp   --user      "$FTP_USER"             \
                --password  "$(cat "$FTP_LOGIN")"   \
                -e          "$FTP_SET; $FTP_X_CMD"  \
                "$FTP_HOST"; then
        # Force entering the password next time.
        rm --verbose "$FTP_LOGIN"*
        TEXT=$(gettext 'Website upload failed.')
        errmsg "$TEXT"
        ERR_FLAG=true
    fi
    # Empty REPLY with passowrd.
    REPLY=''
}


# This function installs package kz.
function install_package() {
    local TEXT=''

    TEXT=$(gettext 'Install package')...
    infomsg "$TEXT"

    logmsg 'Calling kz-get (via wget and bash)...'
    # Call kz-get via wget and bash as a regular user would do.
    cd "$HOME"
    if ! (wget karelzimmer.nl/getkz 2> >($LOGCMD); bash getkz); then
        TEXT=$(gettext 'Install package kz failed.')
        errmsg "$TEXT"
    fi
    cd "$OLDPWD"
    logmsg 'Called kz-get (via wget and bash).'
}


# This function controls the termination of the script.
function term_script() {
    if $ERR_FLAG; then
        TEXT=$(gettext "Please check all the messages above and fix them if \
necessary.")
        errmsg "$TEXT"
        exit $ERR
    else
        TEXT=$(gettext 'Complete!')
        infomsg "$TEXT"
        exit $OK
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    local ERR_FLAG=false

    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
