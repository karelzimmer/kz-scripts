#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Check scripts
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-check'
readonly PROGRAM_DESC=$(gettext 'Check scripts')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"


###############################################################################
# Variables
###############################################################################

declare error_flag=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]
    then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true
    do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]
    then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$text"
        exit $ERROR
    fi

    if ! $DESKTOP_ENVIRONMENT
    then
        text="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local script=''
    local scriptdir=''
    local scriptname=''
    local scripts_repo=$HOME/kz-scripts

    cd "$scripts_repo"
    text=$(gettext 'Check script:')
    infomsg "$text"

    check_gettext

    while read -r script
    do
        scriptdir=$(dirname "$(realpath "$script")")
        scriptname=$(basename "$script")
        infomsg "  $(realpath "$script")"
        case $scriptname in
            *.png )
                continue
                ;;
            *.json | *.policy )
                check_trailing_spaces
                continue
                ;;
            *.1 )
                check_trailing_spaces
                check_record_length
                ;;
            *.desktop )
                check_trailing_spaces
                check_record_length
                check_desktop_file_validation
                ;;
            kz_common.py )
                check_trailing_spaces
                check_tags
                check_pycodestyle
                ;;
            kz_common.sh )
                check_trailing_spaces
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh )
                check_trailing_spaces
                check_tags
                check_shellcheck
                ;;
            * )
                check_trailing_spaces
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done < <(
            find    .                           \
                    -type f                     \
                    -not -path './.git*'        \
                    -not -path '*/__pycache__*' \
                    -not -name kz.mo            \
                    -not -name kz.po            \
                    -not -name kz.pot           \
                    -not -name LICENSE          \
                    -not -name README.md        \
                    -print                      |
            sort
            )
    cd "$HOME"
}


# This function checks for gettext required files.
function check_gettext {
    local file=''

    # GNU gettext message catalogue template (.pot).
    file=$scripts_repo/usr/bin/kz.pot
    infomsg "  $file"
    if [[ ! -e $file ]]
    then
        text=$(eval_gettext "Gettext message catalog template \$file not found\
.")
        errormsg "    $text"
        error_flag=true
    fi

    # GNU gettext message catalogue (.po).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.po
    infomsg "  $file"
    if [[ ! -e $file ]]
    then
        text=$(eval_gettext "Gettext message catalog \$file not found.")
        errormsg "    $text"
        error_flag=true
    fi

    # GNU message catalog (.mo).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.mo
    infomsg "  $file"
    if [[ ! -e $file ]]
    then
        text=$(eval_gettext "Message catalog \$file not found.")
        errormsg "    $text"
        error_flag=true
    fi
}


# This function checks Shell and Python script code.
function check_code {
    local bash_script='#!''/usr/bin/bash'
    local python_script='#!''/usr/bin/python3'
    local tab_completion_script='# ''shellcheck shell=bash'

    if grep --quiet --line-regexp --regexp="$bash_script" "$script"
    then
        check_shellcheck
        check_script
    elif grep --quiet --line-regexp --regexp="$tab_completion_script" "$script"
        then
        check_shellcheck
    elif grep --quiet --line-regexp --regexp="$python_script" "$script"
    then
        check_pycodestyle
        check_script
    else
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
${RED}    $(gettext "Unknown script. Function check_code cannot check script c\
ode.")$NORMAL
"
        infomsg "$text"
        error_flag=true
    fi
}


# This function checks the operation of the script and associated files.
function check_script {
    local dir=''
    local gui_option='-''-''g''u''i'
    local root_script=' ''b''e''c''o''m''e''_''r''o''o''t''$'

    # Script.
    if ! "$scriptdir/$scriptname" --version |& $LOGCMD
    then
        text='    '$(eval_gettext "Script \$scriptname returned an error.")
        errormsg "$text"
        error_flag=true
    fi

    # Desktop file (Only with so-called GUI scripts).
    if grep --quiet --regexp="$gui_option" "$scriptdir/$scriptname"
    then
        dir=$scripts_repo/usr/share/applications
        if [[ ! -e $dir/$scriptname.desktop ]]
        then
            text='    '$(eval_gettext "Desktop configuration file \$dir/\$scri\
ptname.desktop not found.")
            errormsg "$text"
            error_flag=true
        fi
    fi

    # Tab-completion script (Only with so-called root scripts).
    dir=$scripts_repo/usr/share/bash-completion/completions
    if [[ ! -e $dir/$scriptname ]]
    then
        text='    '$(eval_gettext "Tab completion script \$dir/\$scriptname no\
t found.")
        errormsg "$text"
        error_flag=true
    fi

    # Manual page (EN + NL).
    dir=$scripts_repo/usr/share/man/man1
    if [[ ! -e $dir/$scriptname.1 ]]
    then
        text='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        errormsg "$text"
        error_flag=true
    fi
    dir=$scripts_repo/usr/share/man/nl/man1
    if [[ ! -e $dir/$scriptname.1 ]]
    then
        text='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        errormsg "$text"
        error_flag=true
    fi

    # PolicyKit action definition file (Only with so-called root scripts).
    if grep --quiet --regexp="$root_script" "$scriptdir/$scriptname"
    then
        dir=$scripts_repo/usr/share/polkit-1/actions
        if [[ ! -e $dir/nl.karelzimmer.$scriptname.policy ]]
        then
            text='    '$(eval_gettext "PolicyKit action definition file \$dir/\
nl.karelzimmer.\$scriptname.policy not found.")
            errormsg "$text"
            error_flag=true
        fi
    fi
}


# This function checks Python script code.
function check_pycodestyle {
    pycodestyle "$script" || error_flag=true
}


# This function checks on record length.
function check_record_length {
    local   -i  max_line_length=79
    local   -i  max_line_length_found=0
    local       python_script='#!''/usr/bin/python3'

    # Python is checked by pycodestyle.
    if grep --quiet --line-regexp --regexp="$python_script" "$script"
    then
        return $OK
    fi

    max_line_length_found=$(wc --max-line-length < "$script")
    if [[ $max_line_length_found -gt $max_line_length ]]
    then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
${RED}    $(eval_gettext "A line is longer than \$max_line_length (\$max_line_\
length_found).")$NORMAL
"
        infomsg "$text"
        error_flag=true
    fi
}


# This function validates the desktop file.
function check_desktop_file_validation {
    desktop-file-validate "$script"
}


# This function checks Shell script code.
function check_shellcheck {
    # Shellcheck doesn't work well with absolute filenames.
    cd "$scriptdir"
    shellcheck  --external-sources                  \
                --enable add-default-case           \
                --enable avoid-nullary-conditions   \
                --enable require-double-brackets    \
                "$scriptname"                       || error_flag=true
    cd "$scripts_repo"
}


# This function checks the existence of tags.
function check_tags {
    local bug='B''U''G'
    local fixme='F''I''X''M''E'
    local todo='T''O''D''O'

    if grep --quiet             \
            --regexp="$bug"     \
            --regexp="$fixme"   \
            --regexp="$todo"    \
            "$script"
    then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
    $(gettext 'Flagged annotation found.')
"
        infomsg "$text"
        grep    --line-number           \
                --regexp="$bug"         \
                --regexp="$fixme"       \
                --regexp="$todo"        \
                "$script"               |
        nl      --number-width=4        \
                --number-separator=''   \
                --body-numbering=n
    fi
}


# This function checks the existence of trailing spaces.
function check_trailing_spaces {
    if grep --quiet --regexp=' ''$' "$script"
    then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
${RED}    $(gettext 'End spaces found.')$NORMAL
"
        infomsg "$text"
        grep    --line-number --regexp=' ''$' "$script" |
        nl      --number-width=4 --number-separator='' --body-numbering=n
        error_flag=true
    fi
}


# This function controls the termination of the script.
function term_script {
    if $error_flag
    then
        text=$(gettext 'Fix all the messages above.')
        errormsg "$text"
        exit $ERROR
    else
        text="${GREEN}$PROGRAM_NAME $(gettext 'finished')$NORMAL"
        infomsg "$text"
        exit $OK
    fi
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
