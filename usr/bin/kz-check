#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# Checking scripts.
#
# This script performs checks that check scripts content and with shellcheck
# and pycodestyle.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2015-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat) || exit 1


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-check'
PROGRAM_DESC=$(gettext 'Checking scripts')
readonly PROGRAM_DESC
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly USAGE
HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the options and arguments.
function check_input {
    local -i rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || rc=$?
    if [[ $rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"
    process_option "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the input and starts the checking of the script files.
function process_input {
    local script=''
    local scriptdir=''
    local scriptname=''
    local scripts_repo=$HOME/kz-scripts

    cd "$scripts_repo"
    while read -r script; do
        scriptdir=$(realpath "$(dirname "$script")")
        scriptname=$(basename "$script")
        check_trailing_spaces
        case $scriptname in
            *.policy)
                continue
                ;;
            *.1|*.desktop)
                check_record_length
                ;;
            kz_common.py)
                check_tags
                check_pycodestyle
                ;;
            kz_common.sh)
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh)
                check_tags
                check_shellcheck
                ;;
            *)
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done < <(
            find .                      \
            -type f                     \
            -not -path './.git*'        \
            -not -path '*/__pycache__*' \
            -not -name kz.mo            \
            -not -name kz.po            \
            -not -name kz.pot           \
            -not -name LICENSE          \
            -not -name README.md        \
            -print                      |
            sort
            )
    cd "$HOME"
}


# This function checks Shell and Python script code.
function check_code {
    local bash_script='#!''/usr/bin/env bash'
    local python_script='#!''/usr/bin/env python3'
    local tab_completion_script='# ''shellcheck shell=bash'

    if grep --quiet --line-regexp --regexp="$bash_script" "$script"; then
        check_shellcheck
    elif grep --quiet --line-regexp --regexp="$tab_completion_script" "$script"
        then
        check_shellcheck
    elif grep --quiet --line-regexp --regexp="$python_script" "$script"; then
        check_pycodestyle
    else
        error "
In $scriptdir / $scriptname:
$(gettext "    Unknown script. Function check_code cannot check script code.")"
        maxrc=$ERROR
    fi
}


# This function checks Python script code.
function check_pycodestyle {
    local -i rc=0

    pycodestyle "$script" || rc=$?
    if [[ $rc -ne $OK ]]; then
        maxrc=$ERROR
    fi
}


# This function checks on record length.
function check_record_length {
    local -i max_line_length=79
    local -i max_line_length_found=0
    local python_script='#!''/usr/bin/python3'

    # Python is checked by pycodestyle.
    if grep --quiet --line-regexp --regexp="$python_script" "$script"; then
        return $OK
    fi

    max_line_length_found=$(wc --max-line-length < "$script")
    if  [[ $max_line_length_found -gt $max_line_length ]]; then
        error "
In $scriptdir / $scriptname:
$(eval_gettext "    A line is longer than \$max_line_length \
(\$max_line_length_found).")
"
        maxrc=$ERROR
    fi
}


# This function checks Shell script code.
function check_shellcheck {
    local -i rc=0

    # Shellcheck doesn't work well with absolute filenames.
    cd "$scriptdir"
    shellcheck  --enable=add-default-case           \
                --enable=avoid-nullary-conditions   \
                --enable=check-set-e-suppressed     \
                --enable=deprecate-which            \
                --enable=require-double-brackets    \
                --external-sources                  \
                "$scriptname"                       || rc=$?
    if [[ $rc -ne $OK ]]; then
        maxrc=$ERROR
    fi
    cd "$scripts_repo"
}


# This function checks the existence of tags.
function check_tags {
    local bug='B''U''G'
    local fixme='F''I''X''M''E'
    local todo='T''O''D''O'

    if grep --quiet             \
            --word-regexp       \
            --regexp="$bug"     \
            --regexp="$fixme"   \
            --regexp="$todo"    \
            "$script"; then
        warning "
In $scriptdir / $scriptname:
$(gettext '    Flagged annotation found.')

$(
    grep    --line-number           \
            --word-regexp           \
            --regexp="$bug"         \
            --regexp="$fixme"       \
            --regexp="$todo"        \
            "$script"               |
    nl      --number-width=4        \
            --number-separator=''   \
            --body-numbering=n
)
"
    fi
}


# This function checks the existence of trailing spaces.
function check_trailing_spaces {
    if grep --quiet --regexp=' ''$' "$script"; then
        error "
In $scriptdir / $scriptname:
$(gettext '    End spaces found.')
$(
    grep    --line-number --regexp=' ''$' "$script" |
    nl      --number-width=4  --number-separator='' --body-numbering=n
)
"
        maxrc=$ERROR
    fi
}


# This function controls the termination of the script.
function term_script {
    exit $maxrc
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
