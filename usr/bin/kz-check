#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Check scripts and website
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh as kz


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-check'
PROGRAM_DESC=$(gettext 'Check scripts and website')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz check [-h|--help] [-m|--manual] [-u|--usage] \
[-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz check [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='hmuv'
readonly OPTIONS_LONG='help,manual,usage,version'

# List NORMAL last here so that -x doesn't bork the display.
readonly BOLD='\033[1m'
readonly RED='\033[1;31m'
readonly NORMAL='\033[0m'


###############################################################################
# Globals
###############################################################################

declare ERR_FLAG=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local file=''
    local script=''
    local scriptdir=''
    local scriptname=''
    local scripts_repo=$HOME/kz-scripts
    local text=''

    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        text=$(gettext 'Must run on a Debian or Debian-based system.')
        kz.infomsg "$text"
        exit 1
    fi

    check_website

    text=$(gettext 'Check scripts (this may take a while)...')
    kz.infomsg "$text"

    check_gettext

    cd "$scripts_repo"
    while read -r script; do
        scriptdir=$(dirname "$(realpath "$script")")
        scriptname=$(basename "$script")
        file=$scriptdir/$scriptname
        kz.debugmsg "Process $script..."
        case $scriptname in
            *.gpg | *.png )
                continue
                ;;
            *.json | *.policy )
                check_trailing_spaces
                ;;
            *.1 | *.5 )
                check_trailing_spaces
                check_record_length
                ;;
            *.desktop )
                check_trailing_spaces
                check_record_length
                check_desktop_file_validation
                ;;
            kz_common.py )
                check_trailing_spaces
                check_tags
                check_pycodestyle
                check_mypy
                ;;
            kz_common.sh | kz-get | *-pkexec )
                # This includes polkit wrapper scripts.
                check_trailing_spaces
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh )
                check_trailing_spaces
                check_tags
                check_shellcheck
                ;;
            * )
                check_trailing_spaces
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done < <(
            find    .                           \
                    -type f                     \
                    -not -path './.git*'        \
                    -not -path '*/.mypy_cache*' \
                    -not -path '*/__pycache__*' \
                    -not -name kz.mo            \
                    -not -name kz.po            \
                    -not -name kz.pot           \
                    -not -name LICENSE          \
                    -not -name README.md        \
                    -print                      |
            sort
            )
    cd "$HOME"
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function checks the website for missing or not used files.
function check_website() {
    local text=''

    text=$(gettext 'Check website...')
    kz.infomsg "$text"

    # Call rchecklink.
    kz.logmsg 'Calling rchecklink...'
    rchecklink || ERR_FLAG=true
    kz.logmsg 'Called rchecklink.'
}


# This function checks for gettext required files.
function check_gettext() {
    local text=''

    # GNU gettext message catalogue template (.pot).
    file=$scripts_repo/usr/bin/kz.pot

    if ! [[ -f $file ]]; then
        kz.infomsg "
  $scripts_repo/usr/bin / kz.pot"
        text=$(eval_gettext "Gettext message catalog template \$file not \
found.")
        kz.errmsg "    $text"
        ERR_FLAG=true
    fi

    # GNU gettext message catalogue (.po).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.po

    if ! [[ -f $file ]]; then
        kz.infomsg "
  $scripts_repo/usr/share/locale/nl/LC_MESSAGES / kz.po"
        text=$(eval_gettext "Gettext message catalog \$file not found.")
        kz.errmsg "    $text"
        ERR_FLAG=true
    fi

    # GNU message catalog (.mo).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.mo

    if ! [[ -f $file ]]; then
        kz.infomsg "
  $scripts_repo/usr/share/locale/nl/LC_MESSAGES / kz.mo"
        text=$(eval_gettext "Message catalog \$file not found.")
        kz.errmsg "    $text"
        ERR_FLAG=true
    fi
}


# This function checks Shell and Python script code.
function check_code() {
    local bash_script='#!''/usr/bin/env bash'
    local python_script='#!''/usr/bin/env python3'
    local tab_completion_script='# ''shellcheck shell=bash'
    local text=''

    if grep --quiet --line-regexp "$bash_script" "$script"; then
        check_shellcheck
        check_script
    elif grep --quiet --line-regexp "$tab_completion_script" "$script"
        then
        check_shellcheck
    elif grep --quiet --line-regexp "$python_script" "$script"; then
        check_pycodestyle
        check_mypy
        check_script
    else
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(gettext "Unknown script. Function check_code cannot check script \
code.")$NORMAL
"
        kz.infomsg "$text"
        ERR_FLAG=true
    fi
}


# This function checks the operation of the script and associated files.
function check_script() {
    local dir=''
    local gui_option='-''-''g''u''i'
    local root_script=' ''b''e''c''o''m''e''$'
    local text=''

    # Script.
    if ! "$file" --usage |& $PROGRAM_LOGS; then
        kz.infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
        text='    '$(eval_gettext "Script \$scriptname --usage returned an \
error.")
        kz.errmsg "$text"
        ERR_FLAG=true
    fi

    # Desktop file (Only with so-called GUI scripts).
    if grep --quiet --regexp="$gui_option" "$file"; then
        dir=$scripts_repo/usr/share/applications

        if ! [[ -f $dir/$scriptname.desktop ]]; then
        kz.infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
            text='    '$(eval_gettext "Desktop configuration file \
\$dir/\$scriptname.desktop not found.")
            kz.errmsg "$text"
            ERR_FLAG=true
        fi
    fi

    # Tab-completion script (Only with so-called root scripts).
    dir=$scripts_repo/usr/share/bash-completion/completions

    if ! [[ -f $dir/$scriptname ]]; then
        text='    '$(eval_gettext "Tab completion script \$dir/\$scriptname \
not found.")
        kz.errmsg "$text"
        ERR_FLAG=true
    fi

    # Manual page (EN + NL).
    dir=$scripts_repo/usr/share/man/man1

    if ! [[ -f $dir/$scriptname.1 ]]; then
        text='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        kz.errmsg "$text"
        ERR_FLAG=true
    fi

    dir=$scripts_repo/usr/share/man/nl/man1

    if ! [[ -f $dir/$scriptname.1 ]]; then
        text='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        kz.errmsg "$text"
        ERR_FLAG=true
    fi

    # Polkit action definition file (Only with so-called root scripts).
    if grep --quiet "$root_script" "$file"; then
        dir=$scripts_repo/usr/share/polkit-1/actions

        if ! [[ -f $dir/nl.karelzimmer.$scriptname.policy ]]; then
            text='    '$(eval_gettext "Polkit action definition file \
\$dir/nl.karelzimmer.\$scriptname.policy not found.")
            kz.errmsg "$text"
            ERR_FLAG=true
        fi
    fi
}


# This function checks Python script code with pycodestyle.
function check_pycodestyle() {
    pycodestyle --show-source "$script" || ERR_FLAG=true
}


# This function checks Python script code with mypy.
function check_mypy() {
    # Mypy doesn't work well with absolute filenames.
    cd "$scriptdir"
    mypy --strict --no-error-summary "$scriptname" || ERR_FLAG=true
    cd "$scripts_repo"
}


# This function checks on record length.
function check_record_length() {
    local -i max_line_length_found=0
    local -i max_line_length=79
    local python_script='#!''/usr/bin/python3'
    local text=''

    # Python is checked by pycodestyle.
    if grep --quiet --line-regexp "$python_script" "$script"; then
        return 0
    fi

    max_line_length_found=$(wc --max-line-length < "$script")

    if [[ $max_line_length_found -gt $max_line_length ]]; then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(eval_gettext "A line is longer than \$max_line_length \
(\$max_line_length_found).")$NORMAL"
        kz.infomsg "$text"
        ERR_FLAG=true
    fi
}


# This function validates the desktop file.
function check_desktop_file_validation() {
    if ! desktop-file-validate "$script" | systemd-cat --identifier=kz-check
    then
        kz.infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
        desktop-file-validate "$script" || ERR_FLAG=true
    fi
}


# This function checks Shell script code.
function check_shellcheck() {
    # Shellcheck doesn't work well with absolute filenames.
    cd "$scriptdir"
    shellcheck  --external-sources                  \
                --enable add-default-case           \
                --enable check-unassigned-uppercase \
                --enable deprecate-which            \
                --enable quote-safe-variables       \
                --enable require-double-brackets    \
                "$scriptname"                       || ERR_FLAG=true
    cd "$scripts_repo"
}


# This function checks the existence of tags.
function check_tags() {
    local esc_bug='B''U''G'
    local esc_fixme='F''I''X''M''E'
    local esc_todo='T''O''D''O'
    local text=''

    if grep --quiet                 \
            --regexp="$esc_bug"     \
            --regexp="$esc_fixme"   \
            --regexp="$esc_todo"    \
            "$script"; then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
    $(gettext 'Flagged annotation found.')
"
        kz.infomsg "$text"
        grep    --line-number           \
                --regexp="$esc_bug"     \
                --regexp="$esc_fixme"   \
                --regexp="$esc_todo"    \
                "$script"               |
        nl      --number-width=4        \
                --number-separator=''   \
                --body-numbering=n
        ERR_FLAG=true
    fi
}


# This function checks the existence of trailing spaces.
function check_trailing_spaces() {
    local text=''

    if grep --quiet ' ''$' "$script"; then
        text="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(gettext 'End spaces found.')$NORMAL
"
        kz.infomsg "$text"
        grep    --line-number ' ''$' "$script" |
        nl      --number-width=4 --number-separator='' --body-numbering=n
        ERR_FLAG=true
    fi
}


# This function controls the termination of the script.
function term() {
    local text=''

    if $ERR_FLAG; then
        text=$(gettext "Please check all the messages above and fix them if \
necessary.")
        kz.errmsg "$text"
        exit 1
    else
        text=$(gettext 'Complete!')
        kz.infomsg "$text"
        exit 0
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
