#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Check scripts and website
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-check'
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"
PROGRAM_DESC=$(gettext 'Check scripts and website')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: kz check \$OPTIONS_USAGE")
readonly USAGE

HELP="$(gettext "Usage: kz check [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Globals
###############################################################################

declare ERR_FLAG=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local file=''
    local script=''
    local scriptdir=''
    local scriptname=''
    local scripts_repo=$HOME/kz-scripts

    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi

    check_website

    TEXT=$(gettext 'Check scripts (this may take a while)...')
    infomsg "$TEXT"

    check_gettext

    cd "$scripts_repo"
    while read -r script; do
        scriptdir=$(dirname "$(realpath "$script")")
        scriptname=$(basename "$script")
        file=$scriptdir/$scriptname
        case $scriptname in
            *.gpg | *.png )
                continue
                ;;
            *.json | *.policy )
                check_trailing_spaces
                continue
                ;;
            *.1 )
                check_trailing_spaces
                check_record_length
                ;;
            *.7 )
                check_trailing_spaces
                check_record_length
                ;;
            *.desktop )
                check_trailing_spaces
                check_record_length
                check_desktop_file_validation
                ;;
            kz_common.py )
                check_trailing_spaces
                check_tags
                check_pycodestyle
                check_mypy
                ;;
            kz_common.sh )
                check_trailing_spaces
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh )
                check_trailing_spaces
                check_tags
                check_shellcheck
                ;;
            * )
                check_trailing_spaces
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done < <(
            find    .                           \
                    -type f                     \
                    -not -path './.git*'        \
                    -not -path '*/.mypy_cache*' \
                    -not -path '*/__pycache__*' \
                    -not -name kz.mo            \
                    -not -name kz.po            \
                    -not -name kz.pot           \
                    -not -name LICENSE          \
                    -not -name README.md        \
                    -print                      |
            sort
            )
    cd "$HOME"
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          'kz check'          \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="kz check: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function checks the website for missing or not used files.
function check_website() {
    TEXT=$(gettext 'Check website...')
    infomsg "$TEXT"

    # Call rchecklink.
    logmsg 'Calling rchecklink...'
    rchecklink || ERR_FLAG=true
    logmsg 'Called rchecklink.'
}


# This function checks for gettext required files.
function check_gettext() {
    # GNU gettext message catalogue template (.pot).
    file=$scripts_repo/usr/bin/kz.pot

    if ! [[ -f $file ]]; then
        infomsg "
  $scripts_repo/usr/bin / kz.pot"
        TEXT=$(eval_gettext "Gettext message catalog template \$file not \
found.")
        errmsg "    $TEXT"
        ERR_FLAG=true
    fi

    # GNU gettext message catalogue (.po).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.po

    if ! [[ -f $file ]]; then
        infomsg "
  $scripts_repo/usr/share/locale/nl/LC_MESSAGES / kz.po"
        TEXT=$(eval_gettext "Gettext message catalog \$file not found.")
        errmsg "    $TEXT"
        ERR_FLAG=true
    fi

    # GNU message catalog (.mo).
    file=$scripts_repo/usr/share/locale/nl/LC_MESSAGES/kz.mo

    if ! [[ -f $file ]]; then
        infomsg "
  $scripts_repo/usr/share/locale/nl/LC_MESSAGES / kz.mo"
        TEXT=$(eval_gettext "Message catalog \$file not found.")
        errmsg "    $TEXT"
        ERR_FLAG=true
    fi
}


# This function checks Shell and Python script code.
function check_code() {
    local bash_script='#!''/usr/bin/env bash'
    local python_script='#!''/usr/bin/env python3'
    local tab_completion_script='# ''shellcheck shell=bash'

    if grep --quiet --line-regexp "$bash_script" "$script"; then
        check_shellcheck
        check_script
    elif grep --quiet --line-regexp "$tab_completion_script" "$script"
        then
        check_shellcheck
    elif grep --quiet --line-regexp "$python_script" "$script"; then
        check_pycodestyle
        check_mypy
        check_script
    else
        TEXT="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(gettext "Unknown script. Function check_code cannot check script \
code.")$NORMAL
"
        infomsg "$TEXT"
        ERR_FLAG=true
    fi
}


# This function checks the operation of the script and associated files.
function check_script() {
    local dir=''
    local gui_option='-''-''g''u''i'
    local root_script=' ''b''e''c''o''m''e''_''r''o''o''t''$'

    # Script.
    if ! "$file" --version |& $PROGRAM_LOGS; then
        infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
        TEXT='    '$(eval_gettext "Script \$scriptname --version returned an \
error.")
        errmsg "$TEXT"
        ERR_FLAG=true
    fi

    # Desktop file (Only with so-called GUI scripts).
    if grep --quiet --regexp="$gui_option" "$file"; then
        dir=$scripts_repo/usr/share/applications

        if ! [[ -f $dir/$scriptname.desktop ]]; then
        infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
            TEXT='    '$(eval_gettext "Desktop configuration file \
\$dir/\$scriptname.desktop not found.")
            errmsg "$TEXT"
            ERR_FLAG=true
        fi
    fi

    # Tab-completion script (Only with so-called root scripts).
    dir=$scripts_repo/usr/share/bash-completion/completions

    if ! [[ -f $dir/$scriptname ]]; then
        TEXT='    '$(eval_gettext "Tab completion script \$dir/\$scriptname \
not found.")
        errmsg "$TEXT"
        ERR_FLAG=true
    fi

    # Manual page (EN + NL).
    dir=$scripts_repo/usr/share/man/man1

    if ! [[ -f $dir/$scriptname.1 ]]; then
        TEXT='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        errmsg "$TEXT"
        ERR_FLAG=true
    fi

    dir=$scripts_repo/usr/share/man/nl/man1

    if ! [[ -f $dir/$scriptname.1 ]]; then
        TEXT='    '$(eval_gettext "Manual \$dir/\$scriptname.1 not found.")
        errmsg "$TEXT"
        ERR_FLAG=true
    fi

    # PolicyKit action definition file (Only with so-called root scripts).
    if grep --quiet "$root_script" "$file"; then
        dir=$scripts_repo/usr/share/polkit-1/actions

        if ! [[ -f $dir/nl.karelzimmer.$scriptname.policy ]]; then
            TEXT='    '$(eval_gettext "PolicyKit action definition file \
\$dir/nl.karelzimmer.\$scriptname.policy not found.")
            errmsg "$TEXT"
            ERR_FLAG=true
        fi
    fi
}


# This function checks Python script code with pycodestyle.
function check_pycodestyle() {
    pycodestyle "$script" || ERR_FLAG=true
}


# This function checks Python script code with mypy.
function check_mypy() {
    # Mypy doesn't work well with absolute filenames.
    cd "$scriptdir"
    mypy --no-error-summary "$scriptname" || ERR_FLAG=true
    cd "$scripts_repo"
}


# This function checks on record length.
function check_record_length() {
    local python_script='#!''/usr/bin/python3'
    local -i max_line_length_found=0
    local -i max_line_length=79

    # Python is checked by pycodestyle.
    if grep --quiet --line-regexp "$python_script" "$script"; then
        return $OK
    fi

    max_line_length_found=$(wc --max-line-length < "$script")

    if [[ $max_line_length_found -gt $max_line_length ]]; then
        TEXT="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(eval_gettext "A line is longer than \$max_line_length \
(\$max_line_length_found).")$NORMAL"
        infomsg "$TEXT"
        ERR_FLAG=true
    fi
}


# This function validates the desktop file.
function check_desktop_file_validation() {
    if ! desktop-file-validate "$script" | systemd-cat --identifier=kz-check
    then
        infomsg "
  $BOLD$scriptdir / $scriptname$NORMAL"
        desktop-file-validate "$script" || ERR_FLAG=true
    fi
}


# This function checks Shell script code.
function check_shellcheck() {
    # Shellcheck doesn't work well with absolute filenames.
    cd "$scriptdir"
    shellcheck  --external-sources                  \
                --enable add-default-case           \
                --enable require-double-brackets    \
                "$scriptname"                       || ERR_FLAG=true
    cd "$scripts_repo"
}


# This function checks the existence of tags.
function check_tags() {
    local esc_bug='#''B''U''G'
    local esc_fixme='#''F''I''X''M''E'
    local esc_todo='#''T''O''D''O'

    if grep --quiet                 \
            --regexp="$esc_bug"     \
            --regexp="$esc_fixme"   \
            --regexp="$esc_todo"    \
            "$script"; then
        TEXT="
${BOLD}In $scriptdir / $scriptname:$NORMAL
    $(gettext 'Flagged annotation found.')
"
        infomsg "$TEXT"
        grep    --line-number           \
                --regexp="$esc_bug"     \
                --regexp="$esc_fixme"   \
                --regexp="$esc_todo"    \
                "$script"               |
        nl      --number-width=4        \
                --number-separator=''   \
                --body-numbering=n
        ERR_FLAG=true
    fi
}


# This function checks the existence of trailing spaces.
function check_trailing_spaces() {
    if grep --quiet ' ''$' "$script"; then
        TEXT="
${BOLD}In $scriptdir / $scriptname:$NORMAL
$RED    $(gettext 'End spaces found.')$NORMAL
"
        infomsg "$TEXT"
        grep    --line-number ' ''$' "$script" |
        nl      --number-width=4 --number-separator='' --body-numbering=n
        ERR_FLAG=true
    fi
}


# This function controls the termination of the script.
function term() {
    if $ERR_FLAG; then
        TEXT=$(gettext "Please check all the messages above and fix them if \
necessary.")
        errmsg "$TEXT"
        exit $ERR
    else
        TEXT=$(gettext 'Complete!')
        infomsg "$TEXT"
        exit $OK
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
