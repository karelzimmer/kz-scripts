#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Check scripts and website
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare KZ_PROGRAM_NAME='kz-check'
declare KZ_PROGRAM_DESC
        KZ_PROGRAM_DESC=$(gettext 'Check scripts and website')
declare KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare KZ_USAGE
        KZ_USAGE=$(eval_gettext "Usage: \$KZ_DISPLAY_NAME \$KZ_OPTIONS_USAGE")

declare KZ_HELP
        KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_OPTIONS_HELP"

declare KZ_BIN_REPO=$HOME/bin
declare KZ_ERROR_FLAG=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                       \
                --options       "$KZ_OPTIONS_SHORT" \
                --longoptions   "$KZ_OPTIONS_LONG"  \
                --name          "$KZ_DISPLAY_NAME"  \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    if ! $KZ_DESKTOP_ENVIRONMENT; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $(gettext "no desktop environment \
available")
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local L_SCRIPT=''
    local L_SCRIPTDIR=''
    local L_SCRIPTNAME=''
    local L_SCRIPTS_REPO=$HOME/kz-scripts

    if ! $KZ_DEB; then
        KZ_TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    KZ_TEXT=$(gettext 'Check:')
    infomsg "$KZ_TEXT"

    check_gettext

    cd "$L_SCRIPTS_REPO"
    while read -r L_SCRIPT; do
        L_SCRIPTDIR=$(dirname "$(realpath "$L_SCRIPT")")
        L_SCRIPTNAME=$(basename "$L_SCRIPT")
        infomsg "  $(realpath "$L_SCRIPT")"
        case $L_SCRIPTNAME in
            *.png )
                continue
                ;;
            *.json | *.policy )
                check_trailing_spaces
                continue
                ;;
            *.1 )
                check_trailing_spaces
                check_record_length
                ;;
            *.desktop )
                check_trailing_spaces
                check_record_length
                check_desktop_file_validation
                ;;
            kz_common.py )
                check_trailing_spaces
                check_tags
                check_pycodestyle
                ;;
            kz_common.sh )
                check_trailing_spaces
                check_tags
                check_record_length
                check_shellcheck
                ;;
            *.sh )
                check_trailing_spaces
                check_tags
                check_shellcheck
                ;;
            * )
                check_trailing_spaces
                check_tags
                check_record_length
                check_code
                ;;
        esac
    done < <(
            find    .                           \
                    -type f                     \
                    -not -path './.git*'        \
                    -not -path '*/__pycache__*' \
                    -not -name kz.mo            \
                    -not -name kz.po            \
                    -not -name kz.pot           \
                    -not -name LICENSE          \
                    -not -name README.md        \
                    -print                      |
            sort
            )
    cd "$HOME"

    check_website
}


# This function checks the website for missing or not used files.
function check_website() {
    KZ_TEXT=$(gettext 'Check website')...
    infomsg "$KZ_TEXT"

    # Call rchecklink.
    logmsg 'Calling rchecklink...'
    "$KZ_BIN_REPO/rchecklink" || KZ_ERROR_FLAG=true
    logmsg 'Called rchecklink.'
}


# This function checks for gettext required files.
function check_gettext() {
    local L_FILE=''

    # GNU gettext message catalogue template (.pot).
    L_FILE=$L_SCRIPTS_REPO/usr/bin/kz.pot
    infomsg "  $L_FILE"

    if [[ ! -e $L_FILE ]]; then
        KZ_TEXT=$(eval_gettext "Gettext message catalog template \$L_FILE not \
found.")
        errormsg "    $KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    # GNU gettext message catalogue (.po).
    L_FILE=$L_SCRIPTS_REPO/usr/share/locale/nl/LC_MESSAGES/kz.po
    infomsg "  $L_FILE"

    if [[ ! -e $L_FILE ]]; then
        KZ_TEXT=$(eval_gettext "Gettext message catalog \$L_FILE not found.")
        errormsg "    $KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    # GNU message catalog (.mo).
    L_FILE=$L_SCRIPTS_REPO/usr/share/locale/nl/LC_MESSAGES/kz.mo
    infomsg "  $L_FILE"

    if [[ ! -e $L_FILE ]]; then
        KZ_TEXT=$(eval_gettext "Message catalog \$L_FILE not found.")
        errormsg "    $KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi
}


# This function checks Shell and Python script code.
function check_code() {
    local L_BASH_SCRIPT='#!''/usr/bin/env bash'
    local L_PYTHON_SCRIPT='#!''/usr/bin/env python3'
    local L_TAB_COMPLETION_SCRIPT='# ''shellcheck shell=bash'

    if grep --quiet --line-regexp --regexp="$L_BASH_SCRIPT" "$L_SCRIPT"; then
        check_shellcheck
        check_script
    elif    grep                                \
            --quiet                             \
            --line-regexp                       \
            --regexp="$L_TAB_COMPLETION_SCRIPT" \
            "$L_SCRIPT"
        then
        check_shellcheck
    elif    grep                        \
            --quiet                     \
            --line-regexp               \
            --regexp="$L_PYTHON_SCRIPT" \
            "$L_SCRIPT"; then
        check_pycodestyle
        check_script
    else
        KZ_TEXT="
${KZ_BOLD}In $L_SCRIPTDIR / $L_SCRIPTNAME:$KZ_NORMAL
${KZ_RED}    $(gettext "Unknown script. Function check_code cannot check \
script code.")$KZ_NORMAL
"
        infomsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi
}


# This function checks the operation of the script and associated files.
function check_script() {
    local L_DIR=''
    local L_GUI_OPTION='-''-''g''u''i'
    local L_ROOT_SCRIPT=' ''b''e''c''o''m''e''_''r''o''o''t''$'

    # Script.
    if ! "$L_SCRIPTDIR/$L_SCRIPTNAME" --version |& $LOGCMD; then
        KZ_TEXT='    '$(eval_gettext "Script \$L_SCRIPTNAME returned an \
error.")
        errormsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    # Desktop file (Only with so-called GUI scripts).
    if grep --quiet --regexp="$L_GUI_OPTION" "$L_SCRIPTDIR/$L_SCRIPTNAME"; then
        L_DIR=$L_SCRIPTS_REPO/usr/share/applications

        if [[ ! -e $L_DIR/$L_SCRIPTNAME.desktop ]]; then
            KZ_TEXT='    '$(eval_gettext "Desktop configuration file \
\$L_DIR/\$L_SCRIPTNAME.desktop not found.")
            errormsg "$KZ_TEXT"
            KZ_ERROR_FLAG=true
        fi

    fi

    # Tab-completion script (Only with so-called root scripts).
    L_DIR=$L_SCRIPTS_REPO/usr/share/bash-completion/completions

    if [[ ! -e $L_DIR/$L_SCRIPTNAME ]]; then
        KZ_TEXT='    '$(eval_gettext "Tab completion script \
\$L_DIR/\$L_SCRIPTNAME not found.")
        errormsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    # Manual page (EN + NL).
    L_DIR=$L_SCRIPTS_REPO/usr/share/man/man1

    if [[ ! -e $L_DIR/$L_SCRIPTNAME.1 ]]; then
        KZ_TEXT='    '$(eval_gettext "Manual \$L_DIR/\$L_SCRIPTNAME.1 not \
found.")
        errormsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    L_DIR=$L_SCRIPTS_REPO/usr/share/man/nl/man1

    if [[ ! -e $L_DIR/$L_SCRIPTNAME.1 ]]; then
        KZ_TEXT='    '$(eval_gettext "Manual \$L_DIR/\$L_SCRIPTNAME.1 not \
found.")
        errormsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi

    # PolicyKit action definition file (Only with so-called root scripts).
    if grep --quiet --regexp="$L_ROOT_SCRIPT" "$L_SCRIPTDIR/$L_SCRIPTNAME"
    then
        L_DIR=$L_SCRIPTS_REPO/usr/share/polkit-1/actions

        if [[ ! -e $L_DIR/nl.karelzimmer.$L_SCRIPTNAME.policy ]]; then
            KZ_TEXT='    '$(eval_gettext "PolicyKit action definition file \
\$L_DIR/nl.karelzimmer.\$L_SCRIPTNAME.policy not found.")
            errormsg "$KZ_TEXT"
            KZ_ERROR_FLAG=true
        fi

    fi
}


# This function checks Python script code.
function check_pycodestyle() {
    pycodestyle "$L_SCRIPT" || KZ_ERROR_FLAG=true
}


# This function checks on record length.
function check_record_length() {
    local   -i  L_MAX_LINE_LENGTH=79
    local   -i  L_MAX_LINE_LENGTH_FOUND=0
    local       L_PYTHON_SCRIPT='#!''/usr/bin/python3'

    # Python is checked by pycodestyle.
    if grep --quiet --line-regexp --regexp="$L_PYTHON_SCRIPT" "$L_SCRIPT"; then
        return $KZ_OK
    fi

    L_MAX_LINE_LENGTH_FOUND=$(wc --max-line-length < "$L_SCRIPT")

    if [[ $L_MAX_LINE_LENGTH_FOUND -gt $L_MAX_LINE_LENGTH ]]; then
        KZ_TEXT="
${KZ_BOLD}In $L_SCRIPTDIR / $L_SCRIPTNAME:$KZ_NORMAL
${KZ_RED}    $(eval_gettext "A line is longer than \$L_MAX_LINE_LENGTH \
(\$L_MAX_LINE_LENGTH_FOUND).")$KZ_NORMAL
"
        infomsg "$KZ_TEXT"
        KZ_ERROR_FLAG=true
    fi
}


# This function validates the desktop file.
function check_desktop_file_validation() {
    desktop-file-validate "$L_SCRIPT" || KZ_ERROR_FLAG=true
}


# This function checks Shell script code.
function check_shellcheck() {
    # Shellcheck doesn't work well with absolute filenames.
    cd "$L_SCRIPTDIR"
    shellcheck  --external-sources                  \
                --enable add-default-case           \
                --enable avoid-nullary-conditions   \
                --enable require-double-brackets    \
                "$L_SCRIPTNAME"                     || KZ_ERROR_FLAG=true
    cd "$L_SCRIPTS_REPO"
}


# This function checks the existence of tags.
function check_tags() {
    local L_ESC_BUG='#''B''U''G'
    local L_ESC_FIXME='#''F''I''X''M''E'
    local L_ESC_TODO='#''T''O''D''O'

    if grep --quiet                 \
            --regexp="$L_ESC_BUG"   \
            --regexp="$L_ESC_FIXME" \
            --regexp="$L_ESC_TODO"  \
            "$L_SCRIPT"; then
        KZ_TEXT="
${KZ_BOLD}In $L_SCRIPTDIR / $L_SCRIPTNAME:$KZ_NORMAL
    $(gettext 'Flagged annotation found.')
"
        infomsg "$KZ_TEXT"
        grep    --line-number           \
                --regexp="$L_ESC_BUG"   \
                --regexp="$L_ESC_FIXME" \
                --regexp="$L_ESC_TODO"  \
                "$L_SCRIPT"             |
        nl      --number-width=4        \
                --number-separator=''   \
                --body-numbering=n
    fi
}


# This function checks the existence of trailing spaces.
function check_trailing_spaces() {
    if grep --quiet --regexp=' ''$' "$L_SCRIPT"; then
        KZ_TEXT="
${KZ_BOLD}In $L_SCRIPTDIR / $L_SCRIPTNAME:$KZ_NORMAL
${KZ_RED}    $(gettext 'End spaces found.')$KZ_NORMAL
"
        infomsg "$KZ_TEXT"
        grep    --line-number --regexp=' ''$' "$L_SCRIPT" |
        nl      --number-width=4 --number-separator='' --body-numbering=n
        KZ_ERROR_FLAG=true
    fi
}


# This function controls the termination of the script.
function term_script() {
    if $KZ_ERROR_FLAG; then
        KZ_TEXT=$(gettext 'Fix all the messages above.')
        errormsg "$KZ_TEXT"
        exit $KZ_ERROR
    else
        KZ_TEXT="${KZ_GREEN}$KZ_DISPLAY_NAME $(gettext 'finished')$KZ_NORMAL"
        infomsg "$KZ_TEXT"
        exit $KZ_OK
    fi
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
