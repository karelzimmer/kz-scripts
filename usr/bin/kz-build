#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build website including package kz
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare     PROGRAM_NAME='kz-build'
declare     PROGRAM_DESC
            PROGRAM_DESC=$(gettext 'Build website including package kz')
declare     DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare     USAGE
            USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")

declare     HELP
            HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"

declare     DOCS_REPO=$HOME/kz-docs
declare     SCRIPTS_REPO=$HOME/kz-scripts

declare     DEB_REPO=$HOME/kz-deb
declare     DEB_REPO_APPDIR=$DEB_REPO/src
declare     DEB_REPO_DISTDIR=$DEB_REPO/dist
declare     DEB_NAME=kz_4.2.1_all.deb

declare     UPLOADS_REPO=$HOME/kz-uploads
declare     UPLOADS_REPO_APPDIR=$UPLOADS_REPO/src
declare     UPLOADS_REPO_DISTDIR=$UPLOADS_REPO/dist

declare -A  UPLOADS_SOURCES=(
            [kz-docs]=$DOCS_REPO
            )
declare -A  UPLOADS_TARGETS=(
            [kz-docs]=$UPLOADS_REPO_DISTDIR/assets/kz-docs
                [deb]=$UPLOADS_REPO_DISTDIR/assets/kz-deb
            )

declare -A  DEB_SOURCES=(
            [kz-scripts]=$SCRIPTS_REPO
                   [src]=$DEB_REPO_APPDIR
            )
declare -A  DEB_TARGETS=(
              [dist]=$DEB_REPO_DISTDIR
             [build]=$DEB_REPO_DISTDIR/etc
            [man_en]=$DEB_REPO_DISTDIR/usr/share/man/man1
            [man_nl]=$DEB_REPO_DISTDIR/usr/share/man/nl/man1
            )


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi

    if ! $DESKTOP_ENVIRONMENT; then
        TEXT="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    become_root_check || exit $OK
    generate_mo
    build_website
    build_package
    install_package
}


# This function generates the gettext binary Machine Object (.mo) file from the
# readable Portable Object (.po) file.
function generate_mo() {
    local LC_MESSAGES_DIR=''

    LC_MESSAGES_DIR=$HOME/kz-scripts/usr/share/locale/nl/LC_MESSAGES

    TEXT=$(gettext 'Generate .mo file')...
    infomsg "$TEXT"

    msgfmt --output-file="$LC_MESSAGES_DIR/kz.mo"  "$LC_MESSAGES_DIR/kz.po"
}


# This function builds the website.
function build_website() {
    local DIR=''
    local FILE=''
    local FILENAME=''

    TEXT=$(gettext 'Build website')...
    infomsg "$TEXT"

    # Populate kz-uploads/dist/ with modified files in kz-uploads/src/.
    rsync   --archive               \
            --verbose               \
            --checksum              \
            "$UPLOADS_REPO_APPDIR"/ \
            "$UPLOADS_REPO_DISTDIR" |& $LOGCMD

    # Make sure all necessary directories are available.
    for DIR in "${UPLOADS_TARGETS[@]}"; do
        mkdir --parents "$DIR" |& $LOGCMD
    done

    # Populate kz-uploads/dist/ with a PDF of modified files in repo kz-docs.
    cd "${UPLOADS_SOURCES[kz-docs]}"
    for FILE in *.odt *.txt; do
        FILENAME=${FILE%.*}

        if [[ $FILE -nt ${UPLOADS_TARGETS[kz-docs]}/$FILENAME.pdf ]]; then
            lowriter    --headless                              \
                        --convert-to pdf                        \
                        --outdir "${UPLOADS_TARGETS[kz-docs]}"  \
                        "$FILE"
        fi
    done
    cd "$HOME"
}


# This function builds package kz.
function build_package() {
    local BUILD_ID=''

    TEXT=$(gettext 'Build package')...
    infomsg "$TEXT"

    # Fill kz-deb/dist/ with kz-deb/src/.
    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${DEB_SOURCES[src]}"/  \
            "${DEB_TARGETS[dist]}"  |& $LOGCMD

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod --verbose 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO/usr/bin"/*  |& $LOGCMD
    chmod --verbose 'a-x' -- "$SCRIPTS_REPO/usr/bin"/*.*            |& $LOGCMD

    # Fill kz-deb/dist/ with repo kz-scripts.
    rsync   --archive                       \
            --verbose                       \
            --exclude='__pycache__'         \
            --exclude='LICENSE'             \
            --exclude='README.md'           \
            --exclude='.git*'               \
            --exclude='kz.po'               \
            --exclude='kz.pot'              \
            "${DEB_SOURCES[kz-scripts]}"/   \
            "${DEB_TARGETS[dist]}"          |& $LOGCMD

    # Compress man pages.
    gzip    --best                      \
            --force                     \
            "${DEB_TARGETS[man_en]}"/*  \
            "${DEB_TARGETS[man_nl]}"/*  |& $LOGCMD

    # Capture build id Debian package.
    BUILD_ID=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "${DEB_TARGETS[build]}" |& $LOGCMD
    printf '%s' "$BUILD_ID" > "${DEB_TARGETS[build]}/$PROGRAM_NAME.id"

    # Create Debian package in kz-uploads.
    fakeroot    dpkg-deb                            \
                --build                             \
                "$DEB_REPO_DISTDIR"                 \
                "${UPLOADS_TARGETS[deb]}/$DEB_NAME" |& $LOGCMD
}


# This function installs package kz.
function install_package() {
    TEXT=$(gettext 'Install package')...
    infomsg "$TEXT"
    check_on_ac_power
    check_package_manager
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --yes                           \
            "${UPLOADS_TARGETS[deb]}/$DEB_NAME"
}


# This function controls the termination of the script.
function term_script() {
    TEXT="${GREEN}$DISPLAY_NAME $(gettext 'finished')$NORMAL"
    infomsg "$TEXT"
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
