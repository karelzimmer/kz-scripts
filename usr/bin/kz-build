#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

if [[ -e ~/kz-scripts/usr/bin/kz_common.sh ]]; then
    source ~/kz-scripts/usr/bin/kz_common.sh as kz
else
    source kz_common.sh as kz
fi


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-build'
PROGRAM_DESC=$(gettext 'Build website including kz packages')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz build [-d|--dev] [-h|--help] [-m|--manual] \
[-u|--usage]
                [-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz build [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -d, --dev      build the development version of package kz')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='dhmuv'
readonly OPTIONS_LONG='dev,help,manual,usage,version'

# The following directories are used to build the website and packages.
readonly DOCS_REPO=$HOME/kz-docs
readonly SCRIPTS_REPO=$HOME/kz-scripts

readonly UPLOADS_REPO_SRCDIR=$HOME/kz-uploads/src
readonly UPLOADS_REPO_DISTDIR=$HOME/kz-uploads/dist

readonly DEB_REPO_SRCDIR=$HOME/kz-deb/src
readonly DEB_REPO_DISTDIR=$HOME/kz-deb/dist
readonly DEB_NAME=kz_4.2.1-1_all.deb
readonly DEB_DEV_NAME=kz-dev_4.2.1-1_all.deb

readonly RPM_REPO_SRCDIR=$HOME/kz-rpm/src
readonly RPM_REPO_DISTDIR=$HOME/kz-rpm/dist
readonly RPM_NAME=kz-4.2.1-1.noarch.rpm
readonly RPM_DEV_NAME=kz-dev-4.2.1-1.noarch.rpm


###############################################################################
# Globals
###############################################################################

declare OPTION_DEV=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local text=''

    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        text=$(gettext 'Must run on a Debian or Debian-based system.')
        kz.infomsg "$text"
        exit 1
    fi
    kz.become_check || exit 0
    sudo true
    build_website
    generate_gettext_files
    kz.check_repos || OPTION_DEV=true
    build_deb_package
    build_rpm_package
    install_deb_package
}


# This function checks the script input.
function check_input() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local parsed=''

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -d | --dev )
                OPTION_DEV=true
                shift
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function builds the website.
function build_website() {
    local file=''
    local filename=''
    local startdir=$PWD
    local text=''

    text=$(gettext 'Build website')...
    kz.infomsg "$text"

    # Populate kz-uploads/dist/ with modified files in kz-uploads/src/.
    rsync   --archive               \
            --verbose               \
            --checksum              \
            "$UPLOADS_REPO_SRCDIR/" \
            "$UPLOADS_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Populate kz-uploads/dist/ with a PDF of modified files in repo kz-docs.
    cd "$DOCS_REPO"
    for file in *.odt *.txt; do
        filename=${file%.*}

        if [[ $file -nt $UPLOADS_REPO_DISTDIR/assets/documents/$filename.pdf ]]
        then
            lowriter    --headless                                          \
                        --convert-to pdf                                    \
                        --outdir "$UPLOADS_REPO_DISTDIR/assets/documents"   \
                        "$file"
        fi
    done
    cd "$startdir"

    # Copy kz-get to kz-uploads.
    mkdir --parents "$UPLOADS_REPO_DISTDIR/assets/scripts" |& $PROGRAM_LOGS
    cp  --preserve                              \
        --verbose                               \
        "$SCRIPTS_REPO/usr/bin/kz-get"          \
        "$UPLOADS_REPO_DISTDIR/assets/scripts"  |& $PROGRAM_LOGS

}


# This function generates the following gettext files:
# 1. The readable Portable Object Template (POT) file from the source code in
#    repo kz-scripts,
# 2. the readable Portable Object (PO) file from the POT file, and
# 3. the binary Machine Object (MO) file from the PO file.
function generate_gettext_files() {
    local its_dir=$HOME/kz-scripts/usr/share/gettext/its
    local language=''
    local language_specification=''
    local lc_messages_dir=$SCRIPTS_REPO/usr/share/locale/nl/LC_MESSAGES
    local pot_dir=$SCRIPTS_REPO/usr/bin/
    local startdir=$PWD
    local text=''
    local gettext_dir=''
    local gettext_dirs="\
$HOME/kz-scripts/usr/bin \
$HOME/kz-scripts/usr/share/applications \
$HOME/kz-scripts/usr/share/polkit-1/actions
"
    local gettext_file=''

    text=$(gettext 'Generate gettext files')...
    kz.infomsg "$text"

    for gettext_dir in $gettext_dirs; do

        cd "$gettext_dir"

        for gettext_file in *; do
            if [[ -d $gettext_file ]]; then
                text="$gettext_dir/$gettext_file: is een map"
                kz.logmsg "$text"
                continue
            elif ! [[ -f $gettext_file ]]; then
                text="$gettext_dir/$gettext_file: is geen bestand"
                kz.logmsg "$text"
                continue
            elif [[ $gettext_file =~ .*.gpg$ ]]; then
                text="$gettext_dir/$gettext_file: is met GPG versleuteld"
                kz.logmsg "$text"
                continue
            elif [[ $gettext_file =~ .*.pot$ ]]; then
                text="$gettext_dir/$gettext_file: is een gettext POT-bestand"
                kz.logmsg "$text"
                continue
            fi

            if grep --quiet '^# shellcheck ' "$gettext_file"; then
                language='Shell'
                language_specification="--language=$language"
            elif grep --quiet '^import ' "$gettext_file"; then
                language='Python'
                language_specification="--language=$language"
            elif grep --quiet 'Desktop Entry' "$gettext_file"; then
                language='Desktop'
                language_specification="--language=$language"
            elif grep --quiet 'policyconfig' "$gettext_file"; then
                language='Policy'
                language_specification="--its=$its_dir/kz-policy.its"
            else
                text="$gettext_dir/$gettext_file: kan de taal niet bepalen"
                kz.errmsg "$text"
                continue
            fi

            kz.logmsg "$gettext_dir/$gettext_file:"

            # Option omit-header is used to omit the header in the
            # Portable Object Template (POT) file and is used to not update the
            # POT-Creation-Date if nothing else is changed in the POT file.
            # The header is not needed in the Portable Object Template (POT)
            # file, because it is generated from the source code.
            # The header is needed in the Portable Object (PO) file, because it
            # is used to provide information about the translation.
            xgettext    "$language_specification"   \
                        --join-existing             \
                        --add-location=file         \
                        --omit-header               \
                        --output="$pot_dir/kz.pot"  \
                        "$gettext_file"             |& $PROGRAM_LOGS

            msgmerge    --update                    \
                        --backup=none               \
                        --add-location=file         \
                        --previous                  \
                        "$lc_messages_dir/kz.po"    \
                        "$pot_dir/kz.pot"           |& $PROGRAM_LOGS
        done
    done
    cd "$startdir"

    msgfmt  --output-file="$lc_messages_dir/kz.mo"  \
            "$lc_messages_dir/kz.po"                |& $PROGRAM_LOGS
}


# This function builds Debian package kz.
function build_deb_package() {
    local build_id=''
    local text=''
    local to_build=''

    text=$(gettext 'Build Debian package')...
    kz.infomsg "$text"

    # Fill kz-deb/dist/ with kz-deb/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$DEB_REPO_SRCDIR/" \
            "$DEB_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod   --verbose                   \
            'u=rwx,g=rx,o=rx'           \
            --                          \
            "$SCRIPTS_REPO/usr/bin/"*   |& $PROGRAM_LOGS
    chmod   --verbose                   \
            'a-x'                       \
            --                          \
            "$SCRIPTS_REPO/usr/bin/"*.* |& $PROGRAM_LOGS

    # Fill kz-deb/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO/"        \
            "$DEB_REPO_DISTDIR"     |& $PROGRAM_LOGS

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$DEB_REPO_DISTDIR/usr/share/man/man1/"*    \
            "$DEB_REPO_DISTDIR/usr/share/man/man5/"*    \
            "$DEB_REPO_DISTDIR/usr/share/man/nl/man1/"* \
            "$DEB_REPO_DISTDIR/usr/share/man/nl/man5/"* |& $PROGRAM_LOGS

    # Capture build id Debian package (ISO 8601 YYYY-MM-DDTHH:MM:SS).
    build_id=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$DEB_REPO_DISTDIR/usr/share/doc/kz" |& $PROGRAM_LOGS
    printf '%s' "$build_id" > "$DEB_REPO_DISTDIR/usr/share/doc/kz/build.id"

    # Create Debian package in kz-uploads.
    # Debian 11: .deb uses unknown compression ==> -Z=xz.
    if $OPTION_DEV; then
        to_build="$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_DEV_NAME"
    else
        to_build="$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME"
    fi
    fakeroot    dpkg-deb            \
                --build             \
                -Z=xz               \
                "$DEB_REPO_DISTDIR" \
                "$to_build"         |& $PROGRAM_LOGS
}


# This function builds RPM package kz.
function build_rpm_package() {
    local build_id=''
    local startdir=$PWD
    local text=''
    local to_copy=''

    text=$(gettext 'Build RPM package')...
    kz.infomsg "$text"

    # Fill kz-rpm/dist/ with kz-rpm/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$RPM_REPO_SRCDIR/" \
            "$RPM_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod   --verbose                   \
            'u=rwx,g=rx,o=rx'           \
            --                          \
            "$SCRIPTS_REPO/usr/bin/"*   |& $PROGRAM_LOGS
    chmod   --verbose                   \
            'a-x'                       \
            --                          \
            "$SCRIPTS_REPO/usr/bin/"*.* |& $PROGRAM_LOGS

    # Fill kz-rpm/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO/"        \
            "$RPM_REPO_DISTDIR"     |& $PROGRAM_LOGS

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$RPM_REPO_DISTDIR/usr/share/man/man1/"*    \
            "$RPM_REPO_DISTDIR/usr/share/man/man5/"*    \
            "$RPM_REPO_DISTDIR/usr/share/man/nl/man1/"* \
            "$RPM_REPO_DISTDIR/usr/share/man/nl/man5/"* |& $PROGRAM_LOGS

    # Capture build id RPM package (ISO 8601 YYYY-MM-DDTHH:MM:SS).
    build_id=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$RPM_REPO_DISTDIR/usr/share/doc/kz" |& $PROGRAM_LOGS
    printf '%s' "$build_id" > "$RPM_REPO_DISTDIR/usr/share/doc/kz/build.id"

    # Create RPM package in kz-rpm/dist/.
    cd "$HOME"
    rpmbuild    -ba                                         \
                --build-in-place                            \
                --define                                    \
                "_topdir $RPM_REPO_DISTDIR/rpmbuild"        \
                "$RPM_REPO_DISTDIR/rpmbuild/SPECS/kz.spec"  |& $PROGRAM_LOGS
    cd "$startdir"

    if $OPTION_DEV; then
        to_copy=$UPLOADS_REPO_DISTDIR/assets/packages/$RPM_DEV_NAME
    else
        to_copy=$UPLOADS_REPO_DISTDIR/assets/packages/$RPM_NAME
    fi

    # Copy RPM package to kz-uploads.
    cp  --preserve                                          \
        --verbose                                           \
        "$RPM_REPO_DISTDIR/rpmbuild/RPMS/noarch/$RPM_NAME"  \
        "$to_copy"                                          |& $PROGRAM_LOGS
}


# This function installs Debian-package kz.
function install_deb_package() {
    local text=''
    local to_install=''

    text=$(gettext 'Install Debian package (this may take a while)...')
    kz.infomsg "$text"

    if $OPTION_DEV; then
        to_install=$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_DEV_NAME
    else
        to_install=$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME
    fi

    kz.check_debian_package_manager
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --assume-yes                    \
            "$to_install"                   |& $PROGRAM_LOGS
}


# This function controls the termination of the script.
function term() {
    local text=''
    if $OPTION_DEV; then
        text=$(gettext "Please note: the development version of the kz \
package is installed")
        kz.errmsg "$text"
    fi
    text=$(gettext 'Complete!')
    kz.infomsg "$text"
    exit 0
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
