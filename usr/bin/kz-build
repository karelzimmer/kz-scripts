#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source ~/kz-scripts/usr/bin/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-build'
PROGRAM_DESC=$(gettext 'Build website including kz packages')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz build [-h|--help] [-m|--manual] [-u|--usage] \
[-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz build [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='hmuv'
readonly OPTIONS_LONG='help,manual,usage,version'

readonly DOCS_REPO=$HOME/kz-docs
readonly SCRIPTS_REPO=$HOME/kz-scripts

readonly UPLOADS_REPO_SRCDIR=$HOME/kz-uploads/src
readonly UPLOADS_REPO_DISTDIR=$HOME/kz-uploads/dist

readonly DEB_REPO_SRCDIR=$HOME/kz-deb/src
readonly DEB_REPO_DISTDIR=$HOME/kz-deb/dist
readonly DEB_NAME=kz_4.2.1-1_all.deb
readonly DEB_DEV_NAME=kz-dev_4.2.1-1_all.deb

readonly RPM_REPO_SRCDIR=$HOME/kz-rpm/src
readonly RPM_REPO_DISTDIR=$HOME/kz-rpm/dist
readonly RPM_NAME=kz-4.2.1-1.noarch.rpm
readonly RPM_DEV_NAME=kz-dev-4.2.1-1.noarch.rpm


###############################################################################
# Globals
###############################################################################

declare DEV=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    check_input "$@"
    if ! grep --quiet debian /etc/os-release; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi
    become_root_check || exit $OK
    build_website
    generate_mo_file
    check_repos || DEV=true
    build_deb_package
    build_rpm_package
    install_deb_package
}


# This function checks the script input.
function check_input() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local parsed=''

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        infomsg "$USAGE"
                        exit $ERR
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }

    while true; do
        case $1 in
            -h | --help )
                process_option_help
                exit $OK
                ;;
            -m | --manual )
                process_option_manual
                exit $OK
                ;;
            -u | --usage )
                process_option_usage
                exit $OK
                ;;
            -v | --version )
                process_option_version
                exit $OK
                ;;
            -- )
                shift
                break
                ;;
            * )
                TEXT="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                errmsg "$TEXT"
                exit $ERR
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function builds the website.
function build_website() {
    local dir=''
    local file=''
    local filename=''
    local startdir=$PWD

    TEXT=$(gettext 'Build website')...
    infomsg "$TEXT"

    # Populate kz-uploads/dist/ with modified files in kz-uploads/src/.
    rsync   --archive               \
            --verbose               \
            --checksum              \
            "$UPLOADS_REPO_SRCDIR"/ \
            "$UPLOADS_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Make sure all necessary directories are available.
    for dir in "${UPLOADS_TARGETS[@]}"; do
        mkdir --parents "$dir" |& $PROGRAM_LOGS
    done

    # Populate kz-uploads/dist/ with a PDF of modified files in repo kz-docs.
    cd "$DOCS_REPO"
    for file in *.odt *.txt; do
        filename=${file%.*}

        if [[ $file -nt $UPLOADS_REPO_DISTDIR/assets/documents/$filename.pdf ]]
        then
            lowriter    --headless                                          \
                        --convert-to pdf                                    \
                        --outdir "$UPLOADS_REPO_DISTDIR/assets/documents"   \
                        "$file"
        fi
    done
    cd "$startdir"

    # Copy kz-get to kz-uploads.
    mkdir --parents "$UPLOADS_REPO_DISTDIR/assets/scripts" |& $PROGRAM_LOGS
    cp  --preserve                              \
        --verbose                               \
        "$SCRIPTS_REPO/usr/bin/kz-get"          \
        "$UPLOADS_REPO_DISTDIR/assets/scripts"  |& $PROGRAM_LOGS

}


# This function generates the gettext binary Machine Object (.mo) file from the
# readable Portable Object (.po) file.
function generate_mo_file() {
    local lc_messages_dir=$HOME/kz-scripts/usr/share/locale/nl/LC_MESSAGES

    msgfmt --output-file="$lc_messages_dir/kz.mo" "$lc_messages_dir/kz.po"
}


# This function builds Debian package kz.
function build_deb_package() {
    local build_id=''
    local to_build=''

    TEXT=$(gettext 'Build Debian package')...
    infomsg "$TEXT"

    # Fill kz-deb/dist/ with kz-deb/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$DEB_REPO_SRCDIR"/ \
            "$DEB_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod   --verbose                   \
            'u=rwx,g=rx,o=rx'           \
            --                          \
            "$SCRIPTS_REPO/usr/bin"/*   |& $PROGRAM_LOGS
    chmod   --verbose                   \
            'a-x'                       \
            --                          \
            "$SCRIPTS_REPO/usr/bin"/*.* |& $PROGRAM_LOGS

    # Fill kz-deb/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO"/        \
            "$DEB_REPO_DISTDIR"     |& $PROGRAM_LOGS

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$DEB_REPO_DISTDIR/usr/share/man/man1"/*    \
            "$DEB_REPO_DISTDIR/usr/share/man/man7"/*    \
            "$DEB_REPO_DISTDIR/usr/share/man/nl/man1"/* \
            "$DEB_REPO_DISTDIR/usr/share/man/nl/man7"/* |& $PROGRAM_LOGS

    # Capture build id Debian package (ISO 8601 YYYY-MM-DDTHH:MM:SS).
    build_id=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$DEB_REPO_DISTDIR/usr/share/doc/kz" |& $PROGRAM_LOGS
    printf '%s' "$build_id" > "$DEB_REPO_DISTDIR/usr/share/doc/kz/build.id"

    # Create Debian package in kz-uploads.
    # Debian 11: .deb uses unknown compression ==> -Z=xz.
    if $DEV; then
        to_build="$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_DEV_NAME"
    else
        to_build="$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME"
    fi
    fakeroot    dpkg-deb            \
                --build -Z=xz       \
                "$DEB_REPO_DISTDIR" \
                "$to_build"         |& $PROGRAM_LOGS
}


# This function builds RPM package kz.
function build_rpm_package() {
    local build_id=''
    local startdir=$PWD
    local to_copy=''

    TEXT=$(gettext 'Build RPM package')...
    infomsg "$TEXT"

    # Fill kz-rpm/dist/ with kz-rpm/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$RPM_REPO_SRCDIR"/ \
            "$RPM_REPO_DISTDIR" |& $PROGRAM_LOGS

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod   --verbose                   \
            'u=rwx,g=rx,o=rx'           \
            --                          \
            "$SCRIPTS_REPO/usr/bin"/*   |& $PROGRAM_LOGS
    chmod   --verbose                   \
            'a-x'                       \
            --                          \
            "$SCRIPTS_REPO/usr/bin"/*.* |& $PROGRAM_LOGS

    # Fill kz-rpm/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO"/        \
            "$RPM_REPO_DISTDIR"     |& $PROGRAM_LOGS

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$RPM_REPO_DISTDIR/usr/share/man/man1"/*    \
            "$RPM_REPO_DISTDIR/usr/share/man/man7"/*    \
            "$RPM_REPO_DISTDIR/usr/share/man/nl/man1"/* \
            "$RPM_REPO_DISTDIR/usr/share/man/nl/man7"/* |& $PROGRAM_LOGS

    # Capture build id RPM package (ISO 8601 YYYY-MM-DDTHH:MM:SS).
    build_id=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$RPM_REPO_DISTDIR/usr/share/doc/kz" |& $PROGRAM_LOGS
    printf '%s' "$build_id" > "$RPM_REPO_DISTDIR/usr/share/doc/kz/build.id"

    # Create RPM package in kz-rpm/dist/.
    cd "$HOME"
    rpmbuild    -ba                                         \
                --build-in-place                            \
                --define                                    \
                "_topdir $RPM_REPO_DISTDIR/rpmbuild"        \
                "$RPM_REPO_DISTDIR/rpmbuild/SPECS/kz.spec"  |& $PROGRAM_LOGS
    cd "$startdir"

    if $DEV; then
        to_copy=$UPLOADS_REPO_DISTDIR/assets/packages/$RPM_DEV_NAME
    else
        to_copy=$UPLOADS_REPO_DISTDIR/assets/packages/$RPM_NAME
    fi

    # Copy RPM package to kz-uploads.
    cp  --preserve                                          \
        --verbose                                           \
        "$RPM_REPO_DISTDIR/rpmbuild/RPMS/noarch/$RPM_NAME"  \
        "$to_copy"                                          |& $PROGRAM_LOGS
}


# This function installs Debian-package kz.
function install_deb_package() {
    local to_install=''

    TEXT=$(gettext 'Install Debian package kz')...
    infomsg "$TEXT"
    check_package_manager

    if $DEV; then
        to_install=$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_DEV_NAME
    else
        to_install=$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME
    fi

    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --assume-yes                    \
            "$to_install"                   |& $PROGRAM_LOGS
}


# This function controls the termination of the script.
function term() {
    if $DEV; then
        TEXT=$(gettext "Please note: the development version of the kz \
package is installed")
        errmsg "$TEXT"
    fi
    TEXT=$(gettext 'Complete!')
    infomsg "$TEXT"
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
