#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build website including kz packages
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

# Use the kz_common.sh version of the current path to itself.
source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

declare PROGRAM_NAME='kz-build'
declare PROGRAM_DESC
        PROGRAM_DESC=$(gettext 'Build website including kz packages')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE
        USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")

declare HELP
        HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"

declare DOCS_REPO=$HOME/kz-docs
declare SCRIPTS_REPO=$HOME/kz-scripts

declare UPLOADS_REPO_SRCDIR=$HOME/kz-uploads/src
declare UPLOADS_REPO_DISTDIR=$HOME/kz-uploads/dist

declare DEB_REPO_SRCDIR=$HOME/kz-deb/src
declare DEB_REPO_DISTDIR=$HOME/kz-deb/dist
declare DEB_NAME=kz_4.2.1-1_all.deb

declare RPM_REPO_SRCDIR=$HOME/kz-rpm/src
declare RPM_REPO_DISTDIR=$HOME/kz-rpm/dist
declare RPM_NAME=kz-4.2.1-1.noarch.rpm


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local       PARSED=''
    local   -i  RC=$OK

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi

    if ! $DESKTOP_ENVIRONMENT; then
        TEXT="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local TEXT=''

    if ! $APT; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi
    become_root_check || exit $OK
    generate_mo
    build_website
    build_deb_package
    build_rpm_package
    copy_scripts
    install_deb_package
}


# This function generates the gettext binary Machine Object (.mo) file from the
# readable Portable Object (.po) file.
function generate_mo() {
    local LC_MESSAGES_DIR=$HOME/kz-scripts/usr/share/locale/nl/LC_MESSAGES
    local TEXT=''

    TEXT=$(gettext 'Generate .mo file')...
    infomsg "$TEXT"
    msgfmt --output-file="$LC_MESSAGES_DIR/kz.mo" "$LC_MESSAGES_DIR/kz.po"
}


# This function builds the website.
function build_website() {
    local DIR=''
    local FILE=''
    local FILENAME=''
    local TEXT=''

    TEXT=$(gettext 'Build website')...
    infomsg "$TEXT"

    # Populate kz-uploads/dist/ with modified files in kz-uploads/src/.
    rsync   --archive               \
            --verbose               \
            --checksum              \
            "$UPLOADS_REPO_SRCDIR"/ \
            "$UPLOADS_REPO_DISTDIR" |& $LOGCMD

    # Make sure all necessary directories are available.
    for DIR in "${UPLOADS_TARGETS[@]}"; do
        mkdir --parents "$DIR" |& $LOGCMD
    done

    # Populate kz-uploads/dist/ with a PDF of modified files in repo kz-docs.
    cd "$DOCS_REPO"
    for FILE in *.odt *.txt; do
        FILENAME=${FILE%.*}

        if [[ $FILE -nt $UPLOADS_REPO_DISTDIR/assets/documents/$FILENAME.pdf ]]
        then
            lowriter    --headless                                          \
                        --convert-to pdf                                    \
                        --outdir "$UPLOADS_REPO_DISTDIR/assets/documents"   \
                        "$FILE"
        fi
    done
    cd "$HOME"
}


# This function builds Debian package kz.
function build_deb_package() {
    local BUILD_ID=''
    local TEXT=''

    TEXT=$(gettext 'Build Debian package')...
    infomsg "$TEXT"

    # Fill kz-deb/dist/ with kz-deb/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$DEB_REPO_SRCDIR"/ \
            "$DEB_REPO_DISTDIR" |& $LOGCMD

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod --verbose 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO/usr/bin"/*  |& $LOGCMD
    chmod --verbose 'a-x' -- "$SCRIPTS_REPO/usr/bin"/*.*            |& $LOGCMD

    # Fill kz-deb/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO"/        \
            "$DEB_REPO_DISTDIR"     |& $LOGCMD

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$DEB_REPO_DISTDIR/usr/share/man/man1"/*    \
            "$DEB_REPO_DISTDIR/usr/share/man/nl/man1"/* |& $LOGCMD

    # Capture build id Debian package.
    BUILD_ID=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$DEB_REPO_DISTDIR/usr/share/doc/kz" |& $LOGCMD
    printf  '%s'        \
            "$BUILD_ID" > "$DEB_REPO_DISTDIR/usr/share/doc/kz/$PROGRAM_NAME.id"

    # Create Debian package in kz-uploads.
    # Debian 11: .deb uses unknown compression ==> -Z=xz.
    fakeroot    dpkg-deb                                            \
                --build                                             \
                -Z=xz                                               \
                "$DEB_REPO_DISTDIR"                                 \
                "$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME"   |& $LOGCMD
}


# This function builds RPM package kz.
function build_rpm_package() {
    local BUILD_ID=''
    local TEXT=''

    TEXT=$(gettext 'Build RPM package')...
    infomsg "$TEXT"

    # Fill kz-rpm/dist/ with kz-rpm/src/.
    rsync   --archive           \
            --delete            \
            --verbose           \
            "$RPM_REPO_SRCDIR"/ \
            "$RPM_REPO_DISTDIR" |& $LOGCMD

    # Make sure the permissions are correct for the sync with repo kz-scripts.
    chmod --verbose 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO/usr/bin"/*  |& $LOGCMD
    chmod --verbose 'a-x' -- "$SCRIPTS_REPO/usr/bin"/*.*            |& $LOGCMD

    # Fill kz-rpm/dist/ with repo kz-scripts.
    rsync   --archive               \
            --verbose               \
            --exclude='.mypy_cache' \
            --exclude='__pycache__' \
            --exclude='LICENSE'     \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --exclude='kz.po'       \
            --exclude='kz.pot'      \
            "$SCRIPTS_REPO"/        \
            "$RPM_REPO_DISTDIR"     |& $LOGCMD

    # Compress man pages.
    gzip    --best                                      \
            --force                                     \
            "$RPM_REPO_DISTDIR/usr/share/man/man1"/*    \
            "$RPM_REPO_DISTDIR/usr/share/man/nl/man1"/* |& $LOGCMD

    # Capture build id RPM package.
    BUILD_ID=$(date '+%Y-%m-%dT%H:%M:%S')
    mkdir --parents "$RPM_REPO_DISTDIR/usr/share/doc/kz" |& $LOGCMD
    printf  '%s'        \
            "$BUILD_ID" > "$RPM_REPO_DISTDIR/usr/share/doc/kz/$PROGRAM_NAME.id"

    # Create RPM package in kz-rpm/dist/.
    rpmbuild    -ba                                             \
                --build-in-place                                \
                --define "_topdir $RPM_REPO_DISTDIR/rpmbuild"   \
                "$RPM_REPO_DISTDIR/rpmbuild/SPECS/kz.spec"      |& $LOGCMD

    # Copy RPM package to kz-uploads.
    cp  --preserve                                          \
        --verbose                                           \
        "$RPM_REPO_DISTDIR/rpmbuild/RPMS/noarch/$RPM_NAME"  \
        "$UPLOADS_REPO_DISTDIR/assets/packages"             |& $LOGCMD
}


# This function copies kz-get and kz_common.sh to kz-uploads.
function copy_scripts() {
    mkdir --parents "$UPLOADS_REPO_DISTDIR/assets/scripts" |& $LOGCMD
    cp  --preserve                              \
        --verbose                               \
        "$SCRIPTS_REPO/usr/bin/kz-get"          \
        "$SCRIPTS_REPO/usr/bin/kz_common.sh"    \
        "$UPLOADS_REPO_DISTDIR/assets/scripts"  |& $LOGCMD
}


# This function installs Debian-package kz.
function install_deb_package() {
    local TEXT

    TEXT=$(gettext 'Install package')...
    infomsg "$TEXT"
    check_apt_package_manager

    # Copied from kz-get:
    KZ_DEB_LOCAL_FILE=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX.deb")
    # Progress indicator with growing [=>, [==>, etc. as long as the kz deb
    # local file exists, i.e. installation is in progress.
    # If something fails, kz_common.sh will remove the kz deb local file and
    # other files upon exit.
    printf '[ '
    while test -e "$KZ_DEB_LOCAL_FILE"; do
        printf '\b%s' '=>'
        sleep 1
    done &

    sudo    DEBIAN_FRONTEND=noninteractive                      \
            apt-get                                             \
            reinstall                                           \
            --assume-yes                                        \
            "$UPLOADS_REPO_DISTDIR/assets/packages/$DEB_NAME"   |& $LOGCMD

    rm --force --verbose "$KZ_DEB_LOCAL_FILE"|& $LOGCMD
    # Progress indicator with [=>, [==>, etc. ends like [====]100%.
    printf '\b%s\n' '=]100%'
}


# This function controls the termination of the script.
function term_script() {
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
