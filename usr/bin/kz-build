#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Build package kz.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2021-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

readonly    PROGRAM_NAME='kz-build'
            PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly    PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat --identifie=$PROGRAM_NAME)


###############################################################################
# Constants
###############################################################################

            PROGRAM_DESC=$(gettext 'Build package kz')
readonly    PROGRAM_DESC
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

            USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly    USAGE
            HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly    HELP

readonly    DOCS_REPO=$HOME/kz-docs
readonly    SCRIPTS_REPO=$HOME/kz-scripts

readonly    DEB_REPO=$HOME/kz-deb
readonly    DEB_REPO_APPDIR=$DEB_REPO/app
readonly    DEB_REPO_DISTDIR=$DEB_REPO/dist
readonly    DEB_NAME=kz_2.4.7_all.deb

readonly    UPLOADS_REPO=$HOME/kz-uploads
readonly    UPLOADS_REPO_APPDIR=$UPLOADS_REPO/app
readonly    UPLOADS_REPO_DISTDIR=$UPLOADS_REPO/dist

readonly -A UPLOADS_SOURCES=(
            [kz-docs]=$DOCS_REPO
            )
readonly -A UPLOADS_TARGETS=(
            [kz-docs]=$UPLOADS_REPO_DISTDIR/assets/kz-docs
                [deb]=$UPLOADS_REPO_DISTDIR/assets/kz
            )

readonly -A DEB_SOURCES=(
         [kz-scripts]=$SCRIPTS_REPO
                [app]=$DEB_REPO_APPDIR
            )
readonly -A DEB_TARGETS=(
               [dist]=$DEB_REPO_DISTDIR
              [build]=$DEB_REPO_DISTDIR/usr/local/etc
             [man_en]=$DEB_REPO_DISTDIR/usr/share/man/man1
             [man_nl]=$DEB_REPO_DISTDIR/usr/share/man/nl/man1
            )


###############################################################################
# Variables
###############################################################################

declare     error_flag=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    # shellcheck disable=SC2310
    if check_user_sudo; then
        sudo true
    else
        msg_info "$(eval_gettext 'Already performed by the administrator.')"
        term_script
    fi

    msg_info "${bold}$(gettext 'Check - pre')${normal} ($DISPLAY_NAME)"
    check_repos
    check_scripts
    msg_info "
${bold}$(gettext 'Build')${normal} ($DISPLAY_NAME)"
    build_uploads
    generate_mo
    build_deb
    msg_info "
${bold}$(gettext 'Install')${normal} ($DISPLAY_NAME)"
    install_package
    msg_info "
${bold}$(gettext 'Check - post')${normal} ($DISPLAY_NAME)"
    run_ivp
    check_website
}


# This function check that the repos are in the desired state.
function check_repos {
    msg_info "$(gettext 'Check that all repos are on branch main...')"
    for repo in $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$repo"
        if [[ $(git branch --show-current) != 'main' ]]; then
            msg_warning "$(eval_gettext "Repo \$repo not on branch main.")"
        fi
    done
    msg_info "$(gettext 'Check that all repos are clean...')"
    for repo in $DEB_REPO $DOCS_REPO $SCRIPTS_REPO $UPLOADS_REPO; do
        cd "$repo"
        # Prevent false positives.
        git status &> /dev/null
        if ! git diff-index --quiet HEAD; then
            msg_warning "$(eval_gettext "Repo \$repo is not clean.")"
            git status
        fi
    done
}


# This function check the scripts.
function check_scripts {
    msg_info "$(gettext 'Check scripts (kz check)...')"
    # Call kz-check.
    "$SCRIPTS_REPO"/usr/bin/kz check || error_flag=true
}


# This function builds the website.
function build_uploads {
    local   file=''
    local   filename=''

    msg_info "$(gettext 'Build website...')"

    # Make sure the permissions are correct for the sync.
    chmod 'u=rwx,g=rx,o=rx' -- "$SCRIPTS_REPO"/usr/bin/*
    chmod 'a-x' -- "$SCRIPTS_REPO"/usr/bin/*.*

    # Populate kz-uploads/dist/ with modified files in kz-uploads/app/.
    rsync   --archive               \
            --verbose               \
            --checksum              \
            "$UPLOADS_REPO_APPDIR"/ \
            "$UPLOADS_REPO_DISTDIR" |& $logcmd

    # Make sure all necessary directories are available.
    for dir in "${UPLOADS_TARGETS[@]}"; do
        mkdir --parents "$dir" |& $logcmd
    done

    # Populate kz-uploads/dist/ with a PDF of modified files in repo kz-docs.
    cd "${UPLOADS_SOURCES[kz-docs]}"
    for file in *.odt *.txt; do
        filename=${file%.*}
        if [[ $file -nt "${UPLOADS_TARGETS[kz-docs]}/$filename".pdf ]]; then
            lowriter    --headless                              \
                        --convert-to pdf                        \
                        --outdir "${UPLOADS_TARGETS[kz-docs]}"  \
                        "$file"
        fi
    done
    cd "$HOME"
}


# This function generates the gettext binary Machine Object (.mo) file from the
# readable Portable Object (.po) file.
function generate_mo {
    local   lc_messages=''

    lc_messages=/home/"$USER"/kz-scripts/usr/share/locale/nl/LC_MESSAGES
    msg_info "$(gettext 'Generate .mo file (mogen)...')"
    msgfmt --output-file="$lc_messages"/kz.mo  "$lc_messages"/kz.po
}


# This function builds package kz.
function build_deb {
    local   build_id=''
    local   file=''

    msg_info "$(gettext 'Build package...')"

    # Fill kz-deb/dist/ with kz-deb/app/.
    rsync   --archive               \
            --delete                \
            --verbose               \
            --exclude='README.md'   \
            --exclude='.git*'       \
            --delete-excluded       \
            "${DEB_SOURCES[app]}"/  \
            "${DEB_TARGETS[dist]}"  |& $logcmd

    # Fill kz-deb/dist/ with repo kz-scripts.
    rsync   --archive                       \
            --verbose                       \
            --exclude='__pycache__'         \
            --exclude='LICENSE'             \
            --exclude='README.md'           \
            --exclude='.git*'               \
            --exclude='kz.po'               \
            --exclude='kz.pot'              \
            "${DEB_SOURCES[kz-scripts]}"/   \
            "${DEB_TARGETS[dist]}"          |& $logcmd

    # Compress man pages.
    gzip    --best                      \
            --force                     \
            "${DEB_TARGETS[man_en]}"/*  \
            "${DEB_TARGETS[man_nl]}"/*  |& $logcmd

    # Capture build id Debian package.
    build_id=$(date '+%Y-%m-%dT%H:%M')
    mkdir --parents "${DEB_TARGETS[build]}" |& $logcmd
    rm --force "${DEB_TARGETS[build]}"/$PROGRAM_NAME* |& $logcmd
    printf '%s' "$build_id" > "${DEB_TARGETS[build]}"/$PROGRAM_NAME.id

    # Create Debian package in kz-uploads.
    # Debian supports xz as maximum compression, the default Ubuntu is zst.
    check_for_active_updates
    fakeroot    dpkg-deb                            \
                --build                             \
                -Zxz                                \
                "$DEB_REPO_DISTDIR"                 \
                "${UPLOADS_TARGETS[deb]}/$DEB_NAME" |& $logcmd
}


# This function installs package kz.
function install_package {
    msg_info "$(gettext 'Install package...')"
    check_for_active_updates
    # allow downgrades from version 365 to 2.4.7.
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            install                         \
            --allow-downgrades              \
            --reinstall                     \
            --yes                           \
            "${UPLOADS_TARGETS[deb]}/$DEB_NAME" |& $logcmd
}


# This function performs an installation verification procedure (IVP).
function run_ivp {
    msg_info "$(gettext 'Run IVP (kz ivp)...')"
    # Call kz-ivp.
    kz ivp || error_flag=true
}


# This function checks the website for missing or not used files.
function check_website {
    msg_info "$(gettext 'Check website (rchecklink)...')"
    # Call rchecklink.
    rchecklink || error_flag=true
}


# This function controls the termination of the script.
function term_script {
    if $error_flag; then
        msg_error "
$(gettext 'Fix all the messages above.')"
        exit $ERROR
    else
        exit $OK
    fi
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
