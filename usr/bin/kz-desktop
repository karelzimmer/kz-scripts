#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Change GNOME
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

declare PROGRAM_NAME='kz-gnome'
declare PROGRAM_DESC
        PROGRAM_DESC=$(gettext 'Change GNOME')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE
        USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--addaft FAVORITE] \
[-b|--addbef FAVORITE]
                [-d|--delete FAVORITE] [-l|--list] [-r|--reset]
                \$OPTIONS_USAGE")"

declare X_OPTIONS_HELP
        X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -a, --addaft FAVORITE
                 add FAVORITE at the end')
$(gettext '  -b, --addbef FAVORITE
                 add FAVORITE at the beginning')
$(gettext '  -d, --delete FAVORITE
                 delete FAVORITE')
$(gettext '  -l, --list     show favorites')
$(gettext '  -r, --reset    set favorites on default values')"

declare HELP
        HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

declare X_OPTIONS_SHORT='a:b:d:lr'
declare X_OPTIONS_LONG=',addaft:,addbef:,delete:,list,reset'


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local       PARSED=''
    local   -i  RC=$OK

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local       TEXT=''
    declare -g  FAVORITE_ARGUMENT=''
    declare -g  OPTION_ADDAFT=false
    declare -g  OPTION_ADDBEF=false
    declare -g  OPTION_DELETE=false
    declare -g  OPTION_LIST=false
    declare -g  OPTION_RESET=false

    while true; do
        case $1 in
            -a | --addaft )
                if $OPTION_ADDAFT; then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_ADDAFT=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -b | --addbef )
                if $OPTION_ADDBEF; then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_ADDBEF=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -d | --delete )
                if $OPTION_DELETE; then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_DELETE=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -l | --list )
                OPTION_LIST=true
                shift
                ;;
            -r | --reset )
                OPTION_RESET=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi

    if ! $DESKTOP_ENVIRONMENT; then
        TEXT="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local TEXT=''

    if ! $GNOME; then
        TEXT=$(gettext 'For GNOME desktop environments only.')
        infomsg "$TEXT"
        exit $OK
    fi

    DESKTOPFILE=$FAVORITE_ARGUMENT.desktop

    if $OPTION_ADDAFT; then
        process_OPTION_ADDAFT
    elif $OPTION_ADDBEF; then
        process_OPTION_ADDBEF
    elif $OPTION_DELETE; then
        process_OPTION_DELETE
    elif $OPTION_LIST; then
        process_OPTION_LIST
    elif $OPTION_RESET; then
        process_OPTION_RESET
    else
        capture_gnome_changes
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_OPTION_ADDAFT () {
    local FAVORITE_APPS=''

    FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $FAVORITE_APPS = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$FAVORITE_APPS" | grep --quiet --regexp="$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$FAVORITE_APPS" |
            cut --delimiter=']' --fields=1
            ), '$DESKTOPFILE']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_OPTION_ADDBEF () {
    local FAVORITE_APPS=''

    FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $FAVORITE_APPS = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$FAVORITE_APPS" | grep --quiet --regexp="$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE', $(
                printf '%s' "$FAVORITE_APPS" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_OPTION_DELETE () {
    local FAVORITE_APPS=''

    FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $FAVORITE_APPS = '@as []' ]]; then
        :
    elif [[ $FAVORITE_APPS = [$DESKTOPFILE] ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else
        gsettings set org.gnome.shell favorite-apps "$(
            printf  '%s' "$FAVORITE_APPS"                   |
            sed     --expression="s/'$DESKTOPFILE', //g"    |
            sed     --expression="s/, '$DESKTOPFILE'//"
        )"
    fi
}


# This feature lists the favorite apps in the dash/dock.
function process_OPTION_LIST () {
    local TEXT=''

    TEXT="$(gettext 'Favorite apps:')
$(gsettings get org.gnome.shell favorite-apps)"
    infomsg "$TEXT"
}


# This function resets the favorites to the factory settings.
function process_OPTION_RESET () {
    gsettings reset org.gnome.shell favorite-apps
}


# This function records a change made through the GNOME desktop environment.
function capture_gnome_changes() {
    local CONFIG_A_FILE=''
    local CONFIG_B_FILE=''
    local TEXT=''

    CONFIG_A_FILE=$(mktemp -t "$PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$CONFIG_A_FILE"

    TEXT=$(gettext 'Now make the change in the desktop environment.')
    infomsg "$TEXT"

    wait_for_enter

    CONFIG_B_FILE=$(mktemp -t "$PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$CONFIG_B_FILE"

    report_database_changes "$CONFIG_A_FILE" "$CONFIG_B_FILE"

    rm --verbose "$CONFIG_A_FILE" "$CONFIG_B_FILE" |& $LOGCMD
}


# This function stores the GNOME configuration database.
function save_configuration_database() {
    # shellcheck disable=SC2034
    local FASE=${1:-unknown}
    local OUTPUT_FILE=${2:-unknown}
    local TEXT=''

    gsettings list-recursively > "$OUTPUT_FILE" 2> >($LOGCMD)

    sort    --unique                \
            --output="$OUTPUT_FILE" \
            "$OUTPUT_FILE"

    TEXT=$(eval_gettext "Config database content captured (\$FASE).")
    infomsg "$TEXT"
}


# This function reports the changes to the GNOME configuration database.
function report_database_changes() {
    local OUTPUT_FILE_1=${1:-unknown}
    local OUTPUT_FILE_2=${2:-unknown}
    local TEXT=''

    TEXT="\n$(gettext "CHANGEs in the configuration database,
< is the old setting (A),
> is the new setting (B):")
"
    TEXT+=$(
        diff "$OUTPUT_FILE_1" "$OUTPUT_FILE_2" | grep --regexp='[>|<]' || true
        )
    TEXT+="\n\n$(gettext 'When CHANGEs, execute: gsettings set CHANGE')"
    infomsg "$TEXT"
}


# This function controls the termination of the script.
function term_script() {
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
