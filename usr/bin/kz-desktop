#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Change desktop environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-desktop'
PROGRAM_DESC=$(gettext 'Change desktop environment')
readonly PROGRAM_DESC

USAGE="$(eval_gettext "Usage: kz desktop [-a|--addaft <favorite>] \
[-b|--addbef <favorite>]
                  [-d|--delete <favorite>] [-l|--list] [-r|--reset]
                  \$OPTIONS_USAGE")"
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -a, --addaft <favorite>
                 add favorite at the end')
$(gettext '  -b, --addbef <favorite>
                 add favorite at the beginning')
$(gettext '  -d, --delete <favorite>
                 delete favorite')
$(gettext '  -l, --list     show favorites')
$(gettext '  -r, --reset    set favorites on default values')"
readonly X_OPTIONS_HELP

HELP="$(gettext "Usage: kz desktop [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"
readonly HELP

readonly X_OPTIONS_SHORT='a:b:d:lr'
readonly X_OPTIONS_LONG=',addaft:,addbef:,delete:,list,reset'


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    ###########################################################################
    # Global variables
    ###########################################################################
    local -g FAVORITE_ARGUMENT=''
    local -g OPTION_ADDAFT=false
    local -g OPTION_ADDBEF=false
    local -g OPTION_DELETE=false
    local -g OPTION_LIST=false
    local -g OPTION_RESET=false

    local favorite_apps=''

    check_input "$@"
    if ! gsettings list-keys org.gnome.shell |& $LOGCMD; then
        TEXT=$(gettext "No such schema 'org.gnome.shell'.")
        infomsg "$TEXT"
        exit $OK
    else
        favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
        DESKTOPFILE=$FAVORITE_ARGUMENT.desktop
    fi

    if $OPTION_ADDAFT; then
        process_OPTION_ADDAFT
    elif $OPTION_ADDBEF; then
        process_OPTION_ADDBEF
    elif $OPTION_DELETE; then
        process_OPTION_DELETE
    elif $OPTION_LIST; then
        process_OPTION_LIST
    elif $OPTION_RESET; then
        process_OPTION_RESET
    else
        capture_gnome_changes
    fi
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "kz desktop"                        \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -a | --addaft )
                if $OPTION_ADDAFT; then
                    TEXT="kz desktop: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_ADDAFT=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -b | --addbef )
                if $OPTION_ADDBEF; then
                    TEXT="kz desktop: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_ADDBEF=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -d | --delete )
                if $OPTION_DELETE; then
                    TEXT="kz desktop: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_DELETE=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -l | --list )
                OPTION_LIST=true
                shift
                ;;
            -r | --reset )
                OPTION_RESET=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="kz desktop: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi

    if ! [[ ${DISPLAY-} ]]; then
        TEXT="kz desktop: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $OK
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_OPTION_ADDAFT () {
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$favorite_apps" | grep --quiet "$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$favorite_apps" |
            cut --delimiter=']' --fields=1
            ), '$DESKTOPFILE']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_OPTION_ADDBEF () {
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$favorite_apps" | grep --quiet "$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE', $(
                printf '%s' "$favorite_apps" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_OPTION_DELETE () {
    if [[ $favorite_apps = '@as []' ]]; then
        :
    elif [[ $favorite_apps = [$DESKTOPFILE] ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else
        gsettings set org.gnome.shell favorite-apps "$(
            printf  '%s' "$favorite_apps"                   |
            sed     --expression="s/'$DESKTOPFILE', //g"    |
            sed     --expression="s/, '$DESKTOPFILE'//"
        )"
    fi
}


# This feature lists the favorite apps in the dash/dock.
function process_OPTION_LIST () {
    TEXT="$(gettext 'Favorite apps:')
$(gsettings get org.gnome.shell favorite-apps)"
    infomsg "$TEXT"
}


# This function resets the favorites to the factory settings.
function process_OPTION_RESET () {
    gsettings reset org.gnome.shell favorite-apps
}


# This function records a change made through the desktop environment.
function capture_gnome_changes() {
    local config_a_file=''
    local config_b_file=''

    config_a_file=$(mktemp -t "$PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$config_a_file"

    TEXT=$(gettext 'Now make the change in the desktop environment.')
    infomsg "$TEXT"

    wait_for_enter

    config_b_file=$(mktemp -t "$PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$config_b_file"

    report_database_changes "$config_a_file" "$config_b_file"

    rm --verbose "$config_a_file" "$config_b_file" |& $LOGCMD
}


# This function stores the desktop configuration database.
function save_configuration_database() {
    # shellcheck disable=SC2034
    local fase=${1:-unknown}
    local output_file=${2:-unknown}

    gsettings list-recursively > "$output_file" 2> /dev/null

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    TEXT=$(eval_gettext "Config database content captured (\$fase).")
    infomsg "$TEXT"
}


# This function reports the changes to the desktop configuration database.
function report_database_changes() {
    local output_file_1=${1:-unknown}
    local output_file_2=${2:-unknown}

    TEXT="
$(gettext "Changes in the configuration database,
< is the old setting (A),
> is the new setting (B):")
$(diff "$output_file_1" "$output_file_2" | grep '[>|<]' || true)

$(gettext 'Use "gsettings set <change>" for changes.')"
    infomsg "$TEXT"
}


# This function controls the termination of the script.
function term() {
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
