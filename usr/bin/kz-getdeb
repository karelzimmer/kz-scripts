#!/bin/bash
# shellcheck shell=bash
###############################################################################
# Install kz package.
#
# Written in 2016 by Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Public Domain Dedication <https://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Constants
###############################################################################

declare program_name='kz-getdeb'
declare program_desc
program_desc=$(gettext 'Install kz package')
declare display_name=${program_name/kz-/kz }


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

function init_script {
    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail

    export TEXTDOMAIN=kz
    export TEXTDOMAINDIR=/usr/share/locale

    # shellcheck source=/dev/null
    source /usr/bin/gettext.sh
}


function check_input {
    if [[ "$*" ]]; then
        printf  "$display_name: $*: %s\n%s\n" \
                "$(gettext 'arguments are not allowed')" \
                "$(eval_gettext "Usage: \$display_name \$options_usage")"
        # For kz ivp, exit 0 instead of exit 1.
        exit 0
    fi
    if ! sudo true; then
        term_script
    fi
}


function process_input {
    printf '%s\n' '* REPAIR *'
    repair_system
    printf '\n%s\n' '* UPDATE *'
    update_system
    printf '\n%s\n' '* INSTALL *'
    install_package
    printf '\n%s\n' '* CLEANUP *'
    cleanup_system
    printf '\n%s' '* FINISH *'
}


function repair_system {
    check_dpkgd_snapd
    sudo dpkg --configure --pending
    check_dpkgd_snapd
    sudo apt-get update --fix-missing
    check_dpkgd_snapd
    sudo apt-get install --fix-broken
}


function check_dpkgd_snapd {
    local -i dpkg_wait=10
    local text
    text=$(eval_gettext \
            "Wait \${dpkg_wait}s for another package manager to finish...")

    if find /snap/core/*/var/cache/debconf/config.dat &> /dev/null; then
        # System with snaps.
        while sudo  fuser                                               \
                    /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock \
                    /var/cache/debconf/config.dat                       \
                    /snap/core/*/var/cache/debconf/config.dat           \
                    &> /dev/null; do
            printf '%s\n' "$text"
            sleep $dpkg_wait
        done
    else
        # System without snaps.
        while sudo  fuser                                               \
                    /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock \
                    /var/cache/debconf/config.dat                       \
                    &> /dev/null; do
            printf '%s\n' "$text"
            sleep $dpkg_wait
        done
    fi
}


function update_system {
    check_dpkgd_snapd
    sudo apt-get update
    check_dpkgd_snapd
    sudo apt-get upgrade --yes
}


function install_package {
    local site_deb='https://karelzimmer.nl/downloads/kz/kz_365_all.deb'
    local temp_deb=''

    temp_deb=$(mktemp -t "$program_name-XXXXXXXXXX.deb")
    # Prevent: N: ... user '_apt'. - pkgAcquire::Run (13: Permission denied)
    chmod o+r "$temp_deb"
    wget --output-document="$temp_deb" $site_deb
    check_dpkgd_snapd
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --yes                           \
            "$temp_deb"
    rm "$temp_deb"
}


function cleanup_system {
    check_dpkgd_snapd
    sudo apt-get autoclean --yes
    check_dpkgd_snapd
    sudo apt-get autoremove --yes
    snap_cleanup
}

function snap_cleanup {
    # shellcheck disable=SC2034
    snap list --all |
    while read -r name ver rev trk pub notes; do
        if [[ $notes == *uitgeschakeld* || $notes == *disabled* ]]; then
            sudo snap remove "$name" --revision="$rev"
        fi
    done
}


function term_script {
    local title
    title=$(gettext 'Finished')
    local text
    text=$(gettext "Package kz has been successfully installed.

Now follow the steps as described
in the Checklist installation.

Checklist installation can be found
on the site https://karelzimmer.nl,
under Linux.

Type 'exit' to close this window.")

    clear -x
    TERM=ansi whiptail  --backtitle "$display_name - $program_desc" \
                        --title     "$title"                        \
                        --infobox   "$text"                         \
                        16 47

    # Do not delete kz and kz.1 due to scripts and manuals with the same name.
    rm --force kz.{2..99}
    # But do delete them if in HOME, as described in Checklist install.
    cd "$HOME" || exit 1
    rm --force kz kz.1

    exit 0
}




###############################################################################
# Script
###############################################################################

function main {
    init_script
    check_input "$@"
    process_input
    term_script
}

main "$@"

