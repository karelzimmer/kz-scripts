#!/usr/bin/env bash
# shellcheck shell=bash source=kz_common.sh
###############################################################################
# Install kz package.
#
# This script downloads and installs package kz.
# Use 'man kz getdeb' for more information.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2016-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat --identifier=kz_common.sh)

# If source kz_common.sh has failed, e.g. in wget kz and bash kz sequence.
export TEXTDOMAIN=kz
export TEXTDOMAINDIR=/usr/share/locale
source /usr/bin/gettext.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-getdeb'
PROGRAM_DESC=$(gettext 'Install kz package')
readonly PROGRAM_DESC
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

# shellcheck disable=SC2034
USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly USAGE
HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$OPTIONS_HELP"
readonly HELP

###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local files_found
    files_found=$(ls -C kz.{1..99} 2> /dev/null || true)
    local -i rc=0
    local parsed=''

    # If the kz.{1..99} files exist, possible after multiple wget's, clean them
    # up and start over.
    if [[ -n $files_found ]]; then
        text=$(gettext 'files are deleted, please start again')
        printf "$DISPLAY_NAME: kz $files_found %s\n$USAGE_LINE\n" "$text"
        cleanup
        exit $ERROR
    fi

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || rc=$?
    if [[ $rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    # If source kz_common.sh has failed, e.g. in wget kz and bash kz sequence.
    if type process_common_options &> /dev/null
    then
        process_common_options "$@"
    fi

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    local text=''

    if groups "$USER" | grep --quiet --regexp='sudo'; then
        sudo true
    else
        text="$(gettext 'Already performed by the administrator.')"
        printf '%s\n' "${green}$text${normal}"
        term_script
    fi
    install_package
}


# This function performs a cleanup.
function cleanup {
    # Do not delete kz and kz.1 because of script and manual with the same
    # name.
    rm --force kz.{2..99}
    # But do delete them if in HOME, as described in Checklist installation.
    rm --force "$HOME"/kz "$HOME"/kz.1
}


# This function installs package kz.
function install_package {
    local site_deb='https://karelzimmer.nl/assets/kz/kz_365_all.deb'
    local temp_deb=''

    temp_deb=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX.deb")
    # Prevent "N: ... user '_apt'. - pkgAcquire::Run (13: Permission denied)".
    chmod o+r "$temp_deb"
    printf "${bold}%s${normal} ($DISPLAY_NAME)\n" "$(gettext 'Download')"
    wget --output-document="$temp_deb" $site_deb

    printf "${bold}%s${normal} ($DISPLAY_NAME)\n" "$(gettext 'Install')"
    check_for_active_updates
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --yes                           \
            "$temp_deb"
    rm "$temp_deb"
}


# This function checks for active updates and waits for the next check.
function check_for_active_updates {
    local -i check_wait=10
    local text
    text=$(eval_gettext \
            "Wait \${check_wait}s for another package manager to finish...")

    while sudo  fuser                                       \
                /snap/core/*/var/cache/debconf/config.dat   \
                /var/cache/apt/archives/lock                \
                /var/cache/debconf/config.dat               \
                /var/lib/apt/lists/lock                     \
                /var/lib/dpkg/lock                          \
                /var/lib/dpkg/lock-frontend                 \
                &> /dev/null; do
        printf '%s\n' "$text"
        sleep $check_wait
    done
}


# This function controls the termination of the script.
function term_script {
    local title
    title=$(gettext 'Finished')
    local text
    text=$(gettext "Package kz has been successfully installed.

Now follow the steps as described
in the Checklist installation.

Checklist installation can be found
on the site https://karelzimmer.nl,
under Linux.

Type 'exit' to close this window.")

    if type gnome-shell &> /dev/null; then
        clear -x
        TERM=ansi whiptail  --backtitle "$DISPLAY_NAME" \
                            --title     "$title"        \
                            --infobox   "$text"         \
                            16 47
    else
        printf "%s\n" "$(gettext 'Finished')."
    fi
    cleanup
    exit 0
}


###############################################################################
# Main Script
###############################################################################

function main {
    # If source kz_common.sh has failed, e.g. in wget kz and bash kz sequence.
    if type init_script &> /dev/null; then
        init_script "$@"
    else
        set -o errexit
    fi
    check_input "$@"
    process_input
    term_script
}

main "$@"
