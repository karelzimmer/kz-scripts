#!/bin/bash
###############################################################################
# Install kz package.
#
# Written in 2016 by Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Public Domain Dedication <https://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Constants
###############################################################################

declare program_name='kz-getdeb'
#declare program_desc
#program_desc=$(gettext 'Install kz package')
declare display_name=${program_name/kz-/kz }


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

function init_script {
    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
}


function check_input {
    # clear -x
    if ! sudo true; then
        term_script
    fi
}


function process_input {
    install_package
}


function install_package {
    local site_deb='https://karelzimmer.nl/downloads/kz/kz_365_all.deb'
    local temp_deb=''

    temp_deb=$(mktemp -t "$program_name-XXXXXXXXXX.deb")
    wget --output-document="$temp_deb" $site_deb
    # kz_common.check_dpkgd_snapd
    sudo    DEBIAN_FRONTEND=noninteractive  \
            apt-get                         \
            reinstall                       \
            --yes                           \
            "$temp_deb"                    
    rm "$temp_deb"
}


function term_script {
    title=$(gettext 'Finished')
    text=$(gettext "Package kz has been successfully installed.

Now follow the steps as described
in the Installation Checklist.

Checklist installation can be found
on the site https://karelzimmer.nl,
under Linux.

Type 'exit' to close this window.")
    TERM=ansi whiptail  --backtitle "$display_name" \
                        --title     "$title"        \
                        --infobox   "$text"         \
                        16 47
    if kz_common.developer check; then
        info "$(gettext '* DEVELOPER *')"
        check_dependencies
        download_website
        pull_repos
        info '* status repos (gitstat)...'
        /home/"$USER"/bin/gitstat
    fi
    exit 0
}


function check_dependencies {
    local escape='gettext'

    info "$(gettext '* check dependencies...')"
    # Install ghostscript for kz-build <man-pag>.pdf (ps2pdf).
    kz_common.check_dpkgd_snapd
    # Remove known lines from output.
    sudo    apt-get                                 \
            install                                 \
            --yes                                   \
            curl                                    \
            fakeroot                                \
            $escape                                 \
            ghostscript                             \
            git                                     \
            jq                                      \
            lftp                                    \
            nmap                                    \
            pycodestyle                             \
            python3-pycodestyle                     \
            python3-autopep8                        \
            python3-pip                             \
            python-is-python3                       \
            w3c-linkchecker                         |
            sed '/ is reeds de nieuwste versie /d'  |
            sed '/ is already the newest version /d'
    sudo ln --force --relative --symbolic /usr/bin/pycodestyle /usr/bin/pep8
    sudo ln --force --relative --symbolic /usr/bin/pip3 /usr/bin/pip
    # Debian package is old, snap is newer.
    kz_common.check_dpkgd_snapd
    sudo snap install shellcheck
    kz_common.check_dpkgd_snapd
    sudo snap install --classic code
}


function download_website {
    local ftp_set='set ssl:verify-certificate no'
    local ftp_from=/httpdocs
    local ftp_to=$HOME/kz-uploads/dist
    local ftp_opts='--delete --verbose'
    local ftp_exclude='--exclude icaclient_20.04.0.21_amd64.deb'
    local ftp_cmd="mirror $ftp_exclude $ftp_opts $ftp_from $ftp_to; exit"
    local ftp_host=server106.hosting2go.nl
    local ftp_user=kzimmer
    local ftp_login=$HOME/.kz-$ftp_host

    info '* download website (lftp)...'
    if ! [[ -f $ftp_login ]]; then
        # < /dev/tty want FD 1 al in gebruik bij 'wget --output-document=-...'.
        read -rsp "$(gettext 'Password for') ftp://$ftp_host': " < /dev/tty
        printf '%s\n' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login"
    fi
    if ! lftp   --user "$ftp_user"                  \
                --password "$(cat "$ftp_login")"    \
                -e "$ftp_set; $ftp_cmd"             \
                "$ftp_host"; then
        rm  "$ftp_login"
        info "$(gettext 'Website download failed.')"
        return  1
    fi
}


function pull_repos {
    local bin_repo=/home/"$USER"/bin

    git config --global user.name 'Karel Zimmer'
    git config --global user.email 'karel.zimmer@gmail.com'
    git config --global pull.ff only
    git config --global credential.helper store
    if ! git clone https://github.com/karelzimmer/bin.git "$bin_repo"; then
        cd "$bin_repo"
        printf  "%s\n" "$(gettext '* initial pull bin repo...')"
        # Remove known line from output.
        git pull | sed '/Already up to date./d' | sed '/Already up-to-date./d'
    fi
    info '* pull repos (gitpull)...'
    "$bin_repo"/gitpull
}


###############################################################################
# Script
###############################################################################

function main {
    init_script
    check_input
    process_input
    term_script
}

main
