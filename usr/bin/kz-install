#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Install apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare     PROGRAM_NAME=kz-install
declare     PROGRAM_DESC
            PROGRAM_DESC=$(gettext 'Install apps')
declare     DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare     USAGE
            USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--apps] \
[-c|--cat] [-f|--file FILE] [-g|--gui] [-r|--remove]
                  \$OPTIONS_USAGE [--] [APP...]")

declare     X_OPTIONS_HELP
            X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options \
are mandatory for short options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -c, --cat      show contents of command file')
$(eval_gettext "  -f, --file FILE
                 process FILE (default FILE is /usr/bin/\$PROGRAM_NAME.sh)")
$(gettext "  -g, --gui      run in graphical mode, requires desktop \
environment")
$(gettext '  -r, --remove   delete apps')"

declare     HELP
            HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...] [APP...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further \
option processing")

$(gettext 'Arguments:')
$(gettext '  APP            install APPs')"

declare     X_OPTIONS_SHORT='acf:gr'
declare     X_OPTIONS_LONG=',apps,cat,file:,gui,remove'

declare -A  APP_ARGUMENTS=()
declare -A  FAILED_APPS=()
declare     ARGUMENT_APPS=false
declare     FILE_ARGUMENT=''
declare     FROM='from'
declare     INPUT_FILE=$PROGRAM_PATH/$PROGRAM_NAME.sh
declare     INSTALL='Install'
declare     NO_COMMANDS_FOUND=true
declare     ON='on'
declare     OPTION_APPS=false
declare     OPTION_CAT=false
declare     OPTION_FILE=false
declare     OPTION_REMOVE=false
declare     REBOOT=true
declare     REMOVE='Remove'

if type gnome-session &> /dev/null
then
    declare GNOME=true
else
    # shellcheck disable=SC2034
    declare GNOME=false
fi
if [[ $(lsb_release --id --short) = 'Debian' ]]
then
    declare DEBIAN=true
else
    # shellcheck disable=SC2034
    declare DEBIAN=false
fi
if [[ $(lsb_release --id --short) = 'Ubuntu' ]]
then
    declare UBUNTU=true
else
    # shellcheck disable=SC2034
    declare UBUNTU=false
fi


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       PARSED=''
    local   -i  PARSED_RC=0

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || PARSED_RC=$?
    if [[ $PARSED_RC -ne $OK ]]
    then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true
    do
        case $1 in
            -a | --apps )
                OPTION_APPS=true
                shift
                ;;
            -c | --cat )
                OPTION_CAT=true
                shift
                ;;
            -f | --file )
                if $OPTION_FILE
                then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_FILE=true
                FILE_ARGUMENT=$2
                shift 2
                ;;
            -g | --gui )
                if ! $DESKTOP_ENVIRONMENT
    then
                    TEXT=\
"$DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_GUI=true
                shift
                ;;
            -r | --remove )
                OPTION_REMOVE=true
                INSTALL='Remove'
                ON='from'
                REMOVE='Install'
                FROM='on'
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]
    then
        ARGUMENT_APPS=true
        REBOOT=false
        while [[ -n $* ]]
        do
            APP_ARGUMENTS[$1]=$1
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input {
    local COMMAND_FILE=''

    if $OPTION_FILE
    then
        INPUT_FILE=$FILE_ARGUMENT
    fi
    if [[ ! -f $INPUT_FILE ]]
    then
        TEXT=$(eval_gettext "No install file found, looked for \
'\$INPUT_FILE'.")
        errormsg "$TEXT"
        exit $ERROR
    fi

    if $OPTION_APPS
    then
        process_option_apps
        exit $OK
    fi

    COMMAND_FILE=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX.sh")
    if $ARGUMENT_APPS
    then
        process_argument_app
    else
        process_input_file_by_host
    fi

    if $OPTION_CAT
    then
        process_option_cat
        exit $OK
    fi

    if [[ $UID -ne 0 ]]
    then
        logmsg 'Delete the kz-install command file created as non-root...'
        rm --verbose "$COMMAND_FILE" |& $LOGCMD
    fi
    become_root
    check_on_ac_power
    install_apps
}


# This function shows the available apps from the input file.
function process_option_apps {
    local APPS=''

    TEXT="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')\n"
    APPS=$(
        grep    --regexp="#.*$INSTALL.*$ON" \
                "$INPUT_FILE"               |
        tr      --squeeze-repeats           \
                '[:space:]'                 |
        cut     --delimiter=' '             \
                --fields=3                  |
        sort    --unique                    |
        nl      --number-width=3            \
                --number-format=rn          \
                --number-separator='  '     \
                --body-numbering=a          || true
        )
    if [[ -n $APPS ]]
    then
        TEXT+=$APPS
        TEXT+="\n
$(eval_gettext "To view the contents of the apps install file execute: \
\$DISPLAY_NAME --cat APP...")
$(eval_gettext "To install the apps execute: \$DISPLAY_NAME APP...")
$(eval_gettext "To view the contents of the default install file execute: \
\$DISPLAY_NAME --cat")"
    else
        TEXT+="$(gettext '  0  No apps found.')

$USAGE"
    fi
    if $OPTION_GUI; then
        infomsg "$TEXT"
    else
        less --quit-if-one-screen <  <(printf '%b\n' "$TEXT")
    fi
}


# This function processes argument APP.
function process_argument_app {
    local APP_NOT_FOUND=false
    local APP_ARGUMENT=''

    for APP_ARGUMENT in "${APP_ARGUMENTS[@]}"
    do
        process_input_file_by_app
    done
    if $APP_NOT_FOUND
    then
        TEXT="$(eval_gettext "Type '\$DISPLAY_NAME --apps' for available \
apps.")"
        infomsg "$TEXT"
        rm --verbose "$COMMAND_FILE" |& $LOGCMD
        exit $ERROR
    fi
}


# This function generates the command file from the input file and filters by
# APP.
function process_input_file_by_app {
    local APP_MATCH=false
    local INPUT_RECORD=''
    local NO_APP_MATCH=true

    while read -r INPUT_RECORD
    do
        case $INPUT_RECORD in
            '#'*$INSTALL*[[:space:]]"$APP_ARGUMENT"[[:space:]]*$ON* )
                # Matching app record.
                APP_MATCH=true
                NO_APP_MATCH=false
                printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                ;;
            '#'*$INSTALL*$ON* | '#'*$REMOVE*$FROM* )
                # Mismatched app record.
                APP_MATCH=false
                continue
                ;;
            * )
                if $APP_MATCH
                then
                    # Record for command file.
                    printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                fi
                ;;
        esac
    done < "$INPUT_FILE"
    if $NO_APP_MATCH
    then
        APP_NOT_FOUND=true
        TEXT="$DISPLAY_NAME: $APP_ARGUMENT: $(gettext 'app not found')"
        infomsg "$TEXT"
    fi
}


# This function generates the command file from the input file and filters by
# HOST.
function process_input_file_by_host {
    local HOST_MATCH=false
    local INPUT_RECORD=''

    while read -r INPUT_RECORD
    do
        case $INPUT_RECORD in
            '#'*$INSTALL*$ON*'*' | '#'*$INSTALL*$ON*$HOSTNAME* )
                # Matching app record.
                HOST_MATCH=true
                printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                ;;
            '#'*$INSTALL*$ON* | '#'*$REMOVE*$FROM* )
                # Mismatched app record.
                HOST_MATCH=false
                continue
                ;;
            * )
                if $HOST_MATCH
                then
                    # Record for command file.
                    printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                fi
                ;;
        esac
    done < "$INPUT_FILE"
}


# This function displays the contents of the command file.
function process_option_cat {
    less --quit-if-one-screen "$COMMAND_FILE"
    rm --verbose "$COMMAND_FILE" |& $LOGCMD
}


# This function starts installing the apps.
function install_apps {
    local   -i  APP_TOT_NUM=0

    APP_TOT_NUM=$(
        grep    --regexp="#.*$INSTALL.*$ON" \
                --count                     \
                "$COMMAND_FILE"             || true
        )
    [[ $APP_TOT_NUM -ne 0 ]] || return $OK

    TITLE=$(gettext 'Install apps')
    TEXT=$(gettext 'Prepare installation')
    logmsg "$TITLE"...
    if $OPTION_GUI
    then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_COMMAND_FILE > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     2> >($LOGCMD)
            )
    else
        process_COMMAND_FILE
    fi
}


# This function reads commands from the command file for further processing.
function process_COMMAND_FILE {
    local       APP_NAME=''
    local       APP_NAME_LINE=''
    local       COMMAND_RECORD=''
    local   -i  APP_SEQ_NUM=0
    local   -i  CMD_SEQ_NUM=0

    if ! $OPTION_GUI

    then
        TEXT="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        infomsg "$TEXT"
    fi

    while read -r COMMAND_RECORD
    do
        case $COMMAND_RECORD in
            '#'*$INSTALL*$ON* )
                # App record.
                APP_NAME=$(
                    printf '%s\n' "$COMMAND_RECORD"     |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                ((++APP_SEQ_NUM))
                CMD_SEQ_NUM=0
                printf  -v APP_NAME_LINE    \
                        "%3d/%-3d  %s"      \
                        "$APP_SEQ_NUM"      \
                        "$APP_TOT_NUM"      \
                        "$APP_NAME"
                ;;
            '' | '#'* )
                # Empty record or comment line. Use cat option to view.
                continue
                ;;
            * )
                # Command record.
                NO_COMMANDS_FOUND=false
                execute_command "$COMMAND_RECORD"
                ;;
        esac
    done < "$COMMAND_FILE"
    rm --verbose "$COMMAND_FILE" |& $LOGCMD
}


# This function reports and executes a command from the command file.
function execute_command {
    local CMD=${1:-unknown}

    ((++CMD_SEQ_NUM))

    check_package_manager
    if $OPTION_GUI
    then
        [[ $CMD_SEQ_NUM -ne 1 ]] || logmsg "$APP_NAME_LINE"
        printf '%s\n' "#$APP_NAME_LINE\n\n$CMD"
    else
        if [[ $CMD_SEQ_NUM -eq 1 ]]
        then
            logmsg  "$APP_NAME_LINE"
            infomsg "$APP_NAME_LINE"
        fi
        infomsg "         $CMD"
    fi

    logmsg "$CMD"
    ERREXIT=false
    eval "$CMD" |& $LOGCMD || FAILED_APPS[$APP_NAME]=$APP_NAME
    ERREXIT=true
}


# This function controls the termination of the script.
function term_script {
    local FAILED_APPS_TEXT=''
    local OPERATION

    OPERATION=$(gettext 'install')

    if $NO_COMMANDS_FOUND
    then
        TEXT=$(gettext 'No commands to execute.' )
        infomsg "$TEXT"
        exit $OK
    fi

    if [[ -n ${FAILED_APPS[*]} ]]
    then
        # shellcheck disable=SC2034
        FAILED_APPS_TEXT=${FAILED_APPS[*]}
        TEXT=$(eval_gettext "The installation of the following apps contains \
errors:
\$FAILED_APPS_TEXT

Try installing the apps again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Install apps', or
use app 'Terminal', type 'kz install \$FAILED_APPS_TEXT'.")
        errormsg "$TEXT"
        exit $ERROR
    else
        if $OPTION_REMOVE
        then
            # shellcheck disable=SC2034
            OPERATION=$(gettext 'remove')
        fi
        TEXT=$(eval_gettext "Apps \$OPERATION completed.")
        if $REBOOT
        then
            TEXT+="

$(gettext "The computer will now reboot to finish installing the apps and \
changing system settings.")"
        fi
        infomsg "$TEXT"
        if $REBOOT
        then
            $OPTION_GUI || wait_for_enter
            sudo systemctl reboot
        fi
    fi
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
