#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Install apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-install'
PROGRAM_DESC=$(gettext 'Install apps')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: kz install [-a|--apps] [-b|--browse] [-c|--cat]
                  [-f|--file <file>] [-g|--gui]
                  \$OPTIONS_USAGE
                  [--] [<app>...]")
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -b, --browse   browse install file')
$(gettext '  -c, --cat      show contents of command file')
$(gettext "  -f, --file <file>
                 process specified install file")
$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')"
readonly X_OPTIONS_HELP

HELP="$(gettext "Usage: kz install [<options>] [<app>...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further \
option processing")

$(gettext 'Arguments:')
$(gettext '  <app>...       install specified apps')"
readonly HELP

readonly X_OPTIONS_SHORT='abcf:gr'
readonly X_OPTIONS_LONG=',apps,browse,cat,file:,gui'


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    ###########################################################################
    # Global variables
    ###########################################################################
    local -g  ARGUMENT_APPS=false
    local -g  FILE_ARGUMENT=''
    local -g  OPTION_APPS=false
    local -g  OPTION_BROWSE=false
    local -g  OPTION_CAT=false
    local -g  OPTION_FILE=false
    local -g  REBOOT=true
    local -gA APP_ARGUMENTS=()
    local -gA FAILED_APPS=()

    local command_file=''
    local install_file=/usr/bin/$PROGRAM_NAME.sh

    check_input "$@"

    if $OPTION_FILE; then
        install_file=$FILE_ARGUMENT
    fi

    if ! [[ -f $install_file ]]; then
        TEXT=$(eval_gettext "No install file found, looked for \
'\$install_file'.")
        errmsg "$TEXT"
        exit $ERR
    fi

    if $OPTION_BROWSE; then
        process_option_browse
        exit $OK
    fi

    if $OPTION_APPS; then
        process_option_apps
        exit $OK
    fi

    command_file=$(mktemp -t "$PROGRAM_NAME-commands-XXXXXXXXXX")

    if $ARGUMENT_APPS; then
        process_argument_app
    else
        process_setup_file_by_host
    fi

    if $OPTION_CAT; then
        process_option_cat
        exit $OK
    fi

    if [[ $UID -ne 0 ]]; then
        rm --verbose "$command_file" |& $LOGCMD
        become_root
    fi
    install_apps
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "kz install"                        \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -a | --apps )
                OPTION_APPS=true
                shift
                ;;
            -b | --browse )
                OPTION_BROWSE=true
                shift
                ;;
            -c | --cat )
                OPTION_CAT=true
                shift
                ;;
            -f | --file )
                if $OPTION_FILE; then
                    TEXT="kz install: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_FILE=true
                FILE_ARGUMENT=$2
                shift 2
                ;;
            -g | --gui )
                if ! [[ ${DISPLAY-} ]]; then
                    TEXT=\
"kz install: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        ARGUMENT_APPS=true
        REBOOT=false
        while [[ $* ]]; do
            APP_ARGUMENTS[$1]=$1
            shift
        done
    fi
}


# This function browses through the install file.
function process_option_browse() {
    less --no-init --quit-if-one-screen "$install_file"
}


# This function shows the available apps from the install file.
function process_option_apps() {
    local apps=''

    TEXT="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')
"
    apps=$(
        grep    '#.*Install app.*on host'   \
                "$install_file"             |
        tr      --squeeze-repeats           \
                '[:space:]'                 |
        cut     --delimiter=' '             \
                --fields=4                  |
        sort    --unique                    |
        nl      --number-width=3            \
                --number-format=rn          \
                --number-separator='  '     \
                --body-numbering=a          || true
        )

    if [[ $apps ]]; then
        TEXT+="$apps

$(gettext 'Use "kz install <app>..." to install the apps.')
$(gettext "Use \"kz install --cat\" to view the contents of the install file.")
$(gettext "Use \"kz install --cat <app>...\" to view the contents of the apps \
install file.")
$(gettext "Use \"kz install --browse\" to view the contents of the default \
install file.")"
    else
        TEXT+="$(gettext '  0  No apps found.')

$USAGE"
    fi
    infomsg "$TEXT"
}


# This function processes argument <app>.
function process_argument_app() {
    local app_argument=''

    for app_argument in "${APP_ARGUMENTS[@]}"; do
        process_install_file_by_app
    done
}


# This function generates the command file from the install file and filters by
# <app>.
function process_install_file_by_app() {
    local app_match=false
    local input_record=''
    local no_app_match=true

    while read -r input_record; do
        case $input_record in
            '' )
                # Empty line.
                continue
                ;;
            '#'*'Install app'*" $app_argument "*'on host'* )
                # Matching app record.
                app_match=true
                no_app_match=false
                printf '\n%s\n' "$input_record" >> "$command_file"
                ;;
            '#'*'Install app'*'on host'* )
                # Mismatched app record.
                app_match=false
                ;;
            * )
                if $app_match; then
                    # Record for command file.
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$install_file"

    if $no_app_match; then
        TEXT=$(eval_gettext "App '\$app_argument' not found")
        errmsg "$TEXT"
    fi
}


# This function generates the command file from the install file and filters by
# host.
function process_setup_file_by_host() {
    local host_match=false
    local input_record=''

    while read -r input_record; do
        case $input_record in
            '' )
                # Empty line.
                continue
                ;;
            '#'*'Install app'*'on host'*'*' | \
            '#'*'Install app'*'on host'*$HOSTNAME* )
                # Matching app record.
                host_match=true
                printf '\n%s\n' "$input_record" >> "$command_file"
                ;;
            '#'*'Install app'*'on host'* )
                # Mismatched app record.
                host_match=false
                ;;
            * )
                if $host_match; then
                    # Record for command file.
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$install_file"

    # Add possible extra install commands for this computer.
    printf  '\n'                            >> "$command_file"
    gpg     --import                        \
            /usr/share/kz/kz-public-key.gpg 2> >($LOGCMD)
    gpg     --decrypt                       \
            /usr/bin/kz-install-extra.gpg   \
            2> >($LOGCMD)                   |
    grep    "$HOSTNAME"                     >> "$command_file" || true
}


# This function displays the contents of the command file.
function process_option_cat() {
    less --no-init --quit-if-one-screen "$command_file"
    rm --verbose "$command_file" |& $LOGCMD
}


# This function starts installing the apps.
function install_apps() {
    local title=''
    local -i app_tot_num=0

    app_tot_num=$(
        grep    --count                         \
                "#.*'Install app'.*'on host'"   \
                "$command_file"                 || true
        )
    if [[ $app_tot_num -eq 0 ]]; then
        rm --verbose "$command_file" |& $LOGCMD
        TEXT=$(gettext 'No commands to execute.' )
        infomsg "$TEXT"
        exit $OK
    fi

    title=$(gettext 'Install apps')
    TEXT=$(gettext 'Prepare installation')
    logmsg "$title"...

    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$TEXT"     2> /dev/null
            )
    else
        process_command_file
    fi

    rm --verbose "$command_file" |& $LOGCMD
}


# This function reads commands from the command file for further processing.
function process_command_file() {
    local app_name_line=''
    local app_name=''
    local command_record=''
    local -i app_seq_num=0
    local -i cmd_seq_num=0

    if ! $OPTION_GUI; then
        TEXT="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        infomsg "$TEXT"
    fi

    while read -r command_record; do
        case $command_record in
            '#'*'Install app'*'on host'* )
                # App record.
                app_name=$(
                    printf '%s\n' "$command_record"     |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                (( ++app_seq_num ))
                cmd_seq_num=0
                printf  -v app_name_line    \
                        "%3d/%-3d  %s"      \
                        "$app_seq_num"      \
                        "$app_tot_num"      \
                        "$app_name"
                ;;
            '' | '#'* )
                # Empty or comment line.
                continue
                ;;
            * )
                # Process command record.
                execute_command "$command_record"
                ;;
        esac
    done < "$command_file"
}


# This function reports and executes a command from the command file.
function execute_command() {
    local cmd=${1:-unknown}

    (( ++cmd_seq_num ))

    check_package_manager

    if $OPTION_GUI; then
        if [[ $cmd_seq_num -eq 1 ]]; then
            logmsg "$app_name_line"
        fi
        printf '%s\n' "#$app_name_line\n\n$cmd"
    else
        if [[ $cmd_seq_num -eq 1 ]]; then
            logmsg  "$app_name_line"
            infomsg "$app_name_line"
        fi
        infomsg "         $cmd"
    fi

    logmsg "$cmd"
    ERREXIT=false
    eval "$cmd" &> >($LOGCMD) || FAILED_APPS[$app_name]=$app_name
    ERREXIT=true
}


# This function controls the termination of the script.
function term() {
    if [[ ${FAILED_APPS[*]} ]]; then
        TEXT="$(gettext "The installation of the following apps contains \
errors:")
${FAILED_APPS[*]}

$(eval_gettext "Use \"journalctl --boot --id=\$PROGRAM_NAME\" in Terminal to \
view log messages.")

$(gettext "Try installing the apps again.")"
        errmsg "$TEXT"
        exit $ERR
    fi

    TEXT=$(eval_gettext "Apps install completed.")

    if $REBOOT; then
        TEXT+="

$(gettext "The computer will now reboot to finish installing the apps and \
changing system settings.")"
    fi
    infomsg "$TEXT"

    if $REBOOT; then
        $OPTION_GUI || wait_for_enter
        sudo systemctl reboot
    fi

    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
