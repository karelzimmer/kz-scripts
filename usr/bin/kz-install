#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Install apps.
#
# This script installs apps and changes system settings.
# Use 'man kz install' for more information.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2009-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat --identifier=kz_common.sh)


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-install'
PROGRAM_DESC=$(gettext 'Install apps')
readonly PROGRAM_DESC
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--apps] [-c|--cat] \
[-f|--file FILE]
                  [-g|--gui] [-l|--list] [-r|--remove]
                  \$OPTIONS_USAGE
                  [--] [APP...]")
readonly USAGE
HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...] [APP...]")

$PROGRAM_DESC.

$(gettext 'Options:')
  -a, --apps     $(gettext 'show list of available apps')
  -c, --cat      $(gettext 'show contents of command file')
$(gettext '  -f, --file FILE
                 process FILE')
  -g, --gui      $(gettext 'starts in graphics mode')
  -l, --list     $(gettext 'show list of standard files')
  -r, --remove   $(gettext 'delete apps')
$OPTIONS_HELP
  --             $(gettext "signals the end of options and disables further \
option processing")

$(gettext 'Arguments:
  APP            install APPs')"
readonly HELP
readonly X_OPTIONS_SHORT='acf:lgr'
readonly X_OPTIONS_LONG=',apps,cat,file:,list,gui,remove'

readonly HOST=$HOSTNAME


###############################################################################
# Variables
###############################################################################

declare -a app_arguments=()
declare -A failed_apps=()
declare argument_app=false
declare command_file=''
declare commands_found=false
declare file_argument=''
declare mode='install'
declare option_apps=false
declare option_cat=false
declare option_file=false
declare option_gui=false
declare option_list=false
declare option_remove=false
declare reboot=true


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local -i app_arg_num=0
    local -i rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || rc=$?
    if [[ $rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -a|--apps)
                option_apps=true
                shift
                ;;
            -c|--cat)
                option_cat=true
                shift
                ;;
            -f|--file)
                if $option_file; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_file=true
                file_argument=$2
                shift 2
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    printf  "$DISPLAY_NAME: $1: %s\n$USAGE_LINE\n" \
                            "$(gettext 'not allowed on a server')"
                    exit $ERROR
                fi
                option_gui=true
                reset_terminal_attributes
                shift
                ;;
            -r|--remove)
                option_remove=true
                mode='remove'
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        argument_app=true
        reboot=false
        while [[ -n "$*" ]]; do
            app_arguments[app_arg_num]=$1
            ((++app_arg_num))
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input {
    local input_file=$PROGRAM_PATH/$PROGRAM_NAME-$mode-$DISTRO-$EDITION.sh

    if $option_list; then
        process_option_list
        exit $OK
    fi

    if $option_file; then
        if ! [[ "$(basename "$file_argument")" == $PROGRAM_NAME-*.sh ]]; then
            text=$(eval_gettext \
            "File name must start with '\$PROGRAM_NAME-' and end with '.sh'.")
            msg_warning "$text"
            exit $ERROR
        fi
        input_file=$file_argument
    fi
    if ! [[ -f $input_file ]]; then
        text=$(eval_gettext "No install file found, looked for \$input_file.")
        msg_warning "$text"
        exit $ERROR
    fi
    command_file=$(
        mktemp -t "$PROGRAM_NAME-$mode-$DISTRO-$EDITION-XXXXXXXXXX.sh"
        )

    if $option_apps; then
        process_option_apps
        exit $OK
    fi

    if $argument_app; then
        process_argument_app
    else
        process_input_file
    fi

    if $option_cat; then
        process_option_cat
        exit $OK
    fi

    check_user_root
    check_on_ac_power
    if $option_gui; then
        title=$(gettext 'Install apps')
        text=$(gettext 'Prepare installation')
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> >($logcmd)
            )
    else
        process_command_file
    fi
}


# This function displays a list of available input files.
function process_option_list {
    text="$(gettext 'The following FILEs are available:

     FILE')
$(
    if !    find    "$PROGRAM_PATH/$PROGRAM_NAME-"*'.sh'    \
                    2> >($logcmd)                           |
            nl      --number-width=2                        \
                    --number-format=rn                      \
                    --number-separator='] '                 \
                    --body-numbering=a                      |
            sed     --expression='s/^/[/'; then
        printf '%s\n' "$(gettext '     0 No files present.')

$USAGE_LINE"
    else
        printf '%s\n' "
$(eval_gettext "To process FILE execute: \${blue}\$DISPLAY_NAME \
--file FILE\${normal}")
$(eval_gettext "To view the commands of FILE execute: \${blue}\$DISPLAY_NAME \
--cat --file FILE\${normal}")"
    fi
)"
    msg_info "$text"
}


# This function shows the available APPs from the input file.
function process_option_apps {
    text="$(gettext 'The following APPs are available:

     APP')
$(
    if !    grep    --no-messages           \
                    --regexp='#.* APP '     \
                    "$input_file"           |
            tr      --squeeze-repeats       \
                    '[:space:]'             |
            cut     --delimiter=' '         \
                    --fields=3              |
            sort    --unique                |
            nl      --number-width=2        \
                    --number-format=rn      \
                    --number-separator='] ' \
                    --body-numbering=a      |
            sed     --expression='s/^/[/'; then
        printf '%s\n' "$(gettext '     0   No apps found.')

$USAGE_LINE"
    else
        printf '%s\n' "
$(gettext 'To install the APPs run:') ${blue}$DISPLAY_NAME APP...${normal}
$(gettext 'To view the contents of the APPs installation file execute:') \
${blue}$DISPLAY_NAME --cat APP...${normal}"
    fi
)"
    msg_info "$text"
}


# This function processes argument APP.
function process_argument_app {
    local app_not_found=false
    local app_argument=''

    for app_argument in "${app_arguments[@]}"; do
        process_argument_app_input_file
    done
    if $app_not_found; then
        text=$(eval_gettext "Type '\$DISPLAY_NAME --apps' for available apps.")
        printf "%s\n" "$text"
        exit $ERROR
    fi
}


# This function generates the command file from the input file, filtering on
# APPs.
function process_argument_app_input_file {
    local app_match=false
    local no_app_match=true
    local input_record=''

    while read -r input_record; do
        case $input_record in
            '#'*' APP '*)
                # APP record.
                app_match=false
                if [[ $input_record == *' '$app_argument ]]; then
                    # Match by APP name.
                    app_match=true
                    no_app_match=false
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
            *)
                # Other record (empty, comment, HOST record, or command).
                if $app_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
    if $no_app_match; then
        app_not_found=true
        printf  "$DISPLAY_NAME: %s: %s\n"   \
                "$app_argument"             \
                "$(gettext 'app not found')"
    fi
}


# This function generates the command file from the input file, filtering on
# HOST.
function process_input_file {
    local app_record=''
    local host_match=false
    local input_record=''

    while read -r input_record; do
        case $input_record in
            '#'*' APP '*)
                # APP record.
                app_record=$input_record
                host_match=false
                ;;
            '#'*' HOST '*'*'*|'#'*' HOST '*"$HOST"*)
                # Matching HOST record.
                host_match=true
                {
                    printf '%s\n' "$app_record"
                    printf '%s\n' "$input_record"
                } >> "$command_file"
                app_record=''
                ;;
            *)
                # Other record (emtpy, comment, or command).
                if $host_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
}


# This function displays the contents of the command file.
function process_option_cat {
    less --quit-if-one-screen "$command_file"
}


# This function reads commands from the command file for further processing.
function process_command_file {
    local app_name=''
    local operation
    operation=$(gettext 'install')
    local commands_record=''
    local -i app_seq_num=0
    local -i app_tot_num=0
    local -i cmd_seq_num=0

    app_tot_num=$(
        grep --word-regexp --regexp='#.*APP' --count "$command_file" || true
        )
    if [[ $app_tot_num -gt 99 ]]; then
        app_tot_num=99
    fi

    if $option_remove; then
        operation=$(gettext 'remove')
    fi

    while read -r commands_record; do
        case $commands_record in
            '')
                # Empty line.
                continue
                ;;
            '#'*' APP '*)
                # APP record.
                app_name="$(
                    printf '%s\n' "$commands_record"    |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3)"
                ((++app_seq_num))
                if [[ $app_seq_num -gt 99 ]]; then
                    app_seq_num=99
                fi
                cmd_seq_num=0
                ;;
            '#'*' HOST '*)
                # HOST record.
                continue
                ;;
            '#'*)
                # Comment record.
                continue
                ;;
            *)
                # Command record.
                execute_command "$commands_record"
                ;;
        esac
    done < "$command_file"
}


# This function executes a command from the command file.
function execute_command {
    local cmd=${1:-unknown}
    local app_name_line=''
    local -i rc=0

    commands_found=true
    ((++cmd_seq_num))
    if [[ $cmd_seq_num -gt 99 ]]; then
        cmd_seq_num=99
    fi
    printf  -v app_name_line            \
            "[%2d/%-2d] [%2d] %s %s"    \
            "$app_seq_num"              \
            "$app_tot_num"              \
            "$cmd_seq_num"              \
            "$operation"                \
            "$app_name"

    if $option_gui; then
        text="#$app_name_line\n\n$cmd"
        printf '%s\n' "$text"
    else
        if [[ $cmd_seq_num -eq 1 ]]; then
            printf "%b\n" "$app_name_line"
        else
            printf "       %b\n" "${app_name_line:7}"
        fi
    fi

    msg_log  "$app_name_line"
    msg_log  "${blue}$cmd${normal}"
    check_for_active_updates
    eval "$cmd" |& $logcmd || rc=$?
    maxrc
    msg_log  "rc=$rc, maxrc=$maxrc"
    if [[ $rc -gt $OK ]]; then
        failed_apps[$app_name]=$app_name
    fi
}


# This function controls the termination of the script.
function term_script {
    local failed_apps_text=''
    local operation
    operation=$(gettext 'install')

    if ! $commands_found; then
        msg_info "$(gettext 'No commands to execute.' )"
        exit $OK
    fi

    if [[ -n ${failed_apps[*]} ]]; then
        # shellcheck disable=SC2034
        failed_apps_text=${failed_apps[*]}
        msg_error "$(eval_gettext "The installation of the following apps \
contains errors:
\$failed_apps_text

Try installing the apps again.")"
        exit $ERROR
    else
        if $option_remove; then
            # shellcheck disable=SC2034
            operation=$(gettext 'remove')
        fi
        msg_info "
${green}$(eval_gettext "Apps \$operation completed.")${normal}"
        if $reboot; then
            text=$(gettext "The computer will now reboot to finish installing \
the apps and changing system settings.")
            msg_info "$text"
            if ! $option_gui; then
                wait_for_enter
            fi
            sudo systemctl reboot
        fi
    fi
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
