#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Install apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh as kz


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-install'
PROGRAM_DESC=$(gettext 'Install apps')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz install [-a|--apps] [-b|--browse] [-c|--cat]
                  [-f|--file <file>]... [-g|--gui] [-r|--remove]
                  [-h|--help] [-m|--manual] [-u|--usage] [-v|--version]
                  [--] [<app>...]")
readonly USAGE

HELP="$(gettext "Usage: kz install [<options>] [--] [<arguments>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short \
options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -b, --browse   browse installation files')
$(gettext '  -c, --cat      show contents of command file')
$(gettext "  -f, --file <file>
                 process specified installation files")
$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -r, --remove   delete apps')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')

$(gettext 'Arguments:')
$(gettext '  <app>          process specified apps')"
readonly HELP

readonly OPTIONS_SHORT='abcf:grhmuv'
readonly OPTIONS_LONG="apps,browse,cat,file:,gui,remove,help,manual,usage,\
version"

readonly REBOOT_APPS='dash-to-dock force-x11 kvm'

# Required for kz.become.
readonly COMMANDLINE_ARGS=("$@")


###############################################################################
# Globals
###############################################################################

declare -A FAILED_APPS=()
declare ERRORLOG=''
declare OPTION_GUI=false
declare OPTION_REMOVE=false
declare REBOOT=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local -A app_arguments=()
    local -a install_files=()
    local -i install_file_num=0
    local argument_app=false
    local command_file=''
    local err_flag=false
    local from='from'
    local install='install'
    local install_file_default_gpg=''
    local install_file_default=/usr/bin/$PROGRAM_NAME.sh
    local install_file=''
    local on='on'
    local option_apps=false
    local option_browse=false
    local option_cat=false
    local option_file=false
    local remove='remove'
    local text=''

    check_input "$@"

    if ! $option_file; then
        install_files[++install_file_num]=$install_file_default
        # Install commands in gpg file.
        install_file_default_gpg=\
$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX-decryptd.sh.gpg")
        gpg --import                        \
            /usr/share/kz/kz-public-key.gpg \
            2> >($PROGRAM_LOGS)
        gpg --decrypt                       \
            /usr/bin/kz-install.sh.gpg      \
            2> >($PROGRAM_LOGS)             > "$install_file_default_gpg"
        install_files[++install_file_num]=$install_file_default_gpg
    fi

    for install_file in "${install_files[@]}"; do
        if [[ ! -f $install_file ]]; then
            text=$(eval_gettext "Installation file '\$install_file' not \
found.")
            kz.errmsg "$text"
            err_flag=true
        fi
    done
    if $err_flag; then
        exit 1
    fi

    if $option_browse; then
        process_option_browse
        exit 0
    fi

    if $option_apps; then
        process_option_apps
        exit 0
    fi

    command_file=$(mktemp -t "$PROGRAM_NAME-XXXXXXXXXX-commands.sh")

    if $argument_app; then
        process_argument_app
    else
        process_install_file_by_hostname
    fi

    if $option_cat; then
        process_option_cat
        exit 0
    fi

    kz.become
    install_apps
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -a | --apps )
                option_apps=true
                shift
                ;;
            -b | --browse )
                option_browse=true
                shift
                ;;
            -c | --cat )
                option_cat=true
                shift
                ;;
            -f | --file )
                option_file=true
                install_files[++install_file_num]=$2
                shift 2
                ;;
            -g | --gui )
                if [[ -z ${DISPLAY-} ]]; then
                    text="$program_name: $1: $(gettext "no desktop \
environment available")"
                    kz.infomsg "$text"
                    exit 1
                fi
                OPTION_GUI=true
                shift
                ;;
            -r | --remove )
                OPTION_REMOVE=true
                install='remove'
                on='from'
                remove='install'
                from='on'
                shift
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ -n $* ]]; then
        argument_app=true
        while [[ -n $* ]]; do
            app_arguments[$1]=$1
            if [[ $REBOOT_APPS =~ $1 ]]; then
                REBOOT=true
            fi
            shift
        done
    else
        REBOOT=true
    fi
}


# This function browses through the installation file.
function process_option_browse() {
    less --no-init --quit-if-one-screen "${install_files[@]}"
}


# This function shows the available apps from the installation file.
function process_option_apps() {
    local apps=''
    local text=''

    text="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')
"
    apps=$(
        grep    "#.*$install.*$on"      \
                "${install_files[@]}"   |
        tr      --squeeze-repeats       \
                '[:space:]'             |
        cut     --delimiter=' '         \
                --fields=3              |
        sort    --unique                |
        nl      --number-width=3        \
                --number-format=rn      \
                --number-separator='  ' \
                --body-numbering=a      || true
        )

    if [[ -n $apps ]]; then
        text+="$apps

$(gettext 'Use "kz install <app>..." to install the apps.')
$(gettext "Use \"kz install --cat\" to view the contents of the installation \
file.")
$(gettext "Use \"kz install --cat <app>...\" to view the contents of the apps \
installation file.")
$(gettext "Use \"kz install --browse\" to view the contents of the default \
installation file.")"
    else
        text+="$(gettext '  0  No apps found.')

$USAGE"
    fi
    kz.infomsg "$text"
}


# This function processes argument <app>.
function process_argument_app() {
    local app_argument=''
    local err_flag=false

    for app_argument in "${app_arguments[@]}"; do
        process_install_file_by_app_argument
    done

    if $err_flag; then
        exit 1
    fi
}


# This function generates the command file from the installation file and
# filters by <app>.
function process_install_file_by_app_argument() {
    local app_match=false
    local input_record=''
    local no_app_match=true
    local text=''

    while read -r input_record; do
        case $input_record in
            '' )
                # Skip empty line.
                continue
                ;;
            '#'*$install*[[:space:]]"$app_argument"[[:space:]]*$on* )
                # Add matching app record to command file.
                app_match=true
                no_app_match=false
                printf '\n%s\n' "$input_record" >> "$command_file"
                ;;
            '#'*$install*$on* | '#'*$remove*$from* )
                # Skip mismatched app record.
                app_match=false
                ;;
            * )
                if $app_match; then
                    # Add record to command file.
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < <(cat "${install_files[@]}")

    if $no_app_match; then
        err_flag=true
        text=$(eval_gettext "App '\$app_argument' not found.")
        kz.errmsg "$text"
    else
        # Add extra empty line  to command file.
        printf '\n' >> "$command_file"
    fi
}


# This function generates the command file from the installation file and
# filters by host.
function process_install_file_by_hostname() {
    local host_match=false
    local input_record=''

    while read -r input_record; do
        case $input_record in
            '' )
                # Skip empty line.
                continue
                ;;
            '#'*$install*$on*'*' | '#'*$install*$on*$HOSTNAME* )
                # Add matching app record to command file.
                host_match=true
                printf '\n%s\n' "$input_record" >> "$command_file"
                ;;
            '#'*$install*$on* | '#'*$remove*$from* )
                # Skip mismatched app record.
                host_match=false
                ;;
            * )
                if $host_match; then
                    # Add record to command file.
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < <(cat "${install_files[@]}")
    # Add extra empty line  to command file.
    printf '\n' >> "$command_file"
}


# This function displays the contents of the command file.
function process_option_cat() {
    less --no-init --quit-if-one-screen "$command_file"
}


# This function starts installing the apps.
function install_apps() {
    local -i app_tot_num=0
    local text=''
    local title=''

    app_tot_num=$(grep --count "#.*$install.*$on" "$command_file" || true)
    if [[ $app_tot_num -eq 0 ]]; then
        text=$(gettext 'No commands to execute.' )
        kz.infomsg "$text"
        exit 0
    fi

    title="$(gettext 'Install apps') $(gettext 'progress')"
    text=$(gettext 'Prepare installation')
    kz.debugmsg "$title"...
    ERRORLOG=$(mktemp -t "$PROGRAM_NAME-errorlog-XXXXXXXXXX")

    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> /dev/null
            )
    else
        process_command_file
    fi
}


# This function reads commands from the command file for further processing.
function process_command_file() {
    local -i app_seq_num=0
    local -i cmd_seq_num=0
    local app_name_line=''
    local app_name=''
    local command_record=''
    local text=''

    if ! $OPTION_GUI; then
        text="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        kz.infomsg "$text"
    fi

    while read -r command_record; do
        case $command_record in
            '#'*$install*$on* )
                # App record.
                app_name=$(
                    printf '%s\n' "$command_record"     |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                (( ++app_seq_num ))
                cmd_seq_num=0
                printf  -v app_name_line    \
                        "%3d/%-3d  %s"      \
                        "$app_seq_num"      \
                        "$app_tot_num"      \
                        "$app_name"
                # To corrolate possible error messages with app name.
                printf '%s\n' "-- App $app_name" >> "$ERRORLOG"
                ;;
            '' | '#'* )
                # Empty or comment line.
                continue
                ;;
            * )
                # Process command record.
                execute_command "$command_record"
                ;;
        esac
    done < "$command_file"
}


# This function reports and executes a command from the command file.
function execute_command() {
    local -i cmd_dis_len=0
    local -i cmd_dis_max=0
    local -i pkexec_rc=0
    local cmd_dis=''
    local cmd=${1:-unknown}

    (( ++cmd_seq_num ))

    if $OPTION_GUI; then
        if [[ $cmd_seq_num -eq 1 ]]; then
            kz.debugmsg "$app_name_line"
        fi
        printf '%s\n' "#$app_name_line\n\n$cmd"
    else
        if [[ $cmd_seq_num -eq 1 ]]; then
            kz.infomsg "$app_name_line"
        fi
        # Ellipsize terminal output.
        # Width 9 characters less, 9 for leading spaces.
        cmd_dis_max=$(( $(tput cols) - 9 ))
        if [[ ${#cmd} -gt $cmd_dis_max ]]; then
            # Width 12 characters less, 9 for leading spaces and 3 for trailing
            # ellipsis.
            cmd_dis_len=$(( $(tput cols) - 12 ))
            cmd_dis=${cmd:0:cmd_dis_len}...
        else
            cmd_dis=$cmd
        fi
        kz.infomsg "         $cmd_dis"
    fi

    kz.debugmsg "$cmd"
    if $OPTION_GUI; then
        kz.check_debian_package_manager
        pkexec  /usr/bin/kz-install-pkexec  \
                "$cmd"                  \
                1> >($PROGRAM_LOGS)     \
                2>> "$ERRORLOG"         || pkexec_rc=$?
        if [[ $pkexec_rc -eq 126 || $pkexec_rc -eq 127 ]]; then
            # pkexec_rc = 126: The user dismissed the authentication dialog.
            # pkexec_rc = 127: The calling process is not authorized.
            exit "$pkexec_rc"
        elif [[ $pkexec_rc -gt 0 ]]; then
            # pkexec_rc > 0: The command failed.
            FAILED_APPS[$app_name]=$app_name
        fi
    else
        kz.check_debian_package_manager
        eval    "$cmd"              \
                1> >($PROGRAM_LOGS) \
                2>> "$ERRORLOG"     || FAILED_APPS[$app_name]=$app_name
    fi
}


# This function controls the termination of the script.
function term() {
    local cmd='sudo systemctl reboot'
    local operation=''
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''
    local title=''

    if [[ -n ${FAILED_APPS[*]} ]]; then
        title="$PROGRAM_DESC $(gettext 'error messages')"
        # Errors also to the log.
        kz.logmsg '==========================================================='
        kz.logmsg "$title $ERRORLOG:"
        printf '%s' "$(<"$ERRORLOG")" |& $PROGRAM_LOGS
        kz.logmsg '==========================================================='

        text="$(gettext "The installation of the following apps contains \
errors:")
${FAILED_APPS[*]}

$(gettext 'Actions to take:')
$(gettext 'Check the error messages after this.')
$(gettext "Try installing the apps again.")"
        kz.errmsg "$text"

        if $OPTION_GUI; then
            zenity  --text-info             \
                    --filename="$ERRORLOG"  \
                    --width     700         \
                    --height    500         \
                    --title     "$title"    2> /dev/null || true
        else
            kz.infomsg "$title $ERRORLOG:"
            less --no-init --quit-if-one-screen "$ERRORLOG"
        fi
        exit 1
    else
        rm --verbose "$ERRORLOG" |& $PROGRAM_LOGS
    fi

    operation=$(gettext 'install')

    if $OPTION_REMOVE; then
        # shellcheck disable=SC2034
        operation=$(gettext 'remove')
    fi
    text=$(eval_gettext "Apps \$operation completed.")

    if $REBOOT; then
        text+="

$(gettext "The computer will now reboot to finish installing the apps and \
changing system settings.")"
    fi
    kz.infomsg "$text"

    if $REBOOT; then
        if $OPTION_GUI; then
            pkexec /usr/bin/kz-install-pkexec "$cmd"
        else
            kz.wait_for_enter
            eval "$cmd"
        fi
    fi

    exit 0
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
