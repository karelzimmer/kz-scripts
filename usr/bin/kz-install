#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# Install apps.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2009-2023.
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly    PROGRAM_NAME=kz-install
readonly    PROGRAM_DESC=$(gettext 'Install apps')
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly    USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--apps] [-c|--cat]\
 [-f|--file FILE]
                  [-g|--gui] [-l|--list] [-r|--remove]
                  \$OPTIONS_USAGE
                  [--] [APP...]")
readonly    HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...] [APP...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -a, --apps     show list of apps')
$(gettext '  -c, --cat      show contents of command file')
$(gettext '  -f, --file FILE
                 process FILE')
$(gettext '  -g, --gui      starts in graphics mode')
$(gettext '  -l, --list     show list of files')
$(gettext '  -r, --remove   delete apps')
$OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further op\
tion processing")

$(gettext 'Arguments:')
$(gettext '  APP            install APPs')"

readonly    X_OPTIONS_SHORT='acf:lgr'
readonly    X_OPTIONS_LONG=',apps,cat,file:,list,gui,remove'

readonly    PROGRAM_PATH=$MODULE_PATH


###############################################################################
# Variables
###############################################################################

declare -A  app_arguments=()
declare -A  failed_apps=()
declare     argument_app=false
declare     command_file=''
declare     commands_found=false
declare     file_argument=''
declare     input_file=''
declare     mode='install'
declare     option_apps=false
declare     option_cat=false
declare     option_file=false
declare     option_list=false
declare     option_remove=false
declare     reboot=true


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -a|--apps)
                option_apps=true
                shift
                ;;
            -c|--cat)
                option_cat=true
                shift
                ;;
            -f|--file)
                if $option_file; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n"   \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_file=true
                file_argument=$2
                shift 2
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    printf  "$DISPLAY_NAME: $1: %s\n$USAGE_LINE\n"  \
                            "$(gettext 'not allowed on a server')"
                    exit $ERROR
                fi
                option_gui=true
                reset_terminal_attributes
                shift
                ;;
            -r|--remove)
                option_remove=true
                mode='remove'
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        argument_app=true
        reboot=false
        while [[ -n "$*" ]]; do
            app_arguments[$1]=$1
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input {
    input_file=$PROGRAM_PATH/$PROGRAM_NAME-$mode-$DISTRO-$EDITION.sh

    if $option_list; then
        process_option_list
        exit $OK
    fi

    if $option_file; then
        if ! [[ "$(basename "$file_argument")" == $PROGRAM_NAME-*.sh ]]; then
            printf  "${red}%s\n${normal}"   \
                    "$(eval_gettext "Filename must start with '\$PROGRAM_NAME-\
' and end with '.sh'.")"
            exit $ERROR
        fi
        input_file=$file_argument
    fi
    if ! [[ -f $input_file ]]; then
        msg_error "$(eval_gettext "No install file found, looked for '\$input_\
file'.")"
        exit $ERROR
    fi

    if $option_apps; then
        process_option_apps
        exit $OK
    fi

    command_file=$(
        mktemp -t "$PROGRAM_NAME-$mode-$DISTRO-$EDITION-XXXXXXXXXX.sh"
        )

    if $argument_app; then
        process_argument_app
    else
        process_input_file_by_host
    fi

    if $option_cat; then
        process_option_cat
        exit $OK
    fi

    check_user_root
    check_on_ac_power
    if $option_gui; then
        title=$(gettext 'Install apps')
        text=$(gettext 'Prepare installation')
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> >($logcmd)
            )
    else
        process_command_file
    fi
}


# This function displays a list of input files present.
function process_option_list {
    printf  '%s\n\n%s\n'                                    \
            "$(gettext 'The following FILEs are present:')" \
            "$(gettext 'NUM  FILE')"
    if !    find    "$PROGRAM_PATH/$PROGRAM_NAME-"*'.sh'    \
                    2> >($logcmd)                           |
            nl      --number-width=3                        \
                    --number-format=rn                      \
                    --number-separator='  '                 \
                    --body-numbering=a; then
        printf '%s\n\n%s\n' "$(gettext '  0  No files present.')" "$USAGE_LINE"
    else
        printf  "\n%b\n%b\n%s\n"                \
                "$(eval_gettext "To view the commands of FILE execute: \${blue\
}\$DISPLAY_NAME --cat --file FILE\${normal}")"  \
                "$(eval_gettext "To process FILE execute: \${blue}\$DISPLAY_NA\
ME --file FILE\${normal}")"                     \
                "$(eval_gettext "The default FILE is: \$input_file")"
    fi
}


# This function shows the available APPs from the input file.
function process_option_apps {
    printf  '%s\n\n%s\n'                                        \
            "$(gettext 'The following APPs are available:')"    \
            "$(gettext 'NUM  APP')"
    if !    grep    --no-messages           \
                    --regexp='#.* APP '     \
                    "$input_file"           |
            tr      --squeeze-repeats       \
                    '[:space:]'             |
            cut     --delimiter=' '         \
                    --fields=3              |
            sort    --unique                |
            nl      --number-width=3        \
                    --number-format=rn      \
                    --number-separator='  ' \
                    --body-numbering=a; then
        printf '%s\n\n%s\n' "$(gettext '  0  No apps found.')" "$USAGE_LINE"
    else
        printf  '\n%b\n%b\n%b\n'                            \
                "$(eval_gettext "To view the contents of the APPs install file\
 execute: \${blue}\$DISPLAY_NAME --cat APP...\${normal}")"  \
                "$(eval_gettext "To install the APPs execute: \${blue}\$DISPLA\
Y_NAME APP...\${normal}")"                                  \
                "$(eval_gettext "To view the contents of the default install f\
ile execute: \${blue}\$DISPLAY_NAME --cat\${normal}")"
    fi
}


# This function processes argument APP.
function process_argument_app {
    local   app_not_found=false
    local   app_argument=''

    for app_argument in "${app_arguments[@]}"; do
        process_input_file_by_app
    done
    if $app_not_found; then
        printf  '%s\n'  \
                "$(eval_gettext "Type '\$DISPLAY_NAME --apps' for available ap\
ps.")"
        exit $ERROR
    fi
}


# This function generates the command file from the input file and filters by
# APPs.
function process_input_file_by_app {
    local   app_match=false
    local   app_name=''
    local   no_app_match=true
    local   input_record=''

    while read -r input_record; do
        case $input_record in
            '#'*' APP '*)
                # APP record.
                app_match=false
                app_name="$(
                    printf '%s\n' "$input_record"       |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3)"
                if [[ $app_name = "$app_argument" ]]; then
                    # Match on app name.
                    app_match=true
                    no_app_match=false
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
            *)
                # Other record (empty, comment, or command).
                if $app_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
    if $no_app_match; then
        app_not_found=true
        printf  "$DISPLAY_NAME: %s: %s\n"   \
                "$app_argument"             \
                "$(gettext 'app not found')"
    fi
}


# This function generates the command file from the input file and filters by
# host.
function process_input_file_by_host {
    local   current_host=$HOSTNAME
    local   host_match=false
    local   host_names=''
    local   input_record=''

    while read -r input_record; do
        case $input_record in
            '#'*' APP '*)
                # APP record.
                host_match=false
                host_names="$(
                    printf '%s\n' "$input_record"       |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=5-)"
                if [[ $host_names = '*' || $host_names == *$current_host* ]]
                then
                    # Match on host name.
                    host_match=true
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
            *)
                # Other record (empty, comment, or command).
                if $host_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
}


# This function displays the contents of the command file.
function process_option_cat {
    less --quit-if-one-screen "$command_file"
}


# This function reads commands from the command file for further processing.
function process_command_file {
    local       app_name=''
    local       app_name_line=''
    local       operation=$(gettext 'install')
    local       commands_record=''
    local   -i  app_seq_num=0
    local   -i  app_tot_num=0
    local   -i  cmd_seq_num=0

    app_tot_num=$(grep --regexp='#.* APP ' --count "$command_file" || true)

    if $option_remove; then
        operation=$(gettext 'remove')
    fi

    if ! $option_gui; then
        printf  '%s\n%s\n'                  \
                "$(gettext 'NUM/TOT  APP')" \
                "$(gettext '         COMMAND')..."
    fi

    while read -r commands_record; do
        case $commands_record in
            '')
                # Empty line.
                continue
                ;;
            '#'*' APP '*)
                # APP record.
                app_name="$(
                    printf '%s\n' "$commands_record"    |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3)"
                ((++app_seq_num))
                cmd_seq_num=0
                printf  -v app_name_line    \
                        "%3d/%-3d  %s"      \
                        "$app_seq_num"      \
                        "$app_tot_num"      \
                        "$app_name"
                ;;
            '#'*)
                # Comment record.
                continue
                ;;
            *)
                # Command record.
                execute_command "$commands_record"
                ;;
        esac
    done < "$command_file"
}


# This function reports and executes a command from the command file.
function execute_command {
    local   cmd=${1:-unknown}

    commands_found=true
    ((++cmd_seq_num))

    if $option_gui; then
        printf '%s\n' "#$app_name_line\n\n$cmd"
    else
        if [[ $cmd_seq_num -eq 1 ]];then
            printf '%s\n' "$app_name_line"
        fi
        printf '         %s\n' "$cmd"
    fi

    msg_log "$app_name_line/$cmd_seq_num\n$cmd"
    check_for_active_updates
    eval "$cmd" |& $logcmd || failed_apps[$app_name]=$app_name
}


# This function controls the termination of the script.
function term_script {
    local   failed_apps_text=''
    local   operation=$(gettext 'install')

    if ! $commands_found; then
        msg_info "$(gettext 'No commands to execute.' )"
        exit $OK
    fi

    if [[ -n ${failed_apps[*]} ]]; then
        # shellcheck disable=SC2034
        failed_apps_text=${failed_apps[*]}
        msg_error "
$(eval_gettext "The installation of the following apps contains errors:
\$failed_apps_text

Try installing the apps again.
Use app 'Installation menu' and select '5 - Command menu', or
use app Terminal, type 'kz install \$failed_apps_text'.")"
        exit $ERROR
    else
        if $option_remove; then
            # shellcheck disable=SC2034
            operation=$(gettext 'remove')
        fi
        msg_info "${green}
$(eval_gettext "Apps \$operation completed.")${normal}"
        if $reboot; then
            msg_info "$(gettext "The computer will now reboot to finish instal\
ling the apps and changing system settings.")"
            if ! $option_gui; then
                wait_for_enter
            fi
            sudo systemctl reboot
        fi
    fi
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
