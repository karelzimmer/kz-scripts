#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Change GUI.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2015-2023.
###############################################################################

###############################################################################
# Import
###############################################################################

readonly    PROGRAM_NAME='kz-gset'
            PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly    PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat --identifie=$PROGRAM_NAME)


###############################################################################
# Constants
###############################################################################

            PROGRAM_DESC=$(gettext 'Change GUI')
readonly    PROGRAM_DESC
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

            USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME \
[-a|--addfavaft FAVORITE] [-b|--addfavbef FAVORITE]
               [-d|--delfav FAVORITE] [-l|--list] [-r|--resetfavs]
               [-f|--addappfolder APPFOLDER] [-x|--delappfolder APPFOLDER]
               \$OPTIONS_USAGE")"
readonly    USAGE

            HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
  $(gettext "Mandatory arguments to long options are mandatory for short \
options too.")

$(gettext "  -a, --addfavaft FAVORITE
                 add FAVORITE at the end
  -b, --addfavbef FAVORITE
                 add FAVORITE at the beginning
  -d, --delfav FAVORITE
                 delete FAVORITE
  -l, --list     show favorites and app folders
  -r, --resetfavs
                 reset favorites
  -f, --addappfolder APPFOLDER
                 add APPFOLDER
  -x, --delappfolder APPFOLDER
                 delete APPFOLDER")
$OPTIONS_HELP"
readonly    HELP

readonly    X_OPTIONS_SHORT='a:b:d:lrf:x:'
readonly    X_OPTIONS_LONG=",addfavaft:,addfavbef:,delfav:,list,resetfavs,\
addappfolder:,delappfolder:"


###############################################################################
# Variables
###############################################################################

declare     appfolder=''
declare     config_a=''
declare     config_b=''
declare     desktopfile=''
declare     favorite_argument=''
declare     folder_argument=''
declare     option_addappfolder=false
declare     option_addfavaft=false
declare     option_addfavbef=false
declare     option_delappfolder=false
declare     option_delfav=false
declare     option_list=false
declare     option_resetfavs=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"
    if [[ $EDITION = 'server' ]]; then
        printf  "$DISPLAY_NAME: %s\n$USAGE_LINE\n" \
                "$(gettext 'not allowed on a server')"
        exit $ERROR
    fi

    while true; do
        case $1 in
            -a|--addfavaft)
                if $option_addfavaft; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_addfavaft=true
                favorite_argument=$2
                shift 2
                ;;
            -b|--addfavbef)
                if $option_addfavbef; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_addfavbef=true
                favorite_argument=$2
                shift 2
                ;;
            -d|--delfav)
                if $option_delfav; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_delfav=true
                favorite_argument=$2
                shift 2
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -r|--resetfavs)
                option_resetfavs=true
                shift
                ;;
            -f|--addappfolder)
                if $option_addappfolder; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_addappfolder=true
                folder_argument=$2
                shift 2
                ;;
            -x|--delappfolder)
                if $option_delappfolder; then
                    printf  "$DISPLAY_NAME: $1 $2: %s\n$USAGE_LINE\n" \
                            "$(gettext 'too many options')"
                    exit $ERROR
                fi
                option_delappfolder=true
                folder_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi

    appfolder=$folder_argument
    desktopfile=$favorite_argument.desktop
}


# This function processes the script options and arguments.
function process_input {
    if $option_addfavaft; then
        process_option_addfavaft
    elif $option_addfavbef; then
        process_option_addfavbef
    elif $option_delfav; then
        process_option_delfav
    elif $option_list; then
        process_option_list
    elif $option_resetfavs; then
        process_option_resetfavs
    elif $option_addappfolder; then
        process_option_addappfolder
    elif $option_delappfolder; then
        process_option_delappfolder
    else
        capture_gui_changes
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_option_addfavaft  {
    local   favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$favorite_apps" |
            cut --delimiter=']' --fields=1
            ), '$desktopfile']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_option_addfavbef  {
    local   favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps \
            "['$desktopfile', $(
                printf '%s' "$favorite_apps" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_option_delfav  {
    local   favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        :
    elif [[ $favorite_apps = "['$desktopfile']" ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else gsettings set org.gnome.shell favorite-apps "$(
        printf  '%s' "$favorite_apps"                   |
        sed     --expression="s/'$desktopfile', //g"    |
        sed     --expression="s/, '$desktopfile'//"
        )"
    fi
}


# This feature lists the favorite apps along with the app folders.
function process_option_list  {
    printf '%s\n' "$(gettext 'Favorite apps:')"
    gsettings get org.gnome.shell favorite-apps
    printf '\n%s\n' "$(gettext 'App folders:')"
    gsettings get org.gnome.desktop.app-folders folder-children
}


# This function resets the favorites to the factory settings.
function process_option_resetfavs  {
    gsettings reset org.gnome.shell favorite-apps
}


# This function adds an application folder.
function process_option_addappfolder  {
    local   app_folders=''
    local   schema=''
    local   path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        set org.gnome.desktop.app-folders folder-children "['$appfolder']"
    elif !  printf  '%s' "$app_folders" |
            grep --quiet --regexp="$appfolder"; then
        gsettings set org.gnome.desktop.app-folders folder-children "$(
            printf '%s' "$app_folders" | cut --delimiter=']' --fields=1
            ), '$appfolder']"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$appfolder/
    gsettings set "$schema":"$path" name        "$appfolder"
    gsettings set "$schema":"$path" translate   true
    gsettings set "$schema":"$path" categories  "['$appfolder']"
}


# This function deletes an application folder.
function process_option_delappfolder  {
    local   app_folders=''
    local   schema=''
    local   path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        :
    elif [[ $app_folders = "['$appfolder']" ]]; then
        gsettings set org.gnome.desktop.app-folders folder-children "[]"
    else gsettings set org.gnome.desktop.app-folders folder-children "$(
            printf '%s' "$app_folders" | sed --expression="s/, '$appfolder'//"
            )"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$appfolder/
    gsettings reset-recursively "$schema":"$path"
}


# This function records a change made through the GUI.
function capture_gui_changes {
    config_a=$(mktemp -t "$PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$config_a"
    printf  '%s\n'  \
            "$(gettext 'Now make the change in the graphical workspace.')"
    wait_for_enter
    config_b=$(mktemp -t "$PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$config_b"
    report_database_changes "$config_a" "$config_b"
    rm "$config_a" "$config_b"
}


# This function stores the GUI configuration database.
function save_configuration_database {
    # shellcheck disable=SC2034
    local   fase=${1:-unknown}
    local   output_file=${2:-unknown}

    gsettings list-recursively > "$output_file" 2> >($logcmd)

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    printf  '%s\n'  \
            "$(eval_gettext "Config database content captured (\$fase).")"
}


# This function reports the changes to the GUI configuration database.
function report_database_changes {
    local   output_file1=${1:-unknown}
    local   output_file2=${2:-unknown}

    printf '\n%s\n' "$(gettext 'CHANGEs in the configuration database,
< is the old setting (A),
> is the new setting (B):')"
    diff "$output_file1" "$output_file2" | grep --regexp='[>|<]' || true
    printf '\n%s\n' "$(gettext 'When CHANGEs execute:') ${blue}gsettings set \
CHANGE${normal}"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
