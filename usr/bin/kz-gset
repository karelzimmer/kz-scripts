#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Change GUI
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-gset'
readonly PROGRAM_DESC=$(gettext 'Change GUI')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--addaft FAVORITE] [\
-b|--addbef FAVORITE]
               [-d|--delete FAVORITE] [-l|--list] [-r|--reset]
               \$OPTIONS_USAGE")"
readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short optio\
ns too.")

$(gettext '  -a, --addaft FAVORITE
                 add FAVORITE at the end')
$(gettext '  -b, --addbef FAVORITE
                 add FAVORITE at the beginning')
$(gettext '  -d, --delete FAVORITE
                 delete FAVORITE')
$(gettext '  -l, --list     show favorites')
$(gettext '  -r, --reset    set favorites on default values')
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='a:b:d:lr'
readonly X_OPTIONS_LONG=',addaft:,addbef:,delete:,list,reset'


###############################################################################
# Variables
###############################################################################

declare desktopfile=''
declare favorite_argument=''
declare option_addaft=false
declare option_addbef=false
declare option_delete=false
declare option_list=false
declare option_reset=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"
    if [[ $EDITION = 'server' ]]; then
        text="$DISPLAY_NAME: $1: $(gettext 'not allowed on a server')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi

    while true; do
        case $1 in
            -a|--addaft)
                if $option_addaft; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_addaft=true
                favorite_argument=$2
                shift 2
                ;;
            -b|--addbef)
                if $option_addbef; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_addbef=true
                favorite_argument=$2
                shift 2
                ;;
            -d|--delete)
                if $option_delete; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_delete=true
                favorite_argument=$2
                shift 2
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -r|--reset)
                option_reset=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi

    desktopfile=$favorite_argument.desktop
}


# This function processes the script options and arguments.
function process_input {
    if $option_addaft; then
        process_option_addaft
    elif $option_addbef; then
        process_option_addbef
    elif $option_delete; then
        process_option_delete
    elif $option_list; then
        process_option_list
    elif $option_reset; then
        process_option_reset
    else
        capture_gui_changes
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_option_addaft  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$favorite_apps" |
            cut --delimiter=']' --fields=1
            ), '$desktopfile']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_option_addbef  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile', $(
                printf '%s' "$favorite_apps" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_option_delete  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        :
    elif [[ $favorite_apps = [$desktopfile] ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else
        gsettings set org.gnome.shell favorite-apps "$(
            printf  '%s' "$favorite_apps"                   |
            sed     --expression="s/'$desktopfile', //g"    |
            sed     --expression="s/, '$desktopfile'//"
        )"
    fi
}


# This feature lists the favorite apps in the dash/dock.
function process_option_list  {
    text=$(gettext 'Favorite apps:')
    text+="\n$(gsettings get org.gnome.shell favorite-apps)"
    infomsg "$text"
}


# This function resets the favorites to the factory settings.
function process_option_reset  {
    gsettings reset org.gnome.shell favorite-apps
}


# This function records a change made through the GUI.
function capture_gui_changes {
    local config_a_file=''
    local config_b_file=''

    config_a_file=$(mktemp -t "$PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$config_a_file"
    text=$(gettext 'Now make the change in the graphical workspace.')
    infomsg "$text"
    wait_for_enter
    config_b_file=$(mktemp -t "$PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$config_b_file"
    report_database_changes "$config_a_file" "$config_b_file"
    rm --verbose "$config_a_file" "$config_b_file" |& $LOGCMD
}


# This function stores the GUI configuration database.
function save_configuration_database {
    # shellcheck disable=SC2034
    local fase=${1:-unknown}
    local output_file=${2:-unknown}

    gsettings list-recursively > "$output_file" 2> >($LOGCMD)

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    text=$(eval_gettext "Config database content captured (\$fase).")
    infomsg "$text"
}


# This function reports the changes to the GUI configuration database.
function report_database_changes {
    local output_file1=${1:-unknown}
    local output_file2=${2:-unknown}

    text="\n$(gettext "CHANGEs in the configuration database,
< is the old setting (A),
> is the new setting (B):")
"
    text+=$(
        diff "$output_file1" "$output_file2" | grep --regexp='[>|<]' || true
        )
    text+="\n\n$(gettext 'When CHANGEs execute: gsettings set CHANGE')"
    infomsg "$text"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
