#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Change GNOME
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Variables
###############################################################################

declare PROGRAM_NAME='kz-gnome'
declare PROGRAM_DESC=$(gettext 'Change GNOME')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--addaft FAVORITE] [-\
b|--addbef FAVORITE]
                [-d|--delete FAVORITE] [-l|--list] [-r|--reset]
                \$OPTIONS_USAGE")"

declare X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are m\
andatory for short options too.")

$(gettext '  -a, --addaft FAVORITE
                 add FAVORITE at the end')
$(gettext '  -b, --addbef FAVORITE
                 add FAVORITE at the beginning')
$(gettext '  -d, --delete FAVORITE
                 delete FAVORITE')
$(gettext '  -l, --list     show favorites')
$(gettext '  -r, --reset    set favorites on default values')"

declare HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

declare X_OPTIONS_SHORT='a:b:d:lr'
declare X_OPTIONS_LONG=',addaft:,addbef:,delete:,list,reset'

declare DESKTOPFILE=''
declare FAVORITE_ARGUMENT=''
declare OPTION_ADDAFT=false
declare OPTION_ADDBEF=false
declare OPTION_DELETE=false
declare OPTION_LIST=false
declare OPTION_RESET=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local    parsed=''
    local -i parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]
    then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true
    do
        case $1 in
            -a | --addaft )
                if $OPTION_ADDAFT
                then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_ADDAFT=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -b | --addbef )
                if $OPTION_ADDBEF
                then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_ADDBEF=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -d | --delete )
                if $OPTION_DELETE
                then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_DELETE=true
                FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -l | --list )
                OPTION_LIST=true
                shift
                ;;
            -r | --reset )
                OPTION_RESET=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]
    then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi

    if ! $DESKTOP_ENVIRONMENT
    then
        TEXT="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    if ! type gnome-session &> /dev/null
    then
        TEXT=$(gettext 'For GNOME desktop environments only.')
        infomsg "$TEXT"
        exit $OK
    fi

    DESKTOPFILE=$FAVORITE_ARGUMENT.desktop

    if $OPTION_ADDAFT
    then
        process_OPTION_ADDAFT
    elif $OPTION_ADDBEF
    then
        process_OPTION_ADDBEF
    elif $OPTION_DELETE
    then
        process_OPTION_DELETE
    elif $OPTION_LIST
    then
        process_OPTION_LIST
    elif $OPTION_RESET
    then
        process_OPTION_RESET
    else
        capture_gnome_changes
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_OPTION_ADDAFT  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]
    then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$favorite_apps" | grep --quiet --regexp="$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$favorite_apps" |
            cut --delimiter=']' --fields=1
            ), '$DESKTOPFILE']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_OPTION_ADDBEF  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]
    then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE']"
    elif ! printf '%s' "$favorite_apps" | grep --quiet --regexp="$DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "['$DESKTOPFILE', $(
                printf '%s' "$favorite_apps" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_OPTION_DELETE  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]
    then
        :
    elif [[ $favorite_apps = [$DESKTOPFILE] ]]
    then
        gsettings set org.gnome.shell favorite-apps "[]"
    else
        gsettings set org.gnome.shell favorite-apps "$(
            printf  '%s' "$favorite_apps"                   |
            sed     --expression="s/'$DESKTOPFILE', //g"    |
            sed     --expression="s/, '$DESKTOPFILE'//"
        )"
    fi
}


# This feature lists the favorite apps in the dash/dock.
function process_OPTION_LIST  {
    TEXT=$(gettext 'Favorite apps:')
    TEXT+="\n$(gsettings get org.gnome.shell favorite-apps)"
    infomsg "$TEXT"
}


# This function resets the favorites to the factory settings.
function process_OPTION_RESET  {
    gsettings reset org.gnome.shell favorite-apps
}


# This function records a change made through the GNOME desktop environment.
function capture_gnome_changes {
    local config_a_file=''
    local config_b_file=''

    config_a_file=$(mktemp -t "$PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$config_a_file"
    TEXT=$(gettext 'Now make the change in the desktop environment.')
    infomsg "$TEXT"
    wait_for_enter
    config_b_file=$(mktemp -t "$PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$config_b_file"
    report_database_changes "$config_a_file" "$config_b_file"
    rm --verbose "$config_a_file" "$config_b_file" |& $LOGCMD
}


# This function stores the GNOME configuration database.
function save_configuration_database {
    # shellcheck disable=SC2034
    local fase=${1:-unknown}
    local output_file=${2:-unknown}

    gsettings list-recursively > "$output_file" 2> >($LOGCMD)

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    TEXT=$(eval_gettext "Config database content captured (\$fase).")
    infomsg "$TEXT"
}


# This function reports the changes to the GNOME configuration database.
function report_database_changes {
    local output_file_1=${1:-unknown}
    local output_file_2=${2:-unknown}

    TEXT="\n$(gettext "CHANGEs in the configuration database,
< is the old setting (A),
> is the new setting (B):")
"
    TEXT+=$(
        diff "$output_file_1" "$output_file_2" | grep --regexp='[>|<]' || true
        )
    TEXT+="\n\n$(gettext 'When CHANGEs execute: gsettings set CHANGE')"
    infomsg "$TEXT"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
