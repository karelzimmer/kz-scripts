#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Change KZ_GNOME
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare KZ_PROGRAM_NAME='kz-gnome'
declare KZ_PROGRAM_DESC
        KZ_PROGRAM_DESC=$(gettext 'Change KZ_GNOME')
declare KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare KZ_USAGE
        KZ_USAGE="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [-a|--addaft \
FAVORITE] [-b|--addbef FAVORITE]
                [-d|--delete FAVORITE] [-l|--list] [-r|--reset]
                \$KZ_OPTIONS_USAGE")"

declare KZ_X_OPTIONS_HELP
        KZ_X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options \
are mandatory for short options too.")

$(gettext '  -a, --addaft FAVORITE
                 add FAVORITE at the end')
$(gettext '  -b, --addbef FAVORITE
                 add FAVORITE at the beginning')
$(gettext '  -d, --delete FAVORITE
                 delete FAVORITE')
$(gettext '  -l, --list     show favorites')
$(gettext '  -r, --reset    set favorites on default values')"

declare KZ_HELP
        KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_X_OPTIONS_HELP
$KZ_OPTIONS_HELP"

declare KZ_X_OPTIONS_SHORT='a:b:d:lr'
declare KZ_X_OPTIONS_LONG=',addaft:,addbef:,delete:,list,reset'

declare KZ_DESKTOPFILE=''
declare KZ_FAVORITE_ARGUMENT=''
declare KZ_OPTION_ADDAFT=false
declare KZ_OPTION_ADDBEF=false
declare KZ_OPTION_DELETE=false
declare KZ_OPTION_LIST=false
declare KZ_OPTION_RESET=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                                               \
                --options       "${KZ_OPTIONS_SHORT}$KZ_X_OPTIONS_SHORT"    \
                --longoptions   "${KZ_OPTIONS_LONG}$KZ_X_OPTIONS_LONG"      \
                --name          "$KZ_DISPLAY_NAME"                          \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -a | --addaft )
                if $KZ_OPTION_ADDAFT; then
                    KZ_TEXT="$KZ_DISPLAY_NAME: $1 $2: $(gettext "too many \
options")
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_ADDAFT=true
                KZ_FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -b | --addbef )
                if $KZ_OPTION_ADDBEF; then
                    KZ_TEXT="$KZ_DISPLAY_NAME: $1 $2: $(gettext "too many \
options")
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_ADDBEF=true
                KZ_FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -d | --delete )
                if $KZ_OPTION_DELETE; then
                    KZ_TEXT="$KZ_DISPLAY_NAME: $1 $2: $(gettext "too many \
options")
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_DELETE=true
                KZ_FAVORITE_ARGUMENT=$2
                shift 2
                ;;
            -l | --list )
                KZ_OPTION_LIST=true
                shift
                ;;
            -r | --reset )
                KZ_OPTION_RESET=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    if ! $KZ_DESKTOP_ENVIRONMENT; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $(gettext "no desktop environment \
available")
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    if ! $KZ_GNOME; then
        KZ_TEXT=$(gettext 'For KZ_GNOME desktop environments only.')
        infomsg "$KZ_TEXT"
        exit $KZ_OK
    fi

    KZ_DESKTOPFILE=$KZ_FAVORITE_ARGUMENT.desktop

    if $KZ_OPTION_ADDAFT; then
        process_KZ_OPTION_ADDAFT
    elif $KZ_OPTION_ADDBEF; then
        process_KZ_OPTION_ADDBEF
    elif $KZ_OPTION_DELETE; then
        process_KZ_OPTION_DELETE
    elif $KZ_OPTION_LIST; then
        process_KZ_OPTION_LIST
    elif $KZ_OPTION_RESET; then
        process_KZ_OPTION_RESET
    else
        capture_gnome_changes
    fi
}


# This function adds a favorite to the end of the dash/dock.
function process_KZ_OPTION_ADDAFT () {
    local L_FAVORITE_APPS=''

    L_FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $L_FAVORITE_APPS = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$KZ_DESKTOPFILE']"
    elif !  printf '%s' "$L_FAVORITE_APPS" |
            grep --quiet --regexp="$KZ_DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$L_FAVORITE_APPS" |
            cut --delimiter=']' --fields=1
            ), '$KZ_DESKTOPFILE']"
    fi
}


# This function adds a favorite to the beginning of the dash/dock.
function process_KZ_OPTION_ADDBEF () {
    local L_FAVORITE_APPS=''

    L_FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $L_FAVORITE_APPS = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$KZ_DESKTOPFILE']"
    elif !  printf '%s' "$L_FAVORITE_APPS" |
            grep --quiet --regexp="$KZ_DESKTOPFILE"
    then
        gsettings set org.gnome.shell favorite-apps "['$KZ_DESKTOPFILE', $(
                printf '%s' "$L_FAVORITE_APPS" | cut --delimiter='[' --fields=2
                )"
    fi
}


# This function removes a favorite from the dash/dock.
function process_KZ_OPTION_DELETE () {
    local L_FAVORITE_APPS=''

    L_FAVORITE_APPS=$(gsettings get org.gnome.shell favorite-apps)

    if [[ $L_FAVORITE_APPS = '@as []' ]]; then
        :
    elif [[ $L_FAVORITE_APPS = [$KZ_DESKTOPFILE] ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else
        gsettings set org.gnome.shell favorite-apps "$(
            printf  '%s' "$L_FAVORITE_APPS"                 |
            sed     --expression="s/'$KZ_DESKTOPFILE', //g" |
            sed     --expression="s/, '$KZ_DESKTOPFILE'//"
            )"
    fi
}


# This feature lists the favorite apps in the dash/dock.
function process_KZ_OPTION_LIST () {
    KZ_TEXT=$(gettext 'Favorite apps:')
    KZ_TEXT+="\n$(gsettings get org.gnome.shell favorite-apps)"
    infomsg "$KZ_TEXT"
}


# This function resets the favorites to the factory settings.
function process_KZ_OPTION_RESET () {
    gsettings reset org.gnome.shell favorite-apps
}


# This function records a change made through the KZ_GNOME desktop environment.
function capture_gnome_changes() {
    local L_CONFIG_A_FILE=''
    local L_CONFIG_B_FILE=''

    L_CONFIG_A_FILE=$(mktemp -t "$KZ_PROGRAM_NAME-config-a-XXXXXXXXXX")
    save_configuration_database A "$L_CONFIG_A_FILE"

    KZ_TEXT=$(gettext 'Now make the change in the desktop environment.')
    infomsg "$KZ_TEXT"

    wait_for_enter

    L_CONFIG_B_FILE=$(mktemp -t "$KZ_PROGRAM_NAME-config-b-XXXXXXXXXX")
    save_configuration_database B "$L_CONFIG_B_FILE"

    report_database_changes "$L_CONFIG_A_FILE" "$L_CONFIG_B_FILE"

    rm --verbose "$L_CONFIG_A_FILE" "$L_CONFIG_B_FILE" |& $LOGCMD
}


# This function stores the KZ_GNOME configuration database.
function save_configuration_database() {
    # shellcheck disable=SC2034
    local L_FASE=${1:-unknown}
    local L_OUTPUT_FILE=${2:-unknown}

    gsettings list-recursively > "$L_OUTPUT_FILE" 2> >($LOGCMD)

    sort    --unique                \
            --output="$L_OUTPUT_FILE" \
            "$L_OUTPUT_FILE"

    KZ_TEXT=$(eval_gettext "Config database content captured (\$L_FASE).")
    infomsg "$KZ_TEXT"
}


# This function reports the changes to the KZ_GNOME configuration database.
function report_database_changes() {
    local L_OUTPUT_FILE_1=${1:-unknown}
    local L_OUTPUT_FILE_2=${2:-unknown}

    KZ_TEXT="\n$(gettext "CHANGEs in the configuration database,
< is the old setting (A),
> is the new setting (B):")
"
    KZ_TEXT+=$(
        diff "$L_OUTPUT_FILE_1" "$L_OUTPUT_FILE_2" | grep --regexp='[>|<]' ||
        true
        )
    KZ_TEXT+="\n\n$(gettext 'When CHANGEs, execute: gsettings set CHANGE')"
    infomsg "$KZ_TEXT"
}


# This function controls the termination of the script.
function term_script() {
    exit $KZ_OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
