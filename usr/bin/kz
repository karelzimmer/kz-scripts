#!/usr/bin/env python3
# #############################################################################
# SPDX-FileComment: Execute the kz command
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
# #############################################################################


# #############################################################################
# Imports
# #############################################################################

import getopt
import gettext
import kz_common as kz
import os
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


# #############################################################################
# Constants
# #############################################################################

PROGRAM_NAME: str = 'kz'
PROGRAM_DESC: str = _('Execute the kz command')

USAGE: str = _("Usage: kz [-l|--list] [-h|--help] [-m|--manual] [-u|--usage]\n"
               "          [-v|--version] <command> [<arguments>]")

HELP_LINES: list[str] = [
    _('Usage: kz [<options>] <command> [<arguments>]'),
    '',
    PROGRAM_DESC + '.',
    '',
    _('Options:'),
    _('  -l, --list     show available commands'),
    _('  -h, --help     show this help text'),
    _('  -m, --manual   show manual page'),
    _('  -u, --usage    show a short usage summary'),
    _('  -v, --version  show program version'),
    '',
    _('Arguments:'),
    _('  <command>      execute command'),
    _('  <arguments>    arguments for command')
    ]
HELP: str = '\n'.join(HELP_LINES)
del HELP_LINES

OPTIONS_SHORT: str = 'lhmuv'
OPTIONS_LONG: list[str] = ['list', 'help', 'manual', 'usage', 'version']


# #############################################################################
# Globals
# #############################################################################


# #############################################################################
# Functions
# #############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    arg_num: int = 0
    exc: str = ''
    exec: str = '/usr/bin/kz'
    text: str

    for arg_num in range(len(sys.argv)):
        if arg_num == 0:
            continue
        if arg_num == 1:
            # Check if the option for kz is specified.
            if sys.argv[arg_num].startswith('-'):
                check_input(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)
                term()
            else:
                # Build kz-<command> and check if kz-<command> exists.
                exec += '-' + sys.argv[arg_num]
                if not os.path.exists(exec):
                    text = 'kz: ' + sys.argv[arg_num] + ': ' + \
                        _('command does not exist') + '\n' + USAGE
                    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
                    kz.term(PROGRAM_NAME, 1)
        else:
            # Build kz-<command> <arguments>.
            exec += ' ' + sys.argv[arg_num]

    if exec == '/usr/bin/kz':
        text = PROGRAM_NAME + ': ' + _('command is required') + '\n' + \
               USAGE
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    else:
        text = f'Restart (exec {exec}...)'
        kz.logmsg(PROGRAM_NAME, text)
        try:
            subprocess.run(f'exec {exec}', executable='bash', shell=True)
        except KeyboardInterrupt:
            text = _('Program {} has been interrupted.').format(PROGRAM_NAME)
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)
        except Exception as exc:
            text = str(exc)
            kz.logmsg(PROGRAM_NAME, text)
            text = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)
        else:
            term()


def check_input(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                HELP: str) -> None:
    """
    This function checks the script input.
    """
    args: list[str] = []
    err: str = ''
    opts: list[tuple[str, str]] = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        text = f'{program_name}: {err}\n{USAGE}'
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP, opts, args)


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str, opts: list[tuple[str, str]],
                    args: list[str]) -> None:
    """
    This function handles the script options and arguments.
    """
    arg: str = ''
    opt: str = ''
    text: str

    for opt, arg in opts:
        if opt in ('-l', '--list'):
            process_option_list()
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-h', '--help'):
            kz.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-m', '--manual'):
            kz.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-u', '--usage'):
            kz.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-v', '--version'):
            kz.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        else:
            text = PROGRAM_NAME + ': getopt: ' + _('internal error')
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)

    if args:
        # Check for arguments n/a for this script, is handled earlier.
        None


def process_option_list() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    text: str

    text = _('The following commands are available:') + '\n\n' + \
        _('NUM  COMMAND') + '\n'
    command: str = f"find   /usr/bin/kz-*               \
                            -maxdepth 1                 \
                            -type f                     \
                            -executable                 \
                            -readable                   \
                            -not -name '*-pkexec'       \
                            -not -name '*~'             \
                            -printf '%f\n'          |   \
                     sort                           |   \
                     sed    --expression='s/kz-//'  |   \
                     nl     --number-width=3            \
                            --number-format=rn          \
                            --number-separator='  '     \
                            --body-numbering=a"

    # Python 3.6.9 version on Ubuntu 18.04 does not have parameter 'text=True'.
    try:
        text += subprocess.run(command, stdout=subprocess.PIPE,
                               shell=True, check=True, text=True).stdout
    except Exception:
        text += '  0  ' + _('Use "man kz" for available commands.') + '\n'

    text += '\n' + _('Use "kz <command> [<arguments>]" to execute a command.')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz.term(PROGRAM_NAME, 0)


# #############################################################################
# Main
# #############################################################################

kz.init(PROGRAM_NAME)
process()
term()
