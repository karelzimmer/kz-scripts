#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Run the kz command
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import os
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz'
PROGRAM_DESC: str = _('Run the kz command')
DISPLAY_NAME: str = PROGRAM_NAME.replace('kz-', 'kz ')

USAGE: str = (f"{_('kz <command> [<arguments>] [-l|--list]')} "
              f"{kz_common.OPTIONS_USAGE}")

X_OPTIONS_HELP: str = f"{_('  -l, --list     show available commands')}"

HELP: str = (f"{_('Usage: {} <arguments> [<options>]').format(DISPLAY_NAME)}"
             f'\n\n{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{X_OPTIONS_HELP}\n'
             f'{kz_common.OPTIONS_HELP}\n\n'
             f"{_('Arguments:')}\n"
             f"{_('  <command>      execute command')}\n"
             f"{_('  <arguments>    arguments for command')}")


###############################################################################
# Functions
###############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    ARG_NUM: int = 0
    EXEC: str = '/usr/bin/kz'
    TEXT: str = ''

    for ARG_NUM in range(len(sys.argv)):
        if ARG_NUM == 0:
            continue
        if ARG_NUM == 1:
            # Check if the option for kz is specified.
            if sys.argv[ARG_NUM].startswith('-'):
                kz_common.process_options(PROGRAM_NAME, PROGRAM_DESC,
                                          DISPLAY_NAME, USAGE, HELP)
                process_x_options()
                term()
            else:
                # Build kz-<command> and check if kz-<command> exists.
                EXEC += '-' + sys.argv[ARG_NUM]
                if not os.path.exists(EXEC):
                    TEXT = f'{DISPLAY_NAME}: {sys.argv[ARG_NUM]}: '
                    TEXT += f"{_('command does not exist')}\n"
                    TEXT += f"{_('Usage:')} {USAGE}"
                    print(TEXT)
                    kz_common.term(DISPLAY_NAME, kz_common.ERR)
        else:
            # Build kz-<command> <arguments>...
            EXEC += ' ' + sys.argv[ARG_NUM]

    if EXEC == '/usr/bin/kz':
        TEXT = f"{DISPLAY_NAME}: {_('command is required')}\n"
        TEXT += f"{_('Usage:')} {USAGE}"
        print(TEXT)
        kz_common.term(DISPLAY_NAME, kz_common.ERR)
    else:
        TEXT = f'Restart (exec {EXEC}...)'
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        try:
            subprocess.run(f'exec {EXEC}', executable='bash', shell=True)
        except KeyboardInterrupt:
            TEXT = _('Program {} has been interrupted.').format(PROGRAM_NAME)
            kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)
        except Exception as exc:
            TEXT = str(exc)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
            TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(DISPLAY_NAME, kz_common.ERR)
        else:
            term()


def process_x_options() -> None:
    """
    This function handles the script options and arguments.
    """
    ARGS = None
    PARSER = None

    PARSER = argparse.ArgumentParser(prog=DISPLAY_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-l', '--list', action='store_true')

    ARGS = PARSER.parse_args()

    if ARGS.list:
        process_option_list()


def process_option_list() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    TEXT: str = f"{_('The following commands are available:')}\n\n"
    TEXT += f"{_('NUM  COMMAND')}\n"
    COMMAND: str = f"find   /usr/bin/kz-*               \
                            -maxdepth 1                 \
                            -type f                     \
                            -executable                 \
                            -readable                   \
                            -not -name '*~'             \
                            -not -name kz               \
                            -printf '%f\n'          |   \
                     sort                           |   \
                     sed    --expression='s/kz-//'  |   \
                     nl     --number-width=3            \
                            --number-format=rn          \
                            --number-separator='  '     \
                            --body-numbering=a"

    # Python 3.6.9 version on Ubuntu 18.04 does not have parameter 'text=True'.
    try:
        TEXT += subprocess.run(COMMAND, stdout=subprocess.PIPE,
                               shell=True, check=True, text=True).stdout
    except Exception:
        TEXT += '  0  ' + _('Use "man kz" for available commands.') + '\n'

    TEXT += '\n' + _('Use "kz <command> [<arguments>]" to execute a command.')
    print(TEXT)

    term()


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz_common.term(DISPLAY_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(DISPLAY_NAME)
process()
term()
