#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Run the kz command
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import getopt
import gettext
import kz_common
import os
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz'
PROGRAM_DESC: str = _('Run the kz command')

USAGE: str = (f'kz [-l|--list] {kz_common.OPTIONS_USAGE} '
              f"{_('<command> [<arguments>]')} ")

OPTIONS_HELP: str = f"{_('  -l, --list     show available commands')}"

HELP: str = (f"{_('Usage: kz [<options>] <command> [<arguments>]')}"
             f'\n\n{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{OPTIONS_HELP}\n'
             f'{kz_common.OPTIONS_HELP}\n\n'
             f"{_('Arguments:')}\n"
             f"{_('  <command>      execute command')}\n"
             f"{_('  <arguments>    arguments for command')}")

OPTIONS_SHORT: str = 'hmuvl'
OPTIONS_LONG: list = ['help', 'manual', 'usage', 'version', 'list']


###############################################################################
# Globals
###############################################################################


###############################################################################
# Functions
###############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    arg_num: int = 0
    exc: str = ''
    exec: str = '/usr/bin/kz'

    for arg_num in range(len(sys.argv)):
        if arg_num == 0:
            continue
        if arg_num == 1:
            # Check if the option for kz is specified.
            if sys.argv[arg_num].startswith('-'):
                process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)
                term()
            else:
                # Build kz-<command> and check if kz-<command> exists.
                exec += '-' + sys.argv[arg_num]
                if not os.path.exists(exec):
                    TEXT = f'kz: {sys.argv[arg_num]}: '
                    TEXT += f"{_('command does not exist')}\n"
                    TEXT += f"{_('Usage:')} {USAGE}"
                    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
                    kz_common.term(PROGRAM_NAME, kz_common.ERR)
        else:
            # Build kz-<command> <arguments>...
            exec += ' ' + sys.argv[arg_num]

    if exec == '/usr/bin/kz':
        TEXT = f"{PROGRAM_NAME}: {_('command is required')}\n"
        TEXT += f"{_('Usage:')} {USAGE}"
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    else:
        TEXT = f'Restart (exec {exec}...)'
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        try:
            subprocess.run(f'exec {exec}', executable='bash', shell=True)
        except KeyboardInterrupt:
            TEXT = _('Program {} has been interrupted.').format(PROGRAM_NAME)
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)
        except Exception as exc:
            TEXT = str(exc)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
            TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)
        else:
            term()


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str) -> None:
    """
    This function handles the script options and arguments.
    """
    args: list = []
    err: str = ''
    opt: str = ''
    opts: list = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        TEXT = f'{program_name}: {err}\n'
        TEXT += f"{_('Usage:')} {USAGE}"
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)

    for opt, arg in opts:
        if opt in ('-l', '--list'):
            process_option_list()
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-h', '--help'):
            kz_common.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-m', '--manual'):
            kz_common.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-u', '--usage'):
            kz_common.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz_common.term(PROGRAM_NAME, kz_common.OK)
        elif opt in ('-v', '--version'):
            kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz_common.term(PROGRAM_NAME, kz_common.OK)

    if args:
        # Check for arguments N/A for this script, is handled earlier.
        None


def process_option_list() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    TEXT = f"{_('The following commands are available:')}\n\n"
    TEXT += f"{_('NUM  command')}\n"
    command: str = f"find   /usr/bin/kz-*               \
                            -maxdepth 1                 \
                            -type f                     \
                            -executable                 \
                            -readable                   \
                            -not -name '*~'             \
                            -not -name kz               \
                            -printf '%f\n'          |   \
                     sort                           |   \
                     sed    --expression='s/kz-//'  |   \
                     nl     --number-width=3            \
                            --number-format=rn          \
                            --number-separator='  '     \
                            --body-numbering=a"

    # Python 3.6.9 version on Ubuntu 18.04 does not have parameter 'text=True'.
    try:
        TEXT += subprocess.run(command, stdout=subprocess.PIPE,
                               shell=True, check=True, text=True).stdout
    except Exception:
        TEXT += '  0  ' + _('Use "man kz" for available commands.') + '\n'

    TEXT += '\n' + _('Use "kz <command> [<arguments>]" to execute a command.')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(PROGRAM_NAME)
process()
term()
