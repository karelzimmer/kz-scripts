#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")/kz_common.sh"


###############################################################################
# Variables
###############################################################################

declare PROGRAM_NAME='kz-dev'
declare PROGRAM_DESC
        PROGRAM_DESC=$(gettext 'Build development environment')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE
        USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")

declare HELP
        HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       PARSED=''
    local   -i  PARSED_RC=0

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || PARSED_RC=$?
    if [[ $PARSED_RC -ne $OK ]]
    then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true
    do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]
    then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi

    if ! $DESKTOP_ENVIRONMENT
    then
        TEXT="$DISPLAY_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    become_root_check || exit $OK
    check_dependencies
    pull_repos
    download_website
}


# This function checks and installs dependencies.
function check_dependencies {
    local ESC_GETTEXT='gettext'

    TEXT=$(gettext 'Check dependencies')...
    infomsg "$TEXT"
    kz-install fakeroot $ESC_GETTEXT git jq lftp nmap python shellcheck vscode
    kz-setup vscode
}


# This function retrieves the public repos.
function pull_repos {
    local BIN_REPO=$HOME/bin

    git config --global user.name 'Karel Zimmer'
    git config --global user.email 'karel.zimmer@gmail.com'
    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d $BIN_REPO ]]
    then
        cd "$BIN_REPO"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$BIN_REPO"
    fi
    TEXT=$(gettext 'Pull repos')...
    infomsg "$TEXT"
    # Call gitpull.
    logmsg 'Calling gitpull...'
    "$BIN_REPO/"gitpull
    logmsg 'Called gitpull.'
    printf '%b\n' "$(gettext 'Status repos')..."
    # Call gitstat.
    logmsg 'Calling gitstat...'
    "$BIN_REPO/"gitstat
    logmsg 'Called gitstat.'
}


# This function downloads the website.
function download_website {
    local FTP_SET='set ssl:verify-certificate no'
    local FTP_FROM=/httpdocs
    local FTP_TO=$HOME/kz-uploads/dist
    local FTP_OPTS='--delete --verbose'
    local FTP_CMD="mirror  $FTP_OPTS $FTP_FROM $FTP_TO; exit"
    local FTP_HOST=server106.hosting2go.nl
    local FTP_USER=kzimmer
    local FTP_LOGIN=$HOME/.$FTP_HOST'.login'
    local PROMPT

    PROMPT="$(gettext 'Password for') ftp://$FTP_HOST': "
    if [[ ! -f $FTP_LOGIN ]]
    then
        read -rsp "$PROMPT" < /dev/tty
        printf '%s' "$REPLY" > "$FTP_LOGIN"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$FTP_LOGIN" |& $LOGCMD
    fi
    if ! lftp   --user "$FTP_USER"                  \
                --password "$(cat "$FTP_LOGIN")"    \
                -e "$FTP_SET; $FTP_CMD"             \
                "$FTP_HOST"
    then
        # Force entering the password next time.
        rm --verbose "$FTP_LOGIN"*
        TEXT=$(gettext 'Website download failed.')
        errormsg "$TEXT"
        exit $ERROR
    fi
}


# This function controls the termination of the script.
function term_script {
    TEXT="${GREEN}$DISPLAY_NAME $(gettext 'finished')$NORMAL"
    infomsg "$TEXT"
    exit $OK
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
