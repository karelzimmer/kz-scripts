#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz dev'
PROGRAM_DESC=$(gettext 'Build development environment')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: \$PROGRAM_NAME \$OPTIONS_USAGE")
readonly USAGE

HELP="$(eval_gettext "Usage: \$PROGRAM_NAME [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''
    local -i RC=$OK

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$PROGRAM_NAME"     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$PROGRAM_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi

    if ! $DESKTOP_ENVIRONMENT; then
        TEXT="$PROGRAM_NAME: $(gettext 'no desktop environment available')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local TEXT=''

    if ! $APT; then
        TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$TEXT"
        exit $ERR
    fi
    become_root_check || exit $OK
    check_dependencies
    pull_repos
    download_website
}


# This function checks and installs dependencies.
function check_dependencies() {
    local ESC_GETTEXT='gettext'
    local TEXT=''

    TEXT=$(gettext 'Check dependencies')...
    infomsg "$TEXT"

    # Call kz install.
    logmsg 'Calling kz install...'
    kz  install         \
        fakeroot        \
        $ESC_GETTEXT    \
        git             \
        jq              \
        lftp            \
        nmap            \
        python          \
        rpm             \
        shellcheck      \
        vscode
    logmsg 'Called kz install.'

    # Call kz setup.
    logmsg 'Calling kz setup...'
    kz setup vscode
    logmsg 'Called kz setup.'
}


# This function retrieves the public repos.
function pull_repos() {
    local BIN_REPO=$HOME/bin

    PROMPT='Git user.name: '
    read -rp "$PROMPT"
    git config --global user.name "$REPLY"

    PROMPT='Git user.email: '
    read -rp "$PROMPT"
    git config --global user.email "$REPLY"

    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d $BIN_REPO ]]; then
        cd "$BIN_REPO"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$BIN_REPO"
    fi

    TEXT=$(gettext 'Pull repos')...
    infomsg "$TEXT"

    # Call gitpull.
    logmsg 'Calling gitpull...'
    "$BIN_REPO"/gitpull
    logmsg 'Called gitpull.'

    printf '%b\n' "$(gettext 'Status repos')..."

    # Call gitstatus.
    logmsg 'Calling gitstatus...'
    "$BIN_REPO"/gitstatus
    logmsg 'Called gitstatus.'
}


# This function downloads the website.
function download_website() {
    local FTP_FROM=/httpdocs
    local FTP_HOST=server106.hosting2go.nl
    local FTP_LOGIN=$HOME/.$FTP_HOST'.login'
    local FTP_OPTS='--delete --verbose'
    local FTP_SET='set ssl:verify-certificate no'
    local FTP_TO=$HOME/kz-uploads/dist
    local FTP_USER=kzimmer
    local FTP_X_CMD="mirror  $FTP_OPTS $FTP_FROM $FTP_TO; exit"
    local PROMPT=''
    local TEXT=''

    if [[ ! -f $FTP_LOGIN ]]; then
        PROMPT="$(gettext 'Password for') ftp://$FTP_HOST': "
        read -rsp "$PROMPT" < /dev/tty
        printf '%s' "$REPLY" > "$FTP_LOGIN"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$FTP_LOGIN" |& $LOGCMD
    fi

    if ! lftp   --user "$FTP_USER"                  \
                --password "$(cat "$FTP_LOGIN")"    \
                -e "$FTP_SET; $FTP_X_CMD"             \
                "$FTP_HOST"; then
        # Force entering the password next time.
        rm --verbose "$FTP_LOGIN"*
        TEXT=$(gettext 'Website download failed.')
        errmsg "$TEXT"
        exit $ERR
    fi
    # Empty REPLY with passowrd.
    REPLY=''
}


# This function controls the termination of the script.
function term_script() {
    TEXT=$(gettext 'Complete!')
    infomsg "$TEXT"
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
