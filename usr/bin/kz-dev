#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare KZ_PROGRAM_NAME='kz-dev'
declare KZ_PROGRAM_DESC
        KZ_PROGRAM_DESC=$(gettext 'Build development environment')
declare KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare KZ_USAGE
        KZ_USAGE=$(eval_gettext "Usage: \$KZ_DISPLAY_NAME \$KZ_OPTIONS_USAGE")

declare KZ_HELP
        KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_OPTIONS_HELP"


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                       \
                --options       "$KZ_OPTIONS_SHORT" \
                --longoptions   "$KZ_OPTIONS_LONG"  \
                --name          "$KZ_DISPLAY_NAME"  \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    if ! $KZ_DESKTOP_ENVIRONMENT; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $(gettext "no desktop environment \
available")
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    if ! $KZ_DEB; then
        KZ_TEXT=$(gettext 'Must run on a Debian or Debian-based system.')
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
    become_root_check || exit $KZ_OK
    check_dependencies
    pull_repos
    download_website
}


# This function checks and installs dependencies.
function check_dependencies() {
    local L_ESC_GETTEXT='gettext'

    KZ_TEXT=$(gettext 'Check dependencies')...
    infomsg "$KZ_TEXT"

    # Call kz install.
    logmsg 'Calling kz install...'
    kz  install         \
        fakeroot        \
        $L_ESC_GETTEXT  \
        git             \
        jq              \
        lftp            \
        nmap            \
        python          \
        rpm             \
        shellcheck      \
        vscode
    logmsg 'Called kz install.'

    # Call kz setup.
    logmsg 'Calling kz setup...'
    kz setup vscode
    logmsg 'Called kz setup.'
}


# This function retrieves the public repos.
function pull_repos() {
    local L_BIN_REPO=$HOME/bin

    L_PROMPT='Git user.name: '
    read -rp "$L_PROMPT"
    git config --global user.name "$REPLY"

    L_PROMPT='Git user.email: '
    read -rp "$L_PROMPT"
    git config --global user.email "$REPLY"

    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d $L_BIN_REPO ]]; then
        cd "$L_BIN_REPO"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$L_BIN_REPO"
    fi

    KZ_TEXT=$(gettext 'Pull repos')...
    infomsg "$KZ_TEXT"

    # Call gitpull.
    logmsg 'Calling gitpull...'
    "$L_BIN_REPO"/gitpull
    logmsg 'Called gitpull.'

    printf '%b\n' "$(gettext 'Status repos')..."

    # Call gitstat.
    logmsg 'Calling gitstat...'
    "$L_BIN_REPO"/gitstat
    logmsg 'Called gitstat.'
}


# This function downloads the website.
function download_website() {
    local L_FTP_SET='set ssl:verify-certificate no'
    local L_FTP_FROM=/httpdocs
    local L_FTP_TO=$HOME/kz-uploads/dist
    local L_FTP_OPTS='--delete --verbose'
    local L_FTP_CMD="mirror  $L_FTP_OPTS $L_FTP_FROM $L_FTP_TO; exit"
    local L_FTP_HOST=server106.hosting2go.nl
    local L_FTP_USER=kzimmer
    local L_FTP_LOGIN=$HOME/.$L_FTP_HOST'.login'
    local L_PROMPT

    L_PROMPT="$(gettext 'Password for') ftp://$L_FTP_HOST': "

    if [[ ! -f $L_FTP_LOGIN ]]; then
        read -rsp "$L_PROMPT" < /dev/tty
        printf '%s' "$REPLY" > "$L_FTP_LOGIN"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$L_FTP_LOGIN" |& $LOGCMD
    fi

    if ! lftp   --user "$L_FTP_USER"                \
                --password "$(cat "$L_FTP_LOGIN")"  \
                -e "$L_FTP_SET; $L_FTP_CMD"         \
                "$L_FTP_HOST"; then
        # Force entering the password next time.
        rm --verbose "$L_FTP_LOGIN"*
        KZ_TEXT=$(gettext 'Website download failed.')
        errormsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function controls the termination of the script.
function term_script() {
    KZ_TEXT="${KZ_GREEN}$KZ_DISPLAY_NAME $(gettext 'finished')$KZ_NORMAL"
    infomsg "$KZ_TEXT"
    exit $KZ_OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
