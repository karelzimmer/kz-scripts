#!/usr/bin/env python3
# #############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
# #############################################################################


# #############################################################################
# Imports
# #############################################################################

import getopt
import gettext
import kz_common as kz
import os
import subprocess
import getpass
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


# #############################################################################
# Constants
# #############################################################################

PROGRAM_NAME: str = 'kz-dev'
PROGRAM_DESC: str = _('Build development environment')

USAGE: str = _("Usage: kz dev [-h|--help] [-m|--manual] [-u|--usage] "
               "[-v|--version]")

HELP_LINES: list[str] = [
    _('Usage: kz dev [<options>]'),
    '',
    PROGRAM_DESC + '.',
    '',
    _('Options:'),
    _('  -h, --help     show this help text'),
    _('  -m, --manual   show manual page'),
    _('  -u, --usage    show a short usage summary'),
    _('  -v, --version  show program version'),
    ]
HELP: str = '\n'.join(HELP_LINES)
del HELP_LINES

OPTIONS_SHORT: str = 'hmuv'
OPTIONS_LONG: list[str] = ['help', 'manual', 'usage', 'version']


# #############################################################################
# Globals
# #############################################################################


# #############################################################################
# Functions
# #############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    command1: str = 'grep --quiet debian /etc/os-release'
    command2: str = 'sudo true'
    text: str

    if subprocess.run(command1, executable='bash',
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                      shell=True).returncode != 0:
        text = _('Must run on a Debian or Debian-based system.')
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    check_input(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)
    if not kz.become_check(PROGRAM_NAME, PROGRAM_DESC):
        kz.term(PROGRAM_NAME, 0)

    try:
        subprocess.run(command2, executable='bash', shell=True, check=True)
    except KeyboardInterrupt:
        text = _('Program {} has been interrupted.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    check_dependencies()
    pull_repos()
    download_website()


def check_input(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                HELP: str) -> None:
    """
    This function checks the script input.
    """
    args: list[str] = []
    err: str = ''
    opts: list[tuple[str, str]] = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        text = f'{program_name}: {err}\n{USAGE}'
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP, opts, args)


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str, opts: list[tuple[str, str]],
                    args: list[str]) -> None:
    """
    This function handles the script options and arguments.
    """
    arg: str = ''
    opt: str = ''
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            kz.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-m', '--manual'):
            kz.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-u', '--usage'):
            kz.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-v', '--version'):
            kz.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        else:
            text = PROGRAM_NAME + ': getopt: ' + _('internal error')
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)

    if args:
        text = program_name + ': ' + ' '.join(args) + ': ' + \
            _('arguments are not allowed') + '\n' + USAGE
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)


def check_dependencies() -> None:
    """
    This function checks and installs dependencies.
    """
    esc_gettext: str = 'gettext'
    exc: str = ''
    text: str

    text = _('Install dependencies...')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)

    # Call kz-install.
    text = 'Calling kz-install...'
    kz.logmsg(PROGRAM_NAME, text)
    command: str = f'kz-install         \
                        fakeroot        \
                        {esc_gettext}   \
                        git             \
                        jq              \
                        lftp            \
                        nmap            \
                        python          \
                        rpm             \
                        shellcheck      \
                        vscode'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    text = 'Called kz-install.'
    kz.logmsg(PROGRAM_NAME, text)

    # Call kz-setup.
    text = 'Calling kz-install...'
    kz.logmsg(PROGRAM_NAME, text)
    command = 'kz-setup vscode'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    text = 'Called kz-setup.'
    kz.logmsg(PROGRAM_NAME, text)


def pull_repos() -> None:
    """
    This function retrieves the public repos.
    """
    bin_repo: str = f'{os.getenv("HOME")}/bin'
    exc: str = ''
    text: str

    text = _('Clone repos...')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)

    # Populate $HOME/bin first.
    if os.path.exists(bin_repo):
        command = f'git -C {bin_repo} pull'
        try:
            subprocess.run(command, executable='bash', shell=True, check=True)
        except Exception as exc:
            text = str(exc)
            kz.logmsg(PROGRAM_NAME, text)
            text = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)
    else:
        command = 'git clone https://github.com/karelzimmer/bin.git ' + \
            bin_repo
        try:
            subprocess.run(command, executable='bash', shell=True, check=True)
        except Exception as exc:
            text = str(exc)
            kz.logmsg(PROGRAM_NAME, text)
            text = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)

    # Call gitclone.
    text = 'Calling gitclone...'
    kz.logmsg(PROGRAM_NAME, text)
    command = f'{bin_repo}/gitclone'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    text = 'Called gitclone.'
    kz.logmsg(PROGRAM_NAME, text)

    text = _('Pull repos...')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)

    # Call gitpull.
    text = 'Calling gitpull...'
    kz.logmsg(PROGRAM_NAME, text)
    command = f'{bin_repo}/gitpull'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    text = 'Called gitpull.'
    kz.logmsg(PROGRAM_NAME, text)

    text = _('Status repos...')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)

    # Call gitstatus.
    text = 'Calling gitstatus...'
    kz.logmsg(PROGRAM_NAME, text)
    command = f'{bin_repo}/gitstatus'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)
    text = 'Called gitstatus.'
    kz.logmsg(PROGRAM_NAME, text)


def download_website() -> None:
    """
    This function downloads the website.
    """
    file = None
    ftp_from: str = '/httpdocs'
    ftp_host: str = 'server106.hosting2go.nl'
    ftp_login: str = f'{os.getenv("HOME")}/.{ftp_host}.login'
    ftp_opts: str = '--delete --verbose'
    ftp_set: str = 'set ssl:verify-certificate no'
    ftp_to: str = f'{os.getenv("HOME")}/kz-uploads/dist'
    ftp_user: str = 'kzimmer'
    ftp_x_cmd: str = f'mirror {ftp_opts} {ftp_from} {ftp_to}; exit'
    text: str

    text = _('Download website...')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)

    if not os.path.exists(ftp_login):
        text = _('Password for') + ' ftp://' + ftp_host + ': '
        with open(ftp_login, 'w') as file:
            file.write(getpass.getpass(text))
        os.chmod(ftp_login, 0o600)

    command: str = f"lftp   --user      {ftp_user}                  \
                            --password  $(cat {ftp_login})          \
                            -e          '{ftp_set}; {ftp_x_cmd}'    \
                            {ftp_host}"
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception:
        os.remove(ftp_login)  # Force entering the password next time.
        text = _('Website download failed.')
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    text = _('Complete!')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    kz.term(PROGRAM_NAME, 0)


# #############################################################################
# Main
# #############################################################################

kz.init(PROGRAM_NAME)
process()
term()
