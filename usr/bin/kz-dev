#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import os
import subprocess
import getpass

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-dev'
PROGRAM_DESC: str = _('Build development environment')

USAGE: str = f'kz dev {kz_common.OPTIONS_USAGE}'

HELP: str = (f"{_('Usage: kz dev [<options>]')}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Functions
###############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    command: str = "grep --quiet debian /etc/os-release"

    kz_common.process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)
    process_x_options()

    kz_common.become_root_check(PROGRAM_NAME, PROGRAM_DESC)

    if subprocess.run(command, executable='bash',
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                      shell=True).returncode != kz_common.OK:
        TEXT = _('Must run on a Debian or Debian-based system.')
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)

    check_dependencies()
    pull_repos()
    download_website()


def process_x_options() -> None:
    """
    This function handles the script options and arguments.
    """
    args = None
    parser = None

    parser = argparse.ArgumentParser(prog='kz dev', usage=USAGE,
                                     add_help=False)

    try:
        args = parser.parse_args()
    except Exception:
        kz_common.term(PROGRAM_NAME, kz_common.ERR)

    if args:
        None


def check_dependencies() -> None:
    """
    This function checks and installs dependencies.
    """
    esc_gettext: str = 'gettext'

    TEXT = _('Check dependencies...')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    # Call kz install.
    TEXT = 'Calling kz install...'
    kz_common.logmsg(PROGRAM_NAME, TEXT)
    command: str = f"kz install         \
                        fakeroot        \
                        {esc_gettext}   \
                        git             \
                        jq              \
                        lftp            \
                        nmap            \
                        python          \
                        rpm             \
                        shellcheck      \
                        vscode"
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    TEXT = 'Called kz install.'
    kz_common.logmsg(PROGRAM_NAME, TEXT)

    # Call kz setup.
    TEXT = 'Calling kz install...'
    kz_common.logmsg(PROGRAM_NAME, TEXT)
    command = 'kz setup vscode'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    TEXT = 'Called kz setup.'
    kz_common.logmsg(PROGRAM_NAME, TEXT)


def pull_repos() -> None:
    """
    This function retrieves the public repos.
    """
    bin_repo: str = f'{os.getenv("HOME")}/bin'

    TEXT = _('Clone repos...')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    if os.path.exists(bin_repo):
        command = f'git -C {bin_repo} pull'
        try:
            subprocess.run(command, executable='bash', shell=True, check=True)
        except Exception as exc:
            TEXT = str(exc)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
            TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)
    else:
        command = 'git clone https://github.com/karelzimmer/bin.git '
        command += f'{bin_repo}'
        try:
            subprocess.run(command, executable='bash', shell=True, check=True)
        except Exception as exc:
            TEXT = str(exc)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
            TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, kz_common.ERR)

    # Call gitclone.
    TEXT = 'Calling gitclone...'
    kz_common.logmsg(PROGRAM_NAME, TEXT)
    command = f'{bin_repo}/gitclone'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    TEXT = 'Called gitclone.'
    kz_common.logmsg(PROGRAM_NAME, TEXT)

    TEXT = _('Pull repos...')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    # Call gitpull.
    TEXT = 'Calling gitpull...'
    kz_common.logmsg(PROGRAM_NAME, TEXT)
    command = f'{bin_repo}/gitpull'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    TEXT = 'Called gitpull.'
    kz_common.logmsg(PROGRAM_NAME, TEXT)

    TEXT = _('Status repos...')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    # Call gitstatus.
    TEXT = 'Calling gitstatus...'
    kz_common.logmsg(PROGRAM_NAME, TEXT)
    command = f'{bin_repo}/gitstatus'
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    TEXT = 'Called gitstatus.'
    kz_common.logmsg(PROGRAM_NAME, TEXT)


def download_website() -> None:
    """
    This function downloads the website.
    """
    file = None
    ftp_from: str = '/httpdocs'
    ftp_host: str = 'server106.hosting2go.nl'
    ftp_login: str = f'{os.getenv("HOME")}/.{ftp_host}.login'
    ftp_opts: str = '--delete --verbose'
    ftp_set: str = 'set ssl:verify-certificate no'
    ftp_to: str = f'{os.getenv("HOME")}/kz-uploads/dist'
    ftp_user: str = 'kzimmer'
    ftp_x_cmd: str = f'mirror {ftp_opts} {ftp_from} {ftp_to}; exit'

    if not os.path.exists(ftp_login):
        TEXT = f"{_('Password for')} ftp://{ftp_host}': "
        with open(ftp_login, 'w') as file:
            file.write(getpass.getpass(TEXT))
        os.chmod(ftp_login, 0o600)

    command: str = f"lftp   --user      {ftp_user}                  \
                            --password  $(cat {ftp_login})          \
                            -e          '{ftp_set}; {ftp_x_cmd}'    \
                            {ftp_host}"
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception:
        # Force entering the password next time.
        os.remove(ftp_login)
        TEXT = _('Website download failed.')
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(PROGRAM_NAME)
process()
term()
