#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Set up apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz setup'
PROGRAM_DESC=$(gettext 'Set up apps')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: kz setup [-a|--apps] [-b|--browse] [-c|--cat]
                [-f|--file <file>] [-g|--gui] [-r|--reset]
                \$OPTIONS_USAGE
                [--] [<app>...]")
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -b, --browse   browse setup file')
$(gettext '  -c, --cat      show contents of command file')
$(gettext "  -f, --file <file>
                 process specified setup file")
$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -r, --reset    set apps on default values')"
readonly X_OPTIONS_HELP

HELP="$(gettext "Usage: kz setup [<options>] [<app>...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further \
option processing")

$(gettext 'Arguments:')
$(gettext '  <app>...       set up specified apps')"
readonly HELP

readonly X_OPTIONS_SHORT='abcf:gr'
readonly X_OPTIONS_LONG=',apps,browse,cat,file:,gui,reset'


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''
    local -i RC=$OK

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$PROGRAM_NAME"                     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -a | --apps )
                OPTION_APPS=true
                shift
                ;;
            -b | --browse )
                OPTION_BROWSE=true
                shift
                ;;
            -c | --cat )
                OPTION_CAT=true
                shift
                ;;
            -f | --file )
                if $OPTION_FILE; then
                    TEXT="$PROGRAM_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_FILE=true
                FILE_ARGUMENT=$2
                shift 2
                ;;
            -g | --gui )
                if ! $GUI; then
                    TEXT=\
"$PROGRAM_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -r | --reset )
                OPTION_RESET=true
                SETUP='Reset'
                RESET='Setup'
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        ARGUMENT_APP=true
        LOGOUT=false
        while [[ -n $* ]]; do
            APP_ARGUMENTS[$1]=$1
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local COMMAND_FILE=''
    local SETUP_FILE=/usr/bin/kz-setup.sh
    local TEXT=''

    if $OPTION_FILE; then
        SETUP_FILE=$FILE_ARGUMENT
    fi

    if [[ ! -f $SETUP_FILE ]]; then
        TEXT=$(eval_gettext "No setup file found, looked for '\$SETUP_FILE'.")
        errmsg "$TEXT"
        exit $ERR
    fi

    if $OPTION_BROWSE; then
        process_option_browse
        exit $OK
    fi

    if $OPTION_APPS; then
        process_option_apps
        exit $OK
    fi

    COMMAND_FILE=$(mktemp -t "kz-setup-commands-XXXXXXXXXX")

    if $ARGUMENT_APP; then
        process_argument_app
    else
        process_input_file_by_user
    fi

    if $OPTION_CAT; then
        process_option_cat
        exit $OK
    fi

    setup_apps
}


# This function browses through the setup file.
function process_option_browse() {
    less --no-init --quit-if-one-screen "$SETUP_FILE"
}


# This function shows the available apps from the setup file.
function process_option_apps() {
    local APPS=''
    local TEXT=''

    TEXT="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')
"
    APPS=$(
        grep    --regexp="#.*$SETUP.*on"    \
                "$SETUP_FILE"               |
        tr      --squeeze-repeats           \
                '[:space:]'                 |
        cut     --delimiter=' '             \
                --fields=3                  |
        sort    --unique                    |
        nl      --number-width=3            \
                --number-format=rn          \
                --number-separator='  '     \
                --body-numbering=a          || true
        )

    if [[ -n $APPS ]]; then
        TEXT+="$APPS

$(gettext 'Use "kz setup <app>..." to set up the apps.')
$(gettext 'Use "kz setup --cat" to view the contents of the setup file.')
$(gettext "Use \"kz setup --cat <app>...\" to view the contents of the apps \
setup file.")
$(gettext "Use \"kz setup --browse\" to view the contents of the default \
setup file.")"
    else
        TEXT+="$(gettext '  0  No apps found.')

$USAGE"
    fi
    infomsg "$TEXT"
}


# This function processes argument <app>.
function process_argument_app() {
    local APP_ARGUMENT=''
    local APP_NOT_FOUND=false
    local TEXT=''

    for APP_ARGUMENT in "${APP_ARGUMENTS[@]}"; do
        process_input_file_by_app
    done

    if $APP_NOT_FOUND; then
        TEXT="$(gettext "Type 'kz setup --apps' for available apps.")"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function generates the command file from the setup file and filters by
# <app>.
function process_input_file_by_app() {
    local APP_MATCH=false
    local INPUT_RECORD=''
    local NO_APP_MATCH=true
    local TEXT=''

    while read -r INPUT_RECORD; do
        case $INPUT_RECORD in
            '' )
                # Empty line.
                continue
                ;;
            '#'*$SETUP*[[:space:]]"$APP_ARGUMENT"[[:space:]]*on* )
                # Matching app record.
                APP_MATCH=true
                NO_APP_MATCH=false
                printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                ;;
            '#'*$SETUP*on* | '#'*$RESET*on* )
                # Mismatched app record.
                # Add empty seperator line between the setup of apps.
                if $APP_MATCH; then
                    printf '\n' >> "$COMMAND_FILE"
                fi
                APP_MATCH=false
                ;;
            * )
                if $APP_MATCH; then
                    # Record for command file.
                    printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                fi
                ;;
        esac
    done < "$SETUP_FILE"

    if $NO_APP_MATCH; then
        APP_NOT_FOUND=true
        TEXT="$PROGRAM_NAME: $APP_ARGUMENT: $(gettext 'app not found')"
        rm --verbose "$COMMAND_FILE" |& $LOGCMD
        infomsg "$TEXT"
    fi
}


# This function generates the command file from the setup file and filters by
# hostname.
function process_input_file_by_user() {
    local HOST_MATCH=false
    local INPUT_RECORD=''

    while read -r INPUT_RECORD; do
        case $INPUT_RECORD in
            '' )
                # Empty line.
                continue
                ;;
            '#'*$SETUP*on*'*' | '#'*$SETUP*on*$HOSTNAME* )
                # Matching app record.
                HOST_MATCH=true
                printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                ;;
            '#'*$SETUP*on* | '#'*$RESET*on* )
                # Mismatched app record.
                # Add empty seperator line between the setup of apps.
                if $HOST_MATCH; then
                    printf '\n' >> "$COMMAND_FILE"
                fi
                HOST_MATCH=false
                ;;
            * )
                if $HOST_MATCH; then
                    # Record for command file.
                    printf '%s\n' "$INPUT_RECORD" >> "$COMMAND_FILE"
                fi
                ;;
        esac
    done < "$SETUP_FILE"
}


# This function displays the contents of the command file.
function process_option_cat() {
    # Add usage information from the setup file at the top.
    TEXT=$(grep --regexp='# Use "' $SETUP_FILE || true)
    printf '%b\n' "$TEXT\n\n$(cat "$COMMAND_FILE")" > "$COMMAND_FILE"

    less --no-init --quit-if-one-screen "$COMMAND_FILE"

    rm --verbose "$COMMAND_FILE" |& $LOGCMD
}


# This function starts setting up the apps.
function setup_apps() {
    local NO_COMMANDS_FOUND=true
    local PROGRAM_ID=${PROGRAM_NAME/kz /kz-}
    local TEXT=''
    local TITLE=''
    local -i APP_TOT_NUM=0
    local -A FAILED_APPS=()

    APP_TOT_NUM=$(
        grep    --regexp="#.*$SETUP.*on"    \
                --count                     \
                "$COMMAND_FILE"             || true
        )
    if [[ $APP_TOT_NUM -eq 0 ]]; then
        return $OK
    fi

    TITLE=$(gettext 'Set up apps')
    TEXT=$(gettext 'Preparing set up')
    logmsg "$TITLE"...

    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     2> /dev/null
            )
    else
        process_command_file
    fi

    if $NO_COMMANDS_FOUND; then
        TEXT=$(gettext 'No commands to execute.' )
        infomsg "$TEXT"
        exit $OK
    fi

    if [[ -n ${FAILED_APPS[*]} ]]; then
        TEXT="$(gettext "The set up of the following apps contains errors:")
${FAILED_APPS[*]}

$(eval_gettext "Use \"journalctl --boot --id=\$PROGRAM_ID\" in Terminal to \
view log messages.")

$(gettext "Try to set up the apps again.")"
        errmsg "$TEXT"
        exit $ERR
    fi

    rm --verbose "$COMMAND_FILE" |& $LOGCMD
}


# This function reads commands from the command file for further processing.
function process_command_file() {
    local APP_NAME_LINE=''
    local APP_NAME=''
    local COMMAND_RECORD=''
    local TEXT=''
    local -i APP_SEQ_NUM=0
    local -i CMD_SEQ_NUM=0

    if ! $OPTION_GUI; then
        TEXT="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        infomsg "$TEXT"
    fi

    while read -r COMMAND_RECORD; do
        case $COMMAND_RECORD in
            '#'*$SETUP* )
                # App record.
                APP_NAME=$(
                    printf '%s\n' "$COMMAND_RECORD"     |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                (( ++APP_SEQ_NUM ))
                CMD_SEQ_NUM=0
                printf  -v APP_NAME_LINE    \
                        "%3d/%-3d  %s"      \
                        "$APP_SEQ_NUM"      \
                        "$APP_TOT_NUM"      \
                        "$APP_NAME"
                ;;
            '' | '#'* )
                # Empty or comment line.
                continue
                ;;
            * )
                # Process command record.
                NO_COMMANDS_FOUND=false
                execute_command "$COMMAND_RECORD"
                ;;
        esac
    done < "$COMMAND_FILE"
}


# This function reports and executes a command from the command file.
function execute_command() {
    local CMD=${1:-unknown}
    local CMD_DIS=''
    local -i CMD_DIS_LEN=0
    local -i CMD_DIS_MAX=0

    (( ++CMD_SEQ_NUM ))

    if $OPTION_GUI; then
        if [[ $CMD_SEQ_NUM -eq 1 ]]; then
            logmsg "$APP_NAME_LINE"
        fi
        printf '%s\n' "#$APP_NAME_LINE

$CMD"
    else
        if [[ $CMD_SEQ_NUM -eq 1 ]]; then
            logmsg  "$APP_NAME_LINE"
            infomsg "$APP_NAME_LINE"
        fi

        # Width 9 characters less, 9 for leading spaces.
        # Rocky Linux 8: COLUMNS: unbound variable ==> $(tput cols).
        CMD_DIS_MAX=$(( $(tput cols) - 9 ))

        if [[ ${#CMD} -gt $CMD_DIS_MAX ]]; then
            # Width 12 characters less, 9 for leading spaces and 3 for trailing
            # ellipsis.
            # Rocky Linux 8: COLUMNS: unbound variable ==> $(tput cols).
            CMD_DIS_LEN=$(( $(tput cols) - 12 ))
            CMD_DIS=${CMD:0:CMD_DIS_LEN}...
        else
            CMD_DIS=$CMD
        fi
        infomsg "         $CMD_DIS"
    fi

    logmsg "$CMD"
    ERREXIT=false
    eval "$CMD" &> >($LOGCMD) || FAILED_APPS[$APP_NAME]=$APP_NAME
    ERREXIT=true
}


# This function controls the termination of the script.
function term_script() {
    local OPERATION
    local TEXT=''

    OPERATION=$(gettext 'set up')

    if $OPTION_RESET; then
        # shellcheck disable=SC2034
        OPERATION=$(gettext 'reset')
    fi
    TEXT=$(eval_gettext "Apps \$OPERATION completed.")

    if $LOGOUT; then

        if $GUI; then
            TEXT+="

$(gettext "You will now be logged out of the computer to finish setting up \
the apps and changing user settings.")"
        else
            TEXT+="

$(gettext "You must log out of the computer to finish setting up the apps and \
changing user settings.
Type 'logout' to log out.")"
        fi

        infomsg "$TEXT"

        if $GUI; then
            $OPTION_GUI || wait_for_enter

            if type gnome-session &> /dev/null; then
                gnome-session-quit --logout --no-prompt
            elif type ksmserver &> /dev/null; then
                qdbus org.kde.ksmserver /KSMServer logout 0 0 0
            elif type lxqt-session &> /dev/null; then
                lxqt-leave --logout
            elif type mate-session &> /dev/null; then
                mate-session-save --logout
            elif type xfce4-session &> /dev/null; then
                xfce4-session-logout --logout
            else
                TEXT='No logout command available.'
                logmsg "$TEXT"
                TEXT=$(gettext 'Log out of the computer yourself.')
                infomsg "$TEXT"
            fi
        fi
    fi

    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    local ARGUMENT_APP=false
    local FILE_ARGUMENT=''
    local LOGOUT=true
    local OPTION_APPS=false
    local OPTION_BROWSE=false
    local OPTION_CAT=false
    local OPTION_FILE=false
    local OPTION_RESET=false
    local RESET='Reset'
    local SETUP='Setup'
    local -A APP_ARGUMENTS=()

    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
