#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Set up apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare     KZ_PROGRAM_NAME='kz-setup'
declare     KZ_PROGRAM_DESC
            KZ_PROGRAM_DESC=$(gettext 'Set up apps')
declare     KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare     KZ_USAGE
            KZ_USAGE=$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [-a|--apps] \
[-c|--cat] [-f|--file FILE] [-g|--gui] [-r|--reset]
                \$KZ_OPTIONS_USAGE [--] [APP...]")

declare     KZ_X_OPTIONS_HELP
            KZ_X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long \
options are mandatory for short options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -c, --cat      show contents of command file')
$(eval_gettext "  -f, --file FILE
                 process FILE (default FILE is /usr/bin/\$KZ_PROGRAM_NAME.sh)")
$(gettext "  -g, --gui      run in graphical mode, requires desktop \
environment")
$(gettext '  -r, --reset    set apps on default values')"

declare     KZ_HELP
            KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...] \
[APP...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_X_OPTIONS_HELP
$KZ_OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further \
option processing")

$(gettext 'Arguments:')
$(gettext '  APP            set up APPs')"

declare     KZ_X_OPTIONS_SHORT='acf:gr'
declare     KZ_X_OPTIONS_LONG=',apps,cat,file:,gui,reset'

declare -A  KZ_APP_ARGUMENTS=()
declare -A  KZ_FAILED_APPS=()
declare     KZ_ARGUMENT_APP=false
declare     KZ_FILE_ARGUMENT=''
declare     KZ_INPUT_FILE=/usr/bin/$KZ_PROGRAM_NAME.sh
declare     KZ_LOGOUT=true
declare     KZ_NO_COMMANDS_FOUND=true
declare     KZ_OPTION_APPS=false
declare     KZ_OPTION_CAT=false
declare     KZ_OPTION_FILE=false
declare     KZ_OPTION_RESET=false
declare     KZ_RESET='Reset'
declare     KZ_SETUP='Setup'
declare     KZ_SETUP_FILE_HEADER
            KZ_SETUP_FILE_HEADER="$(gettext "# For the format of the records \
in this file, see the kz setup man page.")
$(gettext "# To manually running a command, first run the following: source \
kz_common.sh")"


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                                               \
                --options       "${KZ_OPTIONS_SHORT}$KZ_X_OPTIONS_SHORT"    \
                --longoptions   "${KZ_OPTIONS_LONG}$KZ_X_OPTIONS_LONG"      \
                --name          "$KZ_DISPLAY_NAME"                          \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -a | --apps )
                KZ_OPTION_APPS=true
                shift
                ;;
            -c | --cat )
                KZ_OPTION_CAT=true
                shift
                ;;
            -f | --file )
                if $KZ_OPTION_FILE; then
                    KZ_TEXT="$KZ_DISPLAY_NAME: $1 $2: $(gettext "too many \
options")
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_FILE=true
                KZ_FILE_ARGUMENT=$2
                shift 2
                ;;
            -g | --gui )
                if ! $KZ_DESKTOP_ENVIRONMENT; then
                    KZ_TEXT=\
"$KZ_DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_GUI=true
                shift
                ;;
            -r | --reset )
                KZ_OPTION_RESET=true
                KZ_SETUP='Reset'
                KZ_RESET='Setup'
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_ARGUMENT_APP=true
        KZ_LOGOUT=false
        while [[ -n $* ]]; do
            KZ_APP_ARGUMENTS[$1]=$1
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input() {
    local L_COMMAND_FILE=''

    if $KZ_OPTION_FILE; then
        KZ_INPUT_FILE=$KZ_FILE_ARGUMENT
    fi

    if [[ ! -f $KZ_INPUT_FILE ]]; then
        KZ_TEXT=$(eval_gettext "No set up file found, looked for \
'\$KZ_INPUT_FILE'.")
        errormsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    if $KZ_OPTION_APPS; then
        process_option_apps
        exit $KZ_OK
    fi

    L_COMMAND_FILE=$(mktemp -t "$KZ_PROGRAM_NAME-XXXXXXXXXX.sh")

    if $KZ_ARGUMENT_APP; then
        process_argument_app
    else
        process_input_file_by_user
    fi

    if $KZ_OPTION_CAT; then
        process_option_cat
        exit $KZ_OK
    fi

    setup_apps
}



# This function shows the available apps from the input file.
function process_option_apps() {
    local L_APPS=''

    KZ_TEXT="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')\n"
    L_APPS=$(
        grep    --regexp="#.*$KZ_SETUP.*for"    \
                "$KZ_INPUT_FILE"                |
        tr      --squeeze-repeats               \
                '[:space:]'                     |
        cut     --delimiter=' '                 \
                --fields=3                      |
        sort    --unique                        |
        nl      --number-width=3                \
                --number-format=rn              \
                --number-separator='  '         \
                --body-numbering=a              || true
        )

    if [[ -n $L_APPS ]]; then
        KZ_TEXT+=$L_APPS
        KZ_TEXT+="\n
$(eval_gettext "To view the contents of the apps set up file execute: \
\$KZ_DISPLAY_NAME --cat APP...")
$(eval_gettext "To set up the apps execute: \$KZ_DISPLAY_NAME APP...")
$(eval_gettext "To view the contents of the default set up file execute: \
\$KZ_DISPLAY_NAME --cat")"
    else
        KZ_TEXT+="$(gettext '  0  No apps found.')

$KZ_USAGE"
    fi

    if $KZ_OPTION_GUI; then
        infomsg "$KZ_TEXT"
    else
        less --quit-if-one-screen <  <(printf '%b\n' "$KZ_TEXT")
    fi
}


# This function processes argument APP.
function process_argument_app() {
    local L_APP_NOT_FOUND=false
    local L_APP_ARGUMENT=''

    for L_APP_ARGUMENT in "${KZ_APP_ARGUMENTS[@]}"; do
        process_input_file_by_app
    done

    if $L_APP_NOT_FOUND; then
        KZ_TEXT="$(eval_gettext "Type '\$KZ_DISPLAY_NAME --apps' for \
available apps.")"
        infomsg "$KZ_TEXT"
        rm --verbose "$L_COMMAND_FILE" |& $LOGCMD
        exit $KZ_ERROR
    fi
}


# This function generates the command file from the input file and filters by
# APP.
function process_input_file_by_app() {
    local L_APP_MATCH=false
    local L_INPUT_RECORD=''
    local L_NO_APP_MATCH=true

    printf '%s\n\n' "$KZ_SETUP_FILE_HEADER" >> "$L_COMMAND_FILE"

    while read -r L_INPUT_RECORD; do
        case $L_INPUT_RECORD in
            '#'*$KZ_SETUP*[[:space:]]"$L_APP_ARGUMENT"[[:space:]]*for* )
                # Matching app record.
                L_APP_MATCH=true
                L_NO_APP_MATCH=false
                printf '%s\n' "$L_INPUT_RECORD" >> "$L_COMMAND_FILE"
                ;;
            '#'*$KZ_SETUP*for* | '#'*$KZ_RESET*for* )
                # Mismatched app record.
                L_APP_MATCH=false
                continue
                ;;
            * )
                if $L_APP_MATCH; then
                    # Record for command file.
                    printf '%s\n' "$L_INPUT_RECORD" >> "$L_COMMAND_FILE"
                fi
                ;;
        esac
    done < "$KZ_INPUT_FILE"

    if $L_NO_APP_MATCH; then
        L_APP_NOT_FOUND=true
        KZ_TEXT="$KZ_DISPLAY_NAME: $L_APP_ARGUMENT: $(gettext 'app not found')"
        infomsg "$KZ_TEXT"
    fi
}


# This function generates the command file from the input file and filters by
# USER.
function process_input_file_by_user() {
    local L_INPUT_RECORD=''
    local L_USER_MATCH=false

    printf '%s\n\n' "$KZ_SETUP_FILE_HEADER" >> "$L_COMMAND_FILE"

    while read -r L_INPUT_RECORD; do
        case $L_INPUT_RECORD in
            '#'*$KZ_SETUP*for*'*' | '#'*$KZ_SETUP*for*$USER@$HOSTNAME* )
                # Matching app record.
                L_USER_MATCH=true
                printf '%s\n' "$L_INPUT_RECORD" >> "$L_COMMAND_FILE"
                ;;
            '#'*$KZ_SETUP*for* | '#'*$KZ_RESET*for* )
                # Mismatched app record.
                L_USER_MATCH=false
                continue
                ;;
            * )
                if $L_USER_MATCH; then
                    # Record for command file.
                    printf '%s\n' "$L_INPUT_RECORD" >> "$L_COMMAND_FILE"
                fi
                ;;
        esac
    done < "$KZ_INPUT_FILE"
}


# This function displays the contents of the command file.
function process_option_cat() {
    less --quit-if-one-screen "$L_COMMAND_FILE"

    rm --verbose "$L_COMMAND_FILE" |& $LOGCMD
}


# This function starts setting up the apps.
function setup_apps() {
    local   -i  L_APP_TOT_NUM=0

    L_APP_TOT_NUM=$(
        grep    --regexp="#.*$KZ_SETUP.*for"    \
                --count                         \
                "$L_COMMAND_FILE"               || true
        )
    if [[ $L_APP_TOT_NUM -eq 0 ]]; then
        return $KZ_OK
    fi

    KZ_TITLE=$(gettext 'Set up apps')
    KZ_TEXT=$(gettext 'Preparing set up')
    logmsg "$KZ_TITLE"...

    if $KZ_OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_COMMAND_FILE > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$KZ_TITLE" \
                    --text      "$KZ_TEXT"  2> >($LOGCMD)
            )
    else
        process_COMMAND_FILE
    fi
}


# This function reads commands from the command file for further processing.
function process_COMMAND_FILE() {
    local       L_APP_NAME=''
    local       L_APP_NAME_LINE=''
    local       L_COMMAND_RECORD=''
    local   -i  L_APP_SEQ_NUM=0
    local   -i  L_CMD_SEQ_NUM=0

    if ! $KZ_OPTION_GUI; then
        KZ_TEXT="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        infomsg "$KZ_TEXT"
    fi

    while read -r L_COMMAND_RECORD; do
        case $L_COMMAND_RECORD in
            '#'*$KZ_SETUP* )
                # App record.
                L_APP_NAME=$(
                    printf '%s\n' "$L_COMMAND_RECORD"   |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                (( ++L_APP_SEQ_NUM ))
                L_CMD_SEQ_NUM=0
                printf  -v L_APP_NAME_LINE  \
                        "%3d/%-3d  %s"      \
                        "$L_APP_SEQ_NUM"    \
                        "$L_APP_TOT_NUM"    \
                        "$L_APP_NAME"
                ;;
            '' | '#'* )
                # Empty record or comment line.
                logmsg "$L_COMMAND_RECORD"
                continue
                ;;
            * )
                # Command record.
                KZ_NO_COMMANDS_FOUND=false
                execute_command "$L_COMMAND_RECORD"
                ;;
        esac
    done < "$L_COMMAND_FILE"

    rm --verbose "$L_COMMAND_FILE" |& $LOGCMD
}


# This function reports and executes a command from the command file.
function execute_command() {
    local       L_CMD=${1:-unknown}
    local       L_CMD_DIS=''
    local   -i  L_CMD_DIS_LEN=0
    local   -i  L_CMD_DIS_MAX=0

    (( ++L_CMD_SEQ_NUM ))

    if $KZ_OPTION_GUI; then
        if [[ $L_CMD_SEQ_NUM -eq 1 ]]; then
            logmsg "$L_APP_NAME_LINE"
        fi
        printf '%s\n' "#$L_APP_NAME_LINE\n\n$L_CMD"
    else

        if [[ $L_CMD_SEQ_NUM -eq 1 ]]; then
            logmsg  "$L_APP_NAME_LINE"
            infomsg "$L_APP_NAME_LINE"
        fi

        # Width 9 characters less, 9 for leading spaces.
        # Rocky Linux 8: COLUMNS: unbound variable ==> $(tput cols).
        L_CMD_DIS_MAX=$(( $(tput cols) - 9 ))

        if [[ ${#L_CMD} -gt $L_CMD_DIS_MAX ]]; then
            # Width 12 characters less, 9 for leading spaces and 3 for trailing
            # ellipsis.
            # Rocky Linux 8: COLUMNS: unbound variable ==> $(tput cols).
            L_CMD_DIS_LEN=$(( $(tput cols) - 12 ))
            L_CMD_DIS=${L_CMD:0:L_CMD_DIS_LEN}...
        else
            L_CMD_DIS=$L_CMD
        fi
        infomsg "         $L_CMD_DIS"
    fi

    logmsg "$L_CMD"
    KZ_ERREXIT=false
    eval "$L_CMD" |& $LOGCMD || KZ_FAILED_APPS[$L_APP_NAME]=$L_APP_NAME
    KZ_ERREXIT=true
}


# This function controls the termination of the script.
function term_script() {
    local L_FAILED_APPS_TEXT=''
    local L_OPERATION

    L_OPERATION=$(gettext 'set up')

    if $KZ_NO_COMMANDS_FOUND; then
        KZ_TEXT=$(gettext 'No commands to execute.' )
        infomsg "$KZ_TEXT"
        exit $KZ_OK
    fi

    if [[ -n ${KZ_FAILED_APPS[*]} ]]; then
        # shellcheck disable=SC2034
        L_FAILED_APPS_TEXT=${KZ_FAILED_APPS[*]}
        KZ_TEXT=$(eval_gettext "The set up of the following apps contains \
errors:
\$L_FAILED_APPS_TEXT

Try to set up the apps again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Set up apps', or
use app 'Terminal', type 'kz setup \$L_FAILED_APPS_TEXT'.")
        errormsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi

    if $KZ_OPTION_RESET; then
        # shellcheck disable=SC2034
        L_OPERATION=$(gettext 'reset')
    fi
    KZ_TEXT=$(eval_gettext "Apps \$L_OPERATION completed.")

    if $KZ_LOGOUT; then

        if $KZ_DESKTOP_ENVIRONMENT; then
            KZ_TEXT+="

$(gettext "You will now be logged out of the computer to finish installing \
the apps and changing user settings.")"
        else
            KZ_TEXT+="

$(gettext "You must log out of the computer to finish installing the apps and \
changing user settings.
Type 'logout' to log out.")"
        fi

        infomsg "$KZ_TEXT"

        if $KZ_DESKTOP_ENVIRONMENT; then
            $KZ_OPTION_GUI || wait_for_enter

            if $KZ_GNOME; then
                gnome-session-quit --logout --no-prompt
            elif [[ -n $(type -t ksmserver) ]]; then
                qdbus org.kde.ksmserver /KSMServer logout 0 0 0
            elif [[ -n $(type -t lxqt-session) ]]; then
                lxqt-leave --logout
            elif [[ -n $(type -t mate-session) ]]; then
                mate-session-save --logout
            elif [[ -n $(type -t xfce4-session) ]]; then
                xfce4-session-logout --logout
            else
                KZ_TEXT='No logout command available.'
                logmsg "$KZ_TEXT"
                KZ_TEXT=$(gettext 'Log out of the computer yourself.')
                infomsg "$KZ_TEXT"
            fi
        fi
    else
        infomsg "$KZ_TEXT"
    fi

    exit $KZ_OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
