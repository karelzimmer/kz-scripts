#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Set up apps
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-setup'
readonly PROGRAM_DESC=$(gettext 'Set up apps')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-a|--apps] [-c|--cat] [-\
f|--file FILE]
                [-g|--gui] [-l|--list] [-r|--reset]
                \$OPTIONS_USAGE
                [--] [APP...]")

readonly X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -a, --apps     show list of apps')
$(gettext '  -c, --cat      show contents of command file')
$(gettext '  -f, --file FILE
                 process FILE')
$(gettext '  -g, --gui      starts in graphical mode')
$(gettext '  -l, --list     show list of files')
$(gettext '  -r, --reset    set apps on default values')"

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...] [APP...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP
$(gettext "  --             signals the end of options and disables further op\
tion processing")

$(gettext 'Arguments:')
$(gettext '  APP            set up APPs')"

readonly X_OPTIONS_SHORT='acf:lgr'
readonly X_OPTIONS_LONG=',apps,cat,file:,list,gui,reset'

readonly PROGRAM_PATH=$MODULE_PATH


###############################################################################
# Variables
###############################################################################

declare -A  app_arguments=()
declare -A  failed_apps=()
declare     argument_app=false
declare     file_argument=''
declare     input_file=''
declare     logout=true
declare     mode='Setup'
declare     mode_reverse='Reset'
declare     no_commands_found=true
declare     option_apps=false
declare     option_cat=false
declare     option_file=false
declare     option_list=false
declare     option_reset=false


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -a|--apps)
                option_apps=true
                shift
                ;;
            -c|--cat)
                option_cat=true
                shift
                ;;
            -f|--file)
                if $option_file; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_file=true
                file_argument=$2
                shift 2
                ;;
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    text="$DISPLAY_NAME: $1: \
$(gettext 'not allowed on a server')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -r|--reset)
                option_reset=true
                mode='Reset'
                mode_reverse='Setup'
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        argument_app=true
        logout=false
        while [[ -n $* ]]; do
            app_arguments[$1]=$1
            shift
        done
    fi
}


# This function processes the script options and arguments.
function process_input {
    local command_file=''

    input_file=$PROGRAM_PATH/$PROGRAM_NAME-$EDITION.sh

    if $option_list; then
        option_gui=false # Ignore start in graphical mode.
        process_option_list
        exit $OK
    fi

    if $option_file; then
        option_gui=false # Ignore start in graphical mode.
        if [[ ! $(basename "$file_argument") == $PROGRAM_NAME-*.sh ]]; then
            text="$(eval_gettext "Filename must start with '\$PROGRAM_NAME-' a\
nd end with '.sh'.")"
            errormsg "$text"
            exit $ERROR
        fi
        input_file=$file_argument
    fi
    if [[ ! -f $input_file ]]; then
        text=$(eval_gettext "No set up file found, looked for '\$input_file'.")
        errormsg "$text"
        exit $ERROR
    fi

    if $option_apps; then
        option_gui=false # Ignore start in graphical mode.
        process_option_apps
        exit $OK
    fi

    command_file=$(mktemp -t "$PROGRAM_NAME-$EDITION-XXXXXXXXXX.sh")

    if $argument_app; then
        option_gui=false # Ignore start in graphical mode.
        process_argument_app
    else
        process_input_file_by_user
    fi

    if $option_cat; then
        process_option_cat
        exit $OK
    fi
    setup_apps
}


# This function displays a list of input files present.
function process_option_list {
    local files=''

    text="$(gettext 'The following FILEs are present:')

$(gettext 'NUM  FILE')\n"
    files=$(find    "$PROGRAM_PATH"/$PROGRAM_NAME-*.sh  \
                    2> >($LOGCMD)                       |
            nl      --number-width=3                    \
                    --number-format=rn                  \
                    --number-separator='  '             \
                    --body-numbering=a                  || true
            )
    if [[ -n $files ]]; then
        text+=$files
        text+="\n
$(gettext 'To view the contents of FILE execute: cat FILE')
$(eval_gettext "To view the commands of FILE execute: \$DISPLAY_NAME --cat --f\
ile FILE")
$(eval_gettext "To process FILE execute: \$DISPLAY_NAME --file FILE")
$(eval_gettext "The default FILE is: \$input_file")"
    else
        text+="$(gettext '  0  No files present.')

$USAGE_LINE"
    fi
    infomsg "$text"
}


# This function shows the available apps from the input file.
function process_option_apps {
    local apps=''

    text="$(gettext 'The following apps are available:')

$(gettext 'NUM  APP')\n"
    apps=$(
        grep    --no-messages           \
                --regexp=".*#.*$mode.*" \
                "$input_file"           |
        tr      --squeeze-repeats       \
                '[:space:]'             |
        cut     --delimiter=' '         \
                --fields=3              |
        sort    --unique                |
        nl      --number-width=3        \
                --number-format=rn      \
                --number-separator='  ' \
                --body-numbering=a      || true
        )
    if [[ -n $apps ]]; then
        text+=$apps
        text+="\n
$(eval_gettext "To view the contents of the apps set up file execute: \$DISPLA\
Y_NAME --cat APP...")
$(eval_gettext "To set up the apps execute: \$DISPLAY_NAME APP...")
$(eval_gettext "To view the contents of the default set up file execute: \$DIS\
PLAY_NAME --cat")"
    else
        text+="$(gettext '  0  No apps found.')

$USAGE_LINE"
    fi
    infomsg "$text"
}


# This function processes argument APP.
function process_argument_app {
    local app_not_found=false
    local app_argument=''

    for app_argument in "${app_arguments[@]}"; do
        process_input_file_by_app
    done
    if $app_not_found; then
        text="$(eval_gettext "Type '\$DISPLAY_NAME --apps' for available apps.\
")"
        infomsg "$text"
        rm --verbose "$command_file" |& $LOGCMD
        exit $ERROR
    fi
}


# This function generates the command file from the input file and filters by
# APP.
function process_input_file_by_app {
    local app_match=false
    local app_name=''
    local input_record=''
    local no_app_match=true

    while read -r input_record; do
        case $input_record in
            '#'*"$mode"*"$app_argument"*)
                # Possible matching app record (app_argument is user input).
                app_match=false
                app_name=$(
                    printf '%s\n' "$input_record"       |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                if [[ $app_name = "$app_argument" ]]; then
                    # Matching app record.
                    app_match=true
                    no_app_match=false
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
            '#'*"$mode"*|'#'*"$mode_reverse"*)
                # Mismatched app record.
                app_match=false
                continue
                ;;
            *)
                # Command record.
                if $app_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
    if $no_app_match; then
        app_not_found=true
        text="$DISPLAY_NAME: $app_argument: $(gettext 'app not found')"
        infomsg "$text"
    fi
}


# This function generates the command file from the input file and filters by
# USER.
function process_input_file_by_user {
    local input_record=''
    local user_match=false

    while read -r input_record; do
        case $input_record in
            '#'*"$mode"*'*'*|'#'*"$mode"*"$USER"'@'"$HOSTNAME"*)
                # Matching app record.
                user_match=true
                printf '%s\n' "$input_record" >> "$command_file"
                ;;
            '#'*"$mode"*|'#'*"$mode_reverse"*)
                # Mismatched app record.
                user_match=false
                continue
                ;;
            *)
                # Command record.
                if $user_match; then
                    printf '%s\n' "$input_record" >> "$command_file"
                fi
                ;;
        esac
    done < "$input_file"
}


# This function displays the contents of the command file.
function process_option_cat {
    less --quit-if-one-screen "$command_file"
    rm --verbose "$command_file" |& $LOGCMD
}


# This function starts setting up the apps.
function setup_apps {
    title=$(gettext 'Set up apps')
    text=$(gettext 'Preparing set up')
    logmsg "$title"...
    if $option_gui; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        process_command_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> >($LOGCMD)
            )
    else
        process_command_file
    fi
}


# This function reads commands from the command file for further processing.
function process_command_file {
    local       app_name=''
    local       app_name_line=''
    local       command_record=''
    local   -i  app_seq_num=0
    local   -i  app_tot_num=0
    local   -i  cmd_seq_num=0

    app_tot_num=$(grep --regexp="#.* $mode " --count "$command_file" || true)

    if ! $option_gui; then
        text="$(gettext 'NUM/TOT  APP')
         $(gettext 'COMMAND')..."
        infomsg "$text"
    fi

    while read -r command_record; do
        case $command_record in
            '')
                # Blank line.
                continue
                ;;
            '#'*"$mode"*)
                # App record.
                app_name=$(
                    printf '%s\n' "$command_record"     |
                    tr --squeeze-repeats '[:space:]'    |
                    cut --delimiter=' ' --fields=3
                    )
                ((++app_seq_num))
                cmd_seq_num=0
                printf  -v app_name_line    \
                        "%3d/%-3d  %s"      \
                        "$app_seq_num"      \
                        "$app_tot_num"      \
                        "$app_name"
                ;;
            '#'*)
                # Comment line. Use the cat option to view it.
                continue
                ;;
            *)
                # Command record.
                execute_command "$command_record"
                ;;
        esac
    done < "$command_file"
    rm --verbose "$command_file" |& $LOGCMD
}


# This function reports and executes a command from the command file.
function execute_command {
    local cmd=${1:-unknown}
    local cmd_dis=''
    local cmd_dis_len=0

    no_commands_found=false
    ((++cmd_seq_num))

    if $option_gui; then
        printf '%s\n' "#$app_name_line\n\n$cmd"
    else
        if [[ $cmd_seq_num -eq 1 ]]; then
            logmsg "$app_name_line"
            infomsg "$app_name_line"
        fi
        if [[ ${#cmd} -gt $COLUMNS ]]; then
            # Width 12 characters less, 9 for spaces and 3 for ellipsis.
            cmd_dis_len=($COLUMNS-12)
            cmd_dis=${cmd:0:cmd_dis_len}...
        else
            cmd_dis=$cmd
        fi
        infomsg "         $cmd_dis"
    fi

    logmsg "$cmd"
    errexit=false
    eval "$cmd" |& $LOGCMD || failed_apps[$app_name]=$app_name
    errexit=true
}


# This function controls the termination of the script.
function term_script {
    local failed_apps_text=''
    local operation=$(gettext 'set up')

    if $no_commands_found; then
        text=$(gettext 'No commands to execute.' )
        infomsg "$text"
        exit $OK
    fi

    if [[ -n ${failed_apps[*]} ]]; then
        # shellcheck disable=SC2034
        failed_apps_text=${failed_apps[*]}
        text=$(eval_gettext "The set up of the following apps contains errors:
\$failed_apps_text

Try to set up the apps again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Set up apps', or
use app 'Terminal', type 'kz setup \$failed_apps_text'.")
        errormsg "$text"
        exit $ERROR
    else
        if $option_reset; then
            # shellcheck disable=SC2034
            operation=$(gettext 'reset')
        fi
        text=$(eval_gettext "Apps \$operation completed.")
        if $logout; then
            if [[ $EDITION = 'desktop' ]]; then
                text+="
$(gettext "You will now be logged out of the computer to finish installing the\
 apps and changing user settings.")"
            else
                text+="
$(gettext "You must log out of the computer to finish installing the apps and \
changing user settings.
Type 'logout' to log out.")"
            fi
        fi
        infomsg "$text"
        if $logout && [[ $EDITION = 'desktop' ]]; then
            $option_gui || wait_for_enter
            if type gnome-session |& $LOGCMD; then
                gnome-session-quit --logout --no-prompt
            elif type lxqt-session |& $LOGCMD; then
                lxqt-leave --logout
            elif type xfce4-session |& $LOGCMD; then
                xfce4-session-logout --logout
            else
                text='No logout command available.'
                logmsg "$text"
                text=$(gettext 'Log out of the computer yourself.')
                infomsg "$text"
            fi
        else
            exit $OK
        fi
    fi
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
