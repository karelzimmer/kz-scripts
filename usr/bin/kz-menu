#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Installation menu
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################

###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz menu'
PROGRAM_DESC=$(gettext 'Installation menu')
readonly PROGRAM_DESC

USAGE=$(eval_gettext "Usage: \$PROGRAM_NAME [-g|--gui] \$OPTIONS_USAGE")
readonly USAGE

X_OPTIONS_HELP="$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')"
readonly X_OPTIONS_HELP

HELP="$(eval_gettext "Usage: \$PROGRAM_NAME [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"
readonly HELP

readonly X_OPTIONS_SHORT='g'
readonly X_OPTIONS_LONG=',gui'

MENU1_TITLE=$(gettext 'Installation menu')
readonly MENU1_TITLE
readonly MENU1_HEAD="------------------ $MENU1_TITLE ------------------"
readonly -a  MENU1_ACTIONS=(
            [1]="$(gettext 'Prepare installation')"
                "$(gettext 'Perform installation')"
                "$(gettext 'Finish installation')"
                "$(gettext 'Provision user')"
                "$(gettext 'Command menu')"
                "$(gettext 'Exit')"
            )
readonly -a  MENU1_DESCS=(
            [1]="$(gettext 'Checklist chapter 1')"
                "$(gettext 'Checklist chapter 2')"
                "$(gettext 'Checklist chapter 3')"
                "$(gettext 'Checklist chapter 4')"
                "$(gettext 'Show command menu')"
                "$(gettext 'Exit menu')"
            )
readonly MENU1_LINES=${#MENU1_ACTIONS[@]}

MENU2_TITLE=$(gettext 'Command menu')
readonly MENU2_TITLE
readonly MENU2_HEAD="-------------------- $MENU2_TITLE -------------------"
readonly -a  MENU2_ACTIONS=(
            [1]="$(gettext 'Show WiFi information')"
                "$(gettext 'Make backup')"
                "$(gettext 'Install apps')"
                "$(gettext 'Restore backup')"
                "$(gettext 'Set up apps')"
                "$(gettext 'Go to installation menu')"
            )
readonly -a  MENU2_DESCS=(
            [1]='kz wifi'
                'kz backup'
                'kz install'
                'kz restore'
                'kz setup'
                "$(gettext 'Back')"
            )
readonly MENU2_LINES=${#MENU2_DESCS[@]}


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local PARSED=''
    local -i RC=$OK

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$PROGRAM_NAME"                     \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    local TEXT=''

    while true; do
        case $1 in
            -g | --gui )
                if ! $DESKTOP_ENVIRONMENT; then
                    TEXT=\
"$PROGRAM_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        TEXT="$PROGRAM_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    if $OPTION_GUI; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


# This function shows and processes menu 1 in GUI mode.
function process_menu1_gui() {
    local TITLE=$MENU1_TITLE

    while true; do
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$TITLE"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Exit')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'ACTION')"               \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU1_ACTIONS[1]}" "${MENU1_DESCS[1]}"   \
                    FALSE 2 "${MENU1_ACTIONS[2]}" "${MENU1_DESCS[2]}"   \
                    FALSE 3 "${MENU1_ACTIONS[3]}" "${MENU1_DESCS[3]}"   \
                    FALSE 4 "${MENU1_ACTIONS[4]}" "${MENU1_DESCS[4]}"   \
                    FALSE 5 "${MENU1_ACTIONS[5]}" "${MENU1_DESCS[5]}"   \
                    2> >($LOGCMD)
            ) || exit $OK
        process_menu1_choice
    done
}


# This function shows and processes menu 1 in TUI mode.
function process_menu1_tui() {
    local MENU1_ACTION=''
    local PROMPT=''

    while true; do
        printf  '\n%s\n\n%3s  %-24s  %s\n'  \
                "$MENU1_HEAD"               \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for MENU1_ACTION in "${!MENU1_ACTIONS[@]}"; do
            printf  '%3s  %-24s  %s\n'                  \
                    "$MENU1_ACTION"                     \
                    "${MENU1_ACTIONS[$MENU1_ACTION]}"   \
                    "${MENU1_DESCS[$MENU1_ACTION]}"
        done

        printf '\n'
        PROMPT=$(eval_gettext "Run number [1-\$MENU1_LINES]: ")
        read -rp "$PROMPT"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $MENU1_LINES ]]; then
                    process_menu1_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 1 choice.
function process_menu1_choice() {
    local TEXT=''

    case $REPLY in
        1 )
            process_menu1_choice1
            ;;
        2 )
            process_menu1_choice2
            ;;
        3 )
            process_menu1_choice3
            ;;
        4 )
            process_menu1_choice4
            ;;
        5 )
            process_menu2
            ;;
        6 )
            exit $OK
            ;;
        * )
            TEXT=$(eval_gettext "Cannot handle this choice (\$REPLY).")
            errmsg "$TEXT"
            exit $ERR
            ;;
    esac
}


# This function processes menu 1 choice 1.
function process_menu1_choice1() {
    local TITLE="${MENU1_ACTIONS[1]} (${MENU1_DESCS[1]})"
    local -a ROWS=(
        [1]="${MENU2_ACTIONS[1]}#${MENU2_DESCS[1]}"
            "${MENU2_ACTIONS[2]}#${MENU2_DESCS[2]}"
        )

    process_commands
}


# This function processes menu 1 choice 2.
function process_menu1_choice2() {
    local TEXT=''
    local TITLE="${MENU1_ACTIONS[2]} (${MENU1_DESCS[2]})"

    TEXT="
$(gettext "Follow the steps as described in Checklist installation, Chapter 2.
Checklist installation can be found on https://karelzimmer.nl/en, under Linux.

Roughly boils down to:
  1. Download a CD image file (.iso).
  2. Create a bootable USB stick.
  3. Boot the computer from this USB stick.
  4. Install Linux.")"
    if $OPTION_GUI; then
        zenity  --info                  \
                --width     600         \
                --height    100         \
                --title     "$TITLE"    \
                --text      "$TEXT"     2> >($LOGCMD)
    else
        printf '%s\n' "$TEXT"
        wait_for_enter
    fi
}


# This function processes menu 1 choice 3.
function process_menu1_choice3() {
    local TITLE="${MENU1_ACTIONS[3]} (${MENU1_DESCS[3]})"
    local -a ROWS=(
        [1]="${MENU2_ACTIONS[3]}#${MENU2_DESCS[3]}"
        )

    process_commands
}


# This function processes menu 1 choice 4.
function process_menu1_choice4() {
    local TITLE="${MENU1_ACTIONS[4]} (${MENU1_DESCS[4]})"
    local -a ROWS=(
        [1]="${MENU2_ACTIONS[4]}#${MENU2_DESCS[4]}"
            "${MENU2_ACTIONS[5]}#${MENU2_DESCS[5]}"
        )

    process_commands

    # User must type 'logout' to log out.
    $DESKTOP_ENVIRONMENT || exit $OK
}


# This function processes menu 2.
function process_menu2() {
    if $OPTION_GUI; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


# This function shows and processes menu 2 in GUI mode.
function process_menu2_gui() {
    local TITLE=$MENU2_TITLE

    while true; do
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$TITLE"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Back')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'ACTION')"               \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU2_ACTIONS[1]}" "${MENU2_DESCS[1]}"   \
                    FALSE 2 "${MENU2_ACTIONS[2]}" "${MENU2_DESCS[2]}"   \
                    FALSE 3 "${MENU2_ACTIONS[3]}" "${MENU2_DESCS[3]}"   \
                    FALSE 4 "${MENU2_ACTIONS[4]}" "${MENU2_DESCS[4]}"   \
                    FALSE 5 "${MENU2_ACTIONS[5]}" "${MENU2_DESCS[5]}"   \
                    2> >($LOGCMD)
            ) || break
        process_menu2_choice
    done
}


# This function shows and processes menu 2 in TUI mode.
function process_menu2_tui() {
    local MENU2_ACTION=''
    local PROMPT=''

    while true; do
        printf  '\n%s\n\n%3s  %-25s  %s\n'  \
                "$MENU2_HEAD"               \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for MENU2_ACTION in "${!MENU2_ACTIONS[@]}"; do
            printf  '%3s  %-25s  %s\n'                  \
                    "$MENU2_ACTION"                    \
                    "${MENU2_ACTIONS[$MENU2_ACTION]}"  \
                    "${MENU2_DESCS[$MENU2_ACTION]}"
        done

        printf '\n'
        PROMPT=$(eval_gettext "Run number [1-\$MENU2_LINES]: ")
        read -rp "$PROMPT"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $MENU2_LINES ]]; then
                    process_menu2_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 2 choice.
function process_menu2_choice() {
        local TEXT=''
        local TITLE="${MENU2_ACTIONS[$REPLY]} (${MENU2_DESCS[$REPLY]})"
        local -a ROWS=(
            [1]="${MENU2_ACTIONS[$REPLY]}#${MENU2_DESCS[$REPLY]}"
            )

    if [[ $REPLY -ge 1 && $REPLY -le $((MENU2_LINES -1)) ]]; then
        process_commands
    elif [[ $REPLY -eq $MENU2_LINES ]]; then
        process_menu1_tui
    else
        TEXT=$(eval_gettext "Cannot handle this choice (\$REPLY).")
        errmsg "$TEXT"
        exit $ERR
    fi
}


# This function processes the command corresponding to the choice made.
function process_commands() {
    local COMMAND=''
    local DESCRIPTION=''
    local EXECUTE_COMMAND=false
    local TITLE=''
    local -i ROW=0

    show_commands_before_execution

    if $EXECUTE_COMMAND; then
        for ROW in "${!ROWS[@]}"; do
            DESCRIPTION=$(
                printf '%s' "${ROWS[$ROW]}" | cut --delimiter='#' --fields=1
                )
            COMMAND=$(
                printf '%s' "${ROWS[$ROW]}" | cut --delimiter='#' --fields=2
                )
            TITLE="$DESCRIPTION ($COMMAND)"
            execute_command
            $OPTION_GUI || wait_for_enter
        done
    fi
}


# This function shows the commands before they are executed.
function show_commands_before_execution() {
    local COMMAND=''
    local DESCRIPTION=''
    local PROMPT=''
    local TEXT=''
    local -i ROW=0

    TEXT="$(gettext 'The following will be executed:')
"
    for ROW in "${!ROWS[@]}"; do
        DESCRIPTION=$(
            printf '%s' "${ROWS[$ROW]}" | cut --delimiter='#' --fields=1
            )
        COMMAND=$(
            printf '%s' "${ROWS[$ROW]}" | cut --delimiter='#' --fields=2
            )
        TEXT+="
[$ROW] $DESCRIPTION ($COMMAND)"
    done

    TEXT+='
'
    PROMPT="$(gettext 'Proceed?')"

    if $OPTION_GUI; then
        TEXT+="
$PROMPT"
        if zenity   --question                          \
                    --no-markup                         \
                    --width         600                 \
                    --height        100                 \
                    --title         "$TITLE"            \
                    --text          "$TEXT"             \
                    --ok-label      "$(gettext 'Yes')"  \
                    --cancel-label  "$(gettext 'No')"   2> >($LOGCMD); then
            EXECUTE_COMMAND=true
        else
            EXECUTE_COMMAND=false
        fi
    else
        printf '\n%s\n' "$TEXT"
        while true; do
            read -rp "$(eval_gettext "\$PROMPT [Y/n]: ")"
            case $REPLY in
                [YyJj]* | '' )
                    EXECUTE_COMMAND=true
                    break
                    ;;
                [Nn]* )
                    EXECUTE_COMMAND=false
                    break
                    ;;
                * )
                    continue
                    ;;
            esac
        done
    fi
}


# This function executes the commands.
function execute_command() {
    local ARG=''
    local CMD=''
    local GUI_OPTION=''
    local -i RC=$OK

    CMD=$(
        printf '%s' "$COMMAND" | cut --delimiter=' ' --fields=1
        )
    ARG=$(
        printf '%s' "$COMMAND" | cut --delimiter=' ' --fields=2-
        )

    if $OPTION_GUI; then
        GUI_OPTION='--gui'
    fi

    "$CMD" "$ARG" $GUI_OPTION || RC=$?
    logmsg "$COMMAND: rc=$RC"
}


# This function controls the termination of the script.
function term_script() {
    exit $OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
