#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Installation menu
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-menu'
readonly PROGRAM_DESC=$(gettext 'Installation menu')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] \$OPTIONS_USAG\
E")

readonly X_OPTIONS_HELP=$(gettext '  -g, --gui      starts in graphical mode')

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='g'
readonly X_OPTIONS_LONG=',gui'

readonly PROGRAM_PATH=$MODULE_PATH

            MENU1_TITLE=$(gettext 'Installation menu')
readonly MENU1_TITLE
readonly MENU1_HEAD="------------------ $MENU1_TITLE ------------------"
readonly -a MENU1_ACTIONS=(
            [1]="$(gettext 'Prepare installation')"
                "$(gettext 'Perform installation')"
                "$(gettext 'Finish installation')"
                "$(gettext 'Provision user')"
                "$(gettext 'Command menu')"
                "$(gettext 'Exit')"
            )
readonly -a MENU1_DESCS=(
            [1]="$(gettext 'Checklist chapter 1')"
                "$(gettext 'Checklist chapter 2')"
                "$(gettext 'Checklist chapter 3')"
                "$(gettext 'Checklist chapter 4')"
                "$(gettext 'Show command menu')"
                "$(gettext 'Exit menu')"
            )
readonly MENU1_LINES=${#MENU1_ACTIONS[@]}

            MENU2_TITLE=$(gettext 'Command menu')
readonly MENU2_TITLE
readonly MENU2_HEAD="--------------- $MENU2_TITLE ---------------"
readonly -a MENU2_ACTIONS=(
            [1]="$(gettext 'Show WiFi information')"
                "$(gettext 'Make backup')"
                "$(gettext 'Install apps')"
                "$(gettext 'Restore backup')"
                "$(gettext 'Set up apps')"
                "$(gettext 'Go to installation menu')"
            )
readonly -a MENU2_COMMANDS=(
            [1]='kz wifi'
                'kz backup'
                'kz install'
                'kz restore'
                'kz setup'
                "$(gettext 'Back')"
            )
readonly MENU2_LINES=${#MENU2_COMMANDS[@]}


###############################################################################
# Variables
###############################################################################

declare     execute_command=false
declare -a  rows=()


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    text="$DISPLAY_NAME: $1: \
$(gettext 'only allowed on desktop')
$USAGE_LINE"
                    infomsg "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    if $option_gui; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


# This function shows and processes menu 1 in GUI mode.
function process_menu1_gui {
    while true; do
        title=$MENU1_TITLE
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$title"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Exit')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'ACTION')"               \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU1_ACTIONS[1]}" "${MENU1_DESCS[1]}"   \
                    FALSE 2 "${MENU1_ACTIONS[2]}" "${MENU1_DESCS[2]}"   \
                    FALSE 3 "${MENU1_ACTIONS[3]}" "${MENU1_DESCS[3]}"   \
                    FALSE 4 "${MENU1_ACTIONS[4]}" "${MENU1_DESCS[4]}"   \
                    FALSE 5 "${MENU1_ACTIONS[5]}" "${MENU1_DESCS[5]}"   \
                    2> >($LOGCMD)
            ) || exit $OK
        process_menu1_choice
    done
}


# This function shows and processes menu 1 in TUI mode.
function process_menu1_tui {
    local menu1_action=''

    while true; do
        printf  '\n\n%s\n\n%3s  %-24s  %s\n'    \
                "$MENU1_HEAD"                   \
                "$(gettext 'NUM')"              \
                "$(gettext 'ACTION')"           \
                "$(gettext 'DESCRIPTION')"
        for menu1_action in "${!MENU1_ACTIONS[@]}"; do
            printf  '%3s  %-24s  %s\n'                  \
                    "$menu1_action"                     \
                    "${MENU1_ACTIONS[$menu1_action]}"   \
                    "${MENU1_DESCS[$menu1_action]}"
        done
        printf '\n'
        prompt=$(eval_gettext "Run number [1-\$MENU1_LINES]: ")
        read -rp "$prompt"
        case $REPLY in
            *[^[:digit:]]*)
                continue
                ;;
            *)
                if [[ $REPLY -ge 1 && $REPLY -le $MENU1_LINES ]]; then
                    process_menu1_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 1 choice.
function process_menu1_choice {
    case $REPLY in
        1)
            process_menu1_choice1
            ;;
        2)
            process_menu1_choice2
            ;;
        3)
            process_menu1_choice3
            ;;
        4)
            process_menu1_choice4
            ;;
        5)
            process_menu2
            ;;
        6)
            exit $OK
            ;;
        *)
            text=$(eval_gettext "Cannot handle this choice (\$REPLY).")
            errormsg "$text"
            exit $ERROR
            ;;
    esac
}


# This function processes menu 1 choice 1.
function process_menu1_choice1 {
    title="${MENU1_ACTIONS[1]} (${MENU1_DESCS[1]})"
    rows=(
        [1]="${MENU2_ACTIONS[1]}#${MENU2_COMMANDS[1]}"
            "${MENU2_ACTIONS[2]}#${MENU2_COMMANDS[2]}"
        )
    process_commands
}


# This function processes menu 1 choice 2.
function process_menu1_choice2 {
    title="${MENU1_ACTIONS[2]} (${MENU1_DESCS[2]})"
    text="
$(gettext "Follow the steps as described in Checklist installation, Chapter 2.
Checklist installation can be found on https://karelzimmer.nl/en, under Linux.

Roughly boils down to:
1. Download a CD image file (.iso).
2. Create a bootable USB stick.
3. Boot the computer from this USB stick.
4. Install Linux.")"
    if $option_gui; then
        zenity  --info                  \
                --width     600         \
                --height    100         \
                --title     "$title"    \
                --text      "$text"     2> >($LOGCMD)
    else
        printf '%s\n' "$text"
    fi
}


# This function processes menu 1 choice 3.
function process_menu1_choice3 {
    title="${MENU1_ACTIONS[3]} (${MENU1_DESCS[3]})"
    rows=(
        [1]="${MENU2_ACTIONS[3]}#${MENU2_COMMANDS[3]}"
        )
    process_commands
}


# This function processes menu 1 choice 4.
function process_menu1_choice4 {
    title="${MENU1_ACTIONS[4]} (${MENU1_DESCS[4]})"
    rows=(
        [1]="${MENU2_ACTIONS[4]}#${MENU2_COMMANDS[4]}"
            "${MENU2_ACTIONS[5]}#${MENU2_COMMANDS[5]}"
        )
    process_commands
    if [[ $EDITION = 'server' ]]; then
        exit $OK
    fi
}


# This function processes menu 2.
function process_menu2 {
    if $option_gui; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


# This function shows and processes menu 2 in GUI mode.
function process_menu2_gui {
    while true; do
        title=$MENU2_TITLE
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$title"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Back')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'COMMAND')"              \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU2_ACTIONS[1]}" "${MENU2_COMMANDS[1]}"  \
                    FALSE 2 "${MENU2_ACTIONS[2]}" "${MENU2_COMMANDS[2]}"  \
                    FALSE 3 "${MENU2_ACTIONS[3]}" "${MENU2_COMMANDS[3]}"  \
                    FALSE 4 "${MENU2_ACTIONS[4]}" "${MENU2_COMMANDS[4]}"  \
                    FALSE 5 "${MENU2_ACTIONS[5]}" "${MENU2_COMMANDS[5]}"  \
                    2> >($LOGCMD)
            ) || break
        process_menu2_choice
    done
}


# This function shows and processes menu 2 in TUI mode.
function process_menu2_tui {
    local menu2_command=''

    while true; do
        printf  '\n\n%s\n\n%3s  %-25s  %s\n'    \
                "$MENU2_HEAD"                   \
                "$(gettext 'NUM')"              \
                "$(gettext 'DESCRIPTION')"      \
                "$(gettext 'COMMAND')"
        for menu2_command in "${!MENU2_COMMANDS[@]}"; do
            printf  '%3s  %-25s  %s\n'                  \
                    "$menu2_command"                    \
                    "${MENU2_ACTIONS[$menu2_command]}" \
                    "${MENU2_COMMANDS[$menu2_command]}"
        done
        printf '\n'
        prompt=$(eval_gettext "Run number [1-\$MENU2_LINES]: ")
        read -rp "$prompt"
        case $REPLY in
            *[^[:digit:]]*)
                continue
                ;;
            *)
                if [[ $REPLY -ge 1 && $REPLY -le $MENU2_LINES ]]; then
                    process_menu2_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 2 choice.
function process_menu2_choice {
    if [[ $REPLY -ge 1 && $REPLY -le $((MENU2_LINES -1)) ]]; then
        title="${MENU2_ACTIONS[$REPLY]} (${MENU2_COMMANDS[$REPLY]})"
        rows=(
            [1]="${MENU2_ACTIONS[$REPLY]}#${MENU2_COMMANDS[$REPLY]}"
            )
        process_commands
    elif [[ $REPLY -eq $MENU2_LINES ]]; then
        process_menu1_tui
    else
        text=$(eval_gettext "Cannot handle this choice (\$REPLY).")
        errormsg "$text"
        exit $ERROR
    fi
}


# This function processes the command corresponding to the choice made.
function process_commands {
    local       command=''
    local       description=''
    local   -i  row=0

    show_commands_before_execution
    if $execute_command; then
        for row in "${!rows[@]}"; do
            description=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
                )
            command=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
                )
            title="$description ($command)"
            $option_gui || infomsg "\n${BOLD}==== $title ====${NORMAL}"
            execute_command
        done
    fi
}


# This function shows the commands before they are executed.
function show_commands_before_execution {
    local       command=''
    local       description=''
    local   -i  row=0
    local       prompt=''

    text="$(gettext 'The following will be executed:')
"
    for row in "${!rows[@]}"; do
        description=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
            )
        text+="
[$row] $description ($command)"
    done
    text+='
'
    prompt="$(gettext 'Proceed?')"
    if $option_gui; then
        text+="
$prompt"
        if zenity   --question                          \
                    --no-markup                         \
                    --width         600                 \
                    --height        100                 \
                    --title         "$title"            \
                    --text          "$text"             \
                    --ok-label      "$(gettext 'Yes')"  \
                    --cancel-label  "$(gettext 'No')"   2> >($LOGCMD); then
            execute_command=true
        else
            execute_command=false
        fi
    else
        printf '\n%s\n' "$text"
        while true; do
            read -rp "$(eval_gettext "\$prompt [Y/n]: ")"
            case $REPLY in
                [YyJj]*|'')
                    execute_command=true
                    break
                    ;;
                [Nn]*)
                    execute_command=false
                    break
                    ;;
                *)
                    continue
                    ;;
            esac
        done
    fi
}


# This function executes the commands.
function execute_command {
    local   -i  rc=0
    local       cmd=''
    local       row=''
    local       gui_option=''

    row=${command/kz /kz-}
    cmd=$(
        printf '%s' "$row" | cut --delimiter=' ' --fields=1
        )
    arg=$(
        printf '%s' "$row" | cut --delimiter=' ' --fields=2- --only-delimited
        )
    if $option_gui; then
        gui_option='--gui'
    fi
    "$PROGRAM_PATH/$cmd" "$arg" $gui_option -- || rc=$?
    logmsg "$command: rc=$rc"
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
