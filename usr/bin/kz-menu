#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Installation menu
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################

###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Variables
###############################################################################

declare     KZ_PROGRAM_NAME='kz-menu'
declare     KZ_PROGRAM_DESC
            KZ_PROGRAM_DESC=$(gettext 'Installation menu')
declare     KZ_DISPLAY_NAME=${KZ_PROGRAM_NAME/kz-/kz }

declare     KZ_USAGE
            KZ_USAGE=$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [-g|--gui] \
\$KZ_OPTIONS_USAGE")

declare     KZ_X_OPTIONS_HELP
            KZ_X_OPTIONS_HELP=$(gettext "  -g, --gui      run in graphical \
mode, requires desktop environment")

declare     KZ_HELP
            KZ_HELP="$(eval_gettext "Usage: \$KZ_DISPLAY_NAME [OPTION...]")

$KZ_PROGRAM_DESC.

$(gettext 'Options:')
$KZ_X_OPTIONS_HELP
$KZ_OPTIONS_HELP"

declare     KZ_X_OPTIONS_SHORT='g'
declare     KZ_X_OPTIONS_LONG=',gui'

declare     KZ_MENU1_TITLE
            KZ_MENU1_TITLE=$(gettext 'Installation menu')
declare     KZ_MENU1_HEAD="------------------ $KZ_MENU1_TITLE \
------------------"
declare -a  KZ_MENU1_ACTIONS=(
            [1]="$(gettext 'Prepare installation')"
                "$(gettext 'Perform installation')"
                "$(gettext 'Finish installation')"
                "$(gettext 'Provision user')"
                "$(gettext 'Command menu')"
                "$(gettext 'Exit')"
            )
declare -a  KZ_MENU1_DESCS=(
            [1]="$(gettext 'Checklist chapter 1')"
                "$(gettext 'Checklist chapter 2')"
                "$(gettext 'Checklist chapter 3')"
                "$(gettext 'Checklist chapter 4')"
                "$(gettext 'Show command menu')"
                "$(gettext 'Exit menu')"
            )
declare     KZ_MENU1_LINES=${#KZ_MENU1_ACTIONS[@]}

declare     KZ_MENU2_TITLE
            KZ_MENU2_TITLE=$(gettext 'Command menu')
declare     KZ_MENU2_HEAD="-------------------- $KZ_MENU2_TITLE \
-------------------"
declare -a  KZ_MENU2_ACTIONS=(
            [1]="$(gettext 'Show WiFi information')"
                "$(gettext 'Make backup')"
                "$(gettext 'Install apps')"
                "$(gettext 'Restore backup')"
                "$(gettext 'Set up apps')"
                "$(gettext 'Go to installation menu')"
            )
declare -a  KZ_MENU2_DESCS=(
            [1]='kz wifi'
                'kz backup'
                'kz install'
                'kz restore'
                'kz setup'
                "$(gettext 'Back')"
            )
declare     KZ_MENU2_LINES=${#KZ_MENU2_DESCS[@]}

declare     KZ_EXECUTE_COMMAND=false
declare -a  KZ_ROWS=()


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input() {
    local L_PARSED=''

    L_PARSED=$(
        getopt  --alternative                                               \
                --options       "${KZ_OPTIONS_SHORT}$KZ_X_OPTIONS_SHORT"    \
                --longoptions   "${KZ_OPTIONS_LONG}$KZ_X_OPTIONS_LONG"      \
                --name          "$KZ_DISPLAY_NAME"                          \
                --              "$@"
        )       || KZ_RC=$?
    if [[ $KZ_RC -ne $KZ_OK ]]; then
        infomsg "$KZ_USAGE"
        exit    $KZ_ERROR
    fi
    eval set -- "$L_PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -g | --gui )
                if ! $KZ_DESKTOP_ENVIRONMENT; then
                    KZ_TEXT=\
"$KZ_DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$KZ_USAGE"
                    infomsg "$KZ_TEXT"
                    exit $KZ_ERROR
                fi
                KZ_OPTION_GUI=true
                shift
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        KZ_TEXT="$KZ_DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$KZ_USAGE"
        infomsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the script options and arguments.
function process_input() {
    if $KZ_OPTION_GUI; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


# This function shows and processes menu 1 in GUI mode.
function process_menu1_gui() {
    while true; do
        KZ_TITLE=$KZ_MENU1_TITLE
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         520                                     \
                    --height        420                                     \
                    --title         "$KZ_TITLE"                             \
                    --text          "$(gettext 'Select a choice:')"         \
                    --ok-label      "$(gettext 'Continue')"                 \
                    --cancel-label  "$(gettext 'Exit')"                     \
                    --column        "$(gettext 'CHOICE')"                   \
                    --column        "$(gettext 'NUM')"                      \
                    --column        "$(gettext 'ACTION')"                   \
                    --column        "$(gettext 'DESCRIPTION')"              \
                    TRUE  1 "${KZ_MENU1_ACTIONS[1]}" "${KZ_MENU1_DESCS[1]}" \
                    FALSE 2 "${KZ_MENU1_ACTIONS[2]}" "${KZ_MENU1_DESCS[2]}" \
                    FALSE 3 "${KZ_MENU1_ACTIONS[3]}" "${KZ_MENU1_DESCS[3]}" \
                    FALSE 4 "${KZ_MENU1_ACTIONS[4]}" "${KZ_MENU1_DESCS[4]}" \
                    FALSE 5 "${KZ_MENU1_ACTIONS[5]}" "${KZ_MENU1_DESCS[5]}" \
                    2> >($LOGCMD)
            ) || exit $KZ_OK
        process_menu1_choice
    done
}


# This function shows and processes menu 1 in TUI mode.
function process_menu1_tui() {
    local L_MENU1_ACTION=''
    local L_PROMPT=''

    while true; do
        printf  '\n%s\n\n%3s  %-24s  %s\n'  \
                "$KZ_MENU1_HEAD"            \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for L_MENU1_ACTION in "${!KZ_MENU1_ACTIONS[@]}"; do
            printf  '%3s  %-24s  %s\n'                      \
                    "$L_MENU1_ACTION"                       \
                    "${KZ_MENU1_ACTIONS[$L_MENU1_ACTION]}"  \
                    "${KZ_MENU1_DESCS[$L_MENU1_ACTION]}"
        done

        printf '\n'

        L_PROMPT=$(eval_gettext "Run number [1-\$KZ_MENU1_LINES]: ")
        read -rp "$L_PROMPT"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $KZ_MENU1_LINES ]]; then
                    process_menu1_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 1 choice.
function process_menu1_choice() {
    case $REPLY in
        1 )
            process_menu1_choice1
            ;;
        2 )
            process_menu1_choice2
            ;;
        3 )
            process_menu1_choice3
            ;;
        4 )
            process_menu1_choice4
            ;;
        5 )
            process_menu2
            ;;
        6 )
            exit $KZ_OK
            ;;
        * )
            KZ_TEXT=$(eval_gettext "Cannot handle this choice (\$REPLY).")
            errormsg "$KZ_TEXT"
            exit $KZ_ERROR
            ;;
    esac
}


# This function processes menu 1 choice 1.
function process_menu1_choice1() {
    KZ_TITLE="${KZ_MENU1_ACTIONS[1]} (${KZ_MENU1_DESCS[1]})"
    KZ_ROWS=(
        [1]="${KZ_MENU2_ACTIONS[1]}#${KZ_MENU2_DESCS[1]}"
            "${KZ_MENU2_ACTIONS[2]}#${KZ_MENU2_DESCS[2]}"
        )

    process_commandsKZ_RC
}


# This function processes menu 1 choice 3.
function process_menu1_choice3() {
    KZ_TITLE="${KZ_MENU1_ACTIONS[3]} (${KZ_MENU1_DESCS[3]})"
    KZ_ROWS=(
        [1]="${KZ_MENU2_ACTIONS[3]}#${KZ_MENU2_DESCS[3]}"
        )

    process_commands
}


# This function processes menu 1 choice 4.
function process_menu1_choice4() {
    KZ_TITLE="${KZ_MENU1_ACTIONS[4]} (${KZ_MENU1_DESCS[4]})"
    KZ_ROWS=(
        [1]="${KZ_MENU2_ACTIONS[4]}#${KZ_MENU2_DESCS[4]}"
            "${KZ_MENU2_ACTIONS[5]}#${KZ_MENU2_DESCS[5]}"
        )

    process_commands

    # User must type 'logout' to log out.
    $KZ_DESKTOP_ENVIRONMENT || exit $KZ_OK
}


# This function processes menu 2.
function process_menu2() {
    if $KZ_OPTION_GUI; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


# This function shows and processes menu 2 in GUI mode.
function process_menu2_gui() {
    while true; do
        KZ_TITLE=$KZ_MENU2_TITLE
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         520                                     \
                    --height        420                                     \
                    --title         "$KZ_TITLE"                             \
                    --text          "$(gettext 'Select a choice:')"         \
                    --ok-label      "$(gettext 'Continue')"                 \
                    --cancel-label  "$(gettext 'Back')"                     \
                    --column        "$(gettext 'CHOICE')"                   \
                    --column        "$(gettext 'NUM')"                      \
                    --column        "$(gettext 'ACTION')"                   \
                    --column        "$(gettext 'DESCRIPTION')"              \
                    TRUE  1 "${KZ_MENU2_ACTIONS[1]}" "${KZ_MENU2_DESCS[1]}" \
                    FALSE 2 "${KZ_MENU2_ACTIONS[2]}" "${KZ_MENU2_DESCS[2]}" \
                    FALSE 3 "${KZ_MENU2_ACTIONS[3]}" "${KZ_MENU2_DESCS[3]}" \
                    FALSE 4 "${KZ_MENU2_ACTIONS[4]}" "${KZ_MENU2_DESCS[4]}" \
                    FALSE 5 "${KZ_MENU2_ACTIONS[5]}" "${KZ_MENU2_DESCS[5]}" \
                    2> >($LOGCMD)
            ) || break
        process_menu2_choice
    done
}


# This function shows and processes menu 2 in TUI mode.
function process_menu2_tui() {
    local L_MENU2_ACTION=''
    local L_PROMPT=''

    while true; do
        printf  '\n%s\n\n%3s  %-25s  %s\n'  \
                "$KZ_MENU2_HEAD"            \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for L_MENU2_ACTION in "${!KZ_MENU2_ACTIONS[@]}"; do
            printf  '%3s  %-25s  %s\n'                      \
                    "$L_MENU2_ACTION"                       \
                    "${KZ_MENU2_ACTIONS[$L_MENU2_ACTION]}"  \
                    "${KZ_MENU2_DESCS[$L_MENU2_ACTION]}"
        done

        printf '\n'

        L_PROMPT=$(eval_gettext "Run number [1-\$KZ_MENU2_LINES]: ")
        read -rp "$L_PROMPT"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $KZ_MENU2_LINES ]]; then
                    process_menu2_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 2 choice.
function process_menu2_choice() {
    if [[ $REPLY -ge 1 && $REPLY -le $((KZ_MENU2_LINES -1)) ]]; then
        KZ_TITLE="${KZ_MENU2_ACTIONS[$REPLY]} (${KZ_MENU2_DESCS[$REPLY]})"
        KZ_ROWS=(
            [1]="${KZ_MENU2_ACTIONS[$REPLY]}#${KZ_MENU2_DESCS[$REPLY]}"
            )
        process_commands
    elif [[ $REPLY -eq $KZ_MENU2_LINES ]]; then
        process_menu1_tui
    else
        KZ_TEXT=$(eval_gettext "Cannot handle this choice (\$REPLY).")
        errormsg "$KZ_TEXT"
        exit $KZ_ERROR
    fi
}


# This function processes the command corresponding to the choice made.
function process_commands() {
    local       L_COMMAND=''
    local       L_DESCRIPTION=''
    local   -i  L_ROW=0

    show_commands_before_execution

    if $KZ_EXECUTE_COMMAND; then
        for L_ROW in "${!KZ_ROWS[@]}"; do
            L_DESCRIPTION=$(
                printf  '%s'                    \
                        "${KZ_ROWS[$L_ROW]}"    |
                cut     --delimiter='#'         \
                        --fields=1
                )
            L_COMMAND=$(
                printf  '%s'                    \
                        "${KZ_ROWS[$L_ROW]}"    |
                cut     --delimiter='#'         \
                        --fields=2
                )
            KZ_TITLE="$L_DESCRIPTION ($L_COMMAND)"
            $KZ_OPTION_GUI || infomsg "\n${KZ_BOLD}==== $KZ_TITLE \
====${KZ_NORMAL}"
            execute_command
            $KZ_OPTION_GUI || wait_for_enter
        done
    fi
}


# This function shows the commands before they are executed.
function show_commands_before_execution() {
    local       L_COMMAND=''
    local       L_DESCRIPTION=''
    local   -i  L_ROW=0
    local       L_PROMPT=''

    KZ_TEXT="$(gettext 'The following will be executed:')
"
    for L_ROW in "${!KZ_ROWS[@]}"; do
        L_DESCRIPTION=$(
            printf '%s' "${KZ_ROWS[$L_ROW]}" | cut --delimiter='#' --fields=1
            )
        L_COMMAND=$(
            printf '%s' "${KZ_ROWS[$L_ROW]}" | cut --delimiter='#' --fields=2
            )
        KZ_TEXT+="
[$L_ROW] $L_DESCRIPTION ($L_COMMAND)"
    done

    KZ_TEXT+='
'
    L_PROMPT="$(gettext 'Proceed?')"

    if $KZ_OPTION_GUI; then
        KZ_TEXT+="
$L_PROMPT"
        if zenity   --question                          \
                    --no-markup                         \
                    --width         600                 \
                    --height        100                 \
                    --title         "$KZ_TITLE"         \
                    --text          "$KZ_TEXT"          \
                    --ok-label      "$(gettext 'Yes')"  \
                    --cancel-label  "$(gettext 'No')"   2> >($LOGCMD); then
            KZ_EXECUTE_COMMAND=true
        else
            KZ_EXECUTE_COMMAND=false
        fi
    else
        printf '\n%s\n' "$KZ_TEXT"
        while true; do
            read -rp "$(eval_gettext "\$L_PROMPT [Y/n]: ")"
            case $REPLY in
                [YyJj]* | '' )
                    KZ_EXECUTE_COMMAND=true
                    break
                    ;;
                [Nn]* )
                    KZ_EXECUTE_COMMAND=false
                    break
                    ;;
                * )
                    continue
                    ;;
            esac
        done
    fi
}


# This function executes the commands.
function execute_command() {
    local       L_ARG=''
    local       L_CMD=''
    local       L_GUI_OPTION=''
    local   -i  L_RC=0

    L_CMD=$(
        printf '%s' "$L_COMMAND" | cut --delimiter=' ' --fields=1
        )
    L_ARG=$(
        printf '%s' "$L_COMMAND" | cut --delimiter=' ' --fields=2-
        )

    if $KZ_OPTION_GUI; then
        L_GUI_OPTION='--gui'
    fi

    "$L_CMD" "$L_ARG" $L_GUI_OPTION -- || L_RC=$?
    logmsg "$L_COMMAND: rc=$L_RC"
}


# This function controls the termination of the script.
function term_script() {
    exit $KZ_OK
}


###############################################################################
# Main
###############################################################################

function main() {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
