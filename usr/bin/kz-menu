#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Installation menu
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################

###############################################################################
# Imports
###############################################################################

source kz_common.sh as kz


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-menu'
PROGRAM_DESC=$(gettext 'Installation menu')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz menu [-g|--gui] [-h|--help] [-m|--manual] \
[-u|--usage] [-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz menu [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='ghmuv'
readonly OPTIONS_LONG='gui,help,manual,usage,version'

# Define the menu1 options.
MENU1_TITLE=$(gettext 'Installation menu')
readonly MENU1_TITLE
readonly MENU1_HEAD="------------------ $MENU1_TITLE ------------------"
readonly -a  MENU1_ACTIONS=(
            [1]="$(gettext 'Prepare installation')"
                "$(gettext 'Perform installation')"
                "$(gettext 'Finish installation')"
                "$(gettext 'Set up user')"
                "$(gettext 'Command menu')"
                "$(gettext 'Exit')"
            )
readonly -a  MENU1_DESCS=(
            [1]="$(gettext 'Checklist chapter 1')"
                "$(gettext 'Checklist chapter 2')"
                "$(gettext 'Checklist chapter 3')"
                "$(gettext 'Checklist chapter 4')"
                "$(gettext 'Show command menu')"
                "$(gettext 'Exit menu')"
            )
readonly MENU1_LINES=${#MENU1_ACTIONS[@]}

# Define the menu2 options.
MENU2_TITLE=$(gettext 'Command menu')
readonly MENU2_TITLE
readonly MENU2_HEAD="-------------------- $MENU2_TITLE -------------------"
readonly -a  MENU2_ACTIONS=(
            [1]="$(gettext 'Backup home folder')"
                "$(gettext 'Show WiFi information')"
                "$(gettext 'Install apps')"
                "$(gettext 'Restore home folder')"
                "$(gettext 'Set up apps')"
                "$(gettext 'Go to installation menu')"
            )
readonly -a  MENU2_DESCS=(
            [1]='kz backup'
                'kz wifi'
                'kz install'
                'kz restore'
                'kz setup'
                "$(gettext 'Back')"
            )
readonly MENU2_LINES=${#MENU2_DESCS[@]}


###############################################################################
# Globals
###############################################################################

declare OPTION_GUI=false


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local -i rc=0

    check_input "$@"
    if $OPTION_GUI; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -g | --gui )
                if ! [[ ${DISPLAY-} ]]; then
                    text="$program_name: $1: \
$(gettext 'no desktop environment available')
$USAGE"
                    kz.infomsg "$text"
                    exit 1
                fi
                OPTION_GUI=true
                shift
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function shows and processes menu 1 in GUI mode.
function process_menu1_gui() {
    local title=$MENU1_TITLE

    while true; do
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$title"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Exit')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'ACTION')"               \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU1_ACTIONS[1]}" "${MENU1_DESCS[1]}"   \
                    FALSE 2 "${MENU1_ACTIONS[2]}" "${MENU1_DESCS[2]}"   \
                    FALSE 3 "${MENU1_ACTIONS[3]}" "${MENU1_DESCS[3]}"   \
                    FALSE 4 "${MENU1_ACTIONS[4]}" "${MENU1_DESCS[4]}"   \
                    FALSE 5 "${MENU1_ACTIONS[5]}" "${MENU1_DESCS[5]}"   \
                    2> /dev/null
            ) || exit 0
        process_menu1_choice
    done
}


# This function shows and processes menu 1 in TUI mode.
function process_menu1_tui() {
    local menu1_action=''
    local prompt=''

    while true; do
        printf  '\n%s\n\n%3s  %-24s  %s\n'  \
                "$MENU1_HEAD"               \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for menu1_action in "${!MENU1_ACTIONS[@]}"; do
            printf  '%3s  %-24s  %s\n'                  \
                    "$menu1_action"                     \
                    "${MENU1_ACTIONS[$menu1_action]}"   \
                    "${MENU1_DESCS[$menu1_action]}"
        done

        printf '\n'
        prompt=$(eval_gettext "Run number [1-\$MENU1_LINES]: ")
        kz.debugmsg "$prompt"
        read -rp "$prompt"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $MENU1_LINES ]]; then
                    process_menu1_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 1 choice.
function process_menu1_choice() {
    local text=''

    case $REPLY in
        1 )
            process_menu1_choice1
            ;;
        2 )
            process_menu1_choice2
            ;;
        3 )
            process_menu1_choice3
            ;;
        4 )
            process_menu1_choice4
            ;;
        5 )
            process_menu2
            ;;
        6 )
            exit 0
            ;;
        * )
            text=$(eval_gettext "Cannot handle this choice (\$REPLY).")
            kz.errmsg "$text"
            exit 1
            ;;
    esac
}


# This function processes menu 1 choice 1.
function process_menu1_choice1() {
    local -a rows=(
        [1]="${MENU2_ACTIONS[1]}#${MENU2_DESCS[1]}"
        )
    local title="${MENU1_ACTIONS[1]} (${MENU1_DESCS[1]})"

    process_commands
    $OPTION_GUI || kz.wait_for_enter
}


# This function processes menu 1 choice 2.
function process_menu1_choice2() {
    local text=''
    local title="${MENU1_ACTIONS[2]} (${MENU1_DESCS[2]})"

    text="
$(gettext "Follow the steps as described in Checklist installation, Chapter 2.
Checklist installation can be found on https://karelzimmer.nl/en.

Roughly boils down to:

1. Download a CD image file (.iso).
2. Create a bootable USB stick.
3. Boot the computer from this USB stick.
4. Install Linux.")"
    if $OPTION_GUI; then
        zenity  --info                  \
                --width     600         \
                --height    100         \
                --title     "$title"    \
                --text      "$text"     2> /dev/null
    else
        printf '%s\n' "$text"
        kz.wait_for_enter
    fi
}


# This function processes menu 1 choice 3.
function process_menu1_choice3() {
    local -a rows=(
        [1]="${MENU2_ACTIONS[3]}#${MENU2_DESCS[3]}"
        )
    local title="${MENU1_ACTIONS[3]} (${MENU1_DESCS[3]})"

    process_commands
    $OPTION_GUI || kz.wait_for_enter
}


# This function processes menu 1 choice 4.
function process_menu1_choice4() {
    local -a rows=(
        [1]="${MENU2_ACTIONS[4]}#${MENU2_DESCS[4]}"
            "${MENU2_ACTIONS[5]}#${MENU2_DESCS[5]}"
        )
    local title="${MENU1_ACTIONS[4]} (${MENU1_DESCS[4]})"

    process_commands

    # User must type 'logout' to log out.
    $OPTION_GUI || exit 0
}


# This function processes menu 2.
function process_menu2() {
    if $OPTION_GUI; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


# This function shows and processes menu 2 in GUI mode.
function process_menu2_gui() {
    local title=$MENU2_TITLE

    while true; do
        REPLY=$(
            zenity  --list                                              \
                    --radiolist                                         \
                    --width         520                                 \
                    --height        420                                 \
                    --title         "$title"                            \
                    --text          "$(gettext 'Select a choice:')"     \
                    --ok-label      "$(gettext 'Continue')"             \
                    --cancel-label  "$(gettext 'Back')"                 \
                    --column        "$(gettext 'CHOICE')"               \
                    --column        "$(gettext 'NUM')"                  \
                    --column        "$(gettext 'ACTION')"               \
                    --column        "$(gettext 'DESCRIPTION')"          \
                    TRUE  1 "${MENU2_ACTIONS[1]}" "${MENU2_DESCS[1]}"   \
                    FALSE 2 "${MENU2_ACTIONS[2]}" "${MENU2_DESCS[2]}"   \
                    FALSE 3 "${MENU2_ACTIONS[3]}" "${MENU2_DESCS[3]}"   \
                    FALSE 4 "${MENU2_ACTIONS[4]}" "${MENU2_DESCS[4]}"   \
                    FALSE 5 "${MENU2_ACTIONS[5]}" "${MENU2_DESCS[5]}"   \
                    2> /dev/null
            ) || break
        process_menu2_choice
    done
}


# This function shows and processes menu 2 in TUI mode.
function process_menu2_tui() {
    local menu2_action=''
    local prompt=''

    while true; do
        printf  '\n%s\n\n%3s  %-25s  %s\n'  \
                "$MENU2_HEAD"               \
                "$(gettext 'NUM')"          \
                "$(gettext 'ACTION')"       \
                "$(gettext 'DESCRIPTION')"
        for menu2_action in "${!MENU2_ACTIONS[@]}"; do
            printf  '%3s  %-25s  %s\n'                  \
                    "$menu2_action"                     \
                    "${MENU2_ACTIONS[$menu2_action]}"   \
                    "${MENU2_DESCS[$menu2_action]}"
        done

        printf '\n'
        prompt=$(eval_gettext "Run number [1-\$MENU2_LINES]: ")
        kz.debugmsg "$prompt"
        read -rp "$prompt"

        case $REPLY in
            *[^[:digit:]]* )
                continue
                ;;
            * )
                if [[ $REPLY -ge 1 && $REPLY -le $MENU2_LINES ]]; then
                    process_menu2_choice
                else
                    continue
                fi
                ;;
        esac
    done
}


# This function processes menu 2 choice.
function process_menu2_choice() {
    local text=''

    local -a rows=(
        [1]="${MENU2_ACTIONS[$REPLY]}#${MENU2_DESCS[$REPLY]}"
        )
    local -i reply_save=''
    local title="${MENU2_ACTIONS[$REPLY]} (${MENU2_DESCS[$REPLY]})"

    if [[ $REPLY -ge 1 && $REPLY -le $((MENU2_LINES -1)) ]]; then
        reply_save=$REPLY
        process_commands
        # Setup apps on a server means manual logout.
        if [[ $reply_save -eq 5 ]] && ! [[ ${DISPLAY-} ]]; then
            exit $rc
        fi
        $OPTION_GUI || kz.wait_for_enter
    elif [[ $REPLY -eq $MENU2_LINES ]]; then
        process_menu1_tui
    else
        text=$(eval_gettext "Cannot handle this choice (\$REPLY).")
        kz.errmsg "$text"
        exit 1
    fi
}


# This function processes the command corresponding to the choice made.
function process_commands() {
    local -i row=0
    local command=''
    local description=''
    local execute_command=false
    local title=''

    show_commands_before_execution

    if $execute_command; then
        for row in "${!rows[@]}"; do
            description=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
                )
            command=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
                )
            title="$description ($command)"
            execute_command
        done
    fi
}


# This function shows the commands before they are executed.
function show_commands_before_execution() {
    local -i row=0
    local command=''
    local description=''
    local prompt=''
    local text=''

    text="$(gettext 'The following will be executed:')
"
    for row in "${!rows[@]}"; do
        description=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
            )
        text+="
[$row] $description ($command)"
    done

    text+="
"
    prompt="$(gettext 'Proceed?')"
    kz.debugmsg "$prompt"

    if $OPTION_GUI; then
        text+="
$prompt"
        if zenity   --question                          \
                    --no-markup                         \
                    --width         600                 \
                    --height        100                 \
                    --title         "$title"            \
                    --text          "$text"             \
                    --ok-label      "$(gettext 'Yes')"  \
                    --cancel-label  "$(gettext 'No')"   2> /dev/null; then
            execute_command=true
        else
            execute_command=false
        fi
    else
        printf '\n%s\n' "$text"
        while true; do
            read -rp "$(eval_gettext "\$prompt [Y/n]: ")"
            case $REPLY in
                [YyJj]* | '' )
                    execute_command=true
                    break
                    ;;
                [Nn]* )
                    execute_command=false
                    break
                    ;;
                * )
                    continue
                    ;;
            esac
        done
    fi
}


# This function executes the commands.
function execute_command() {
    local cmd=${command/kz /kz-}
    local gui_option=''

    if $OPTION_GUI; then
        gui_option='--gui'
    fi

    # Use e.g. 'kz-install' instead of 'kz install'.
    "$cmd" $gui_option || rc=$?
    kz.logmsg "$command: rc=$rc"
}


# This function controls the termination of the script.
function term() {
    exit 0
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
