#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Restore home folder
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh as kz


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-restore'
PROGRAM_DESC=$(gettext 'Restore home folder')
readonly PROGRAM_DESC
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"

USAGE=$(gettext "Usage: kz restore [-g|--gui] [-s|--source <directory>] \
[-h|--help] [-m|--manual] [-u|--usage] [-v|--version]")
readonly USAGE

HELP="$(gettext "Usage: kz restore [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -s, --source <directory>
                 use backup in specified directory')
$(gettext '  -h, --help     show this help text')
$(gettext '  -m, --manual   show manual page')
$(gettext '  -u, --usage    show a short usage summary')
$(gettext '  -v, --version  show program version')"
readonly HELP

readonly OPTIONS_SHORT='gs:hmuv'
readonly OPTIONS_LONG='gui,source:,help,manual,usage,version'


###############################################################################
# Globals
###############################################################################

declare OPTION_GUI=false
declare SOURCE_MEDIUM=''
declare -i RESTORE_RC=0


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local medium=''
    local option_source=false
    local source_argument=''
    local source=''

    check_input "$@"
    check_source
    restore_backup
    restore_settings
}


# This function checks the script input.
function check_input() {
    local parsed=''
    local program_name=${PROGRAM_NAME/kz-/kz }

    parsed=$(getopt --alternative                       \
                    --options       "$OPTIONS_SHORT"    \
                    --longoptions   "$OPTIONS_LONG"     \
                    --name          "$program_name"     \
                    --              "$@")               ||
                    {
                        kz.infomsg "$USAGE"
                        exit 1
                    }
    eval set -- "$parsed"
    unset parsed

    process_options "$@"
}


# This function handles the script options and arguments.
function process_options() {
    local program_name=${PROGRAM_NAME/kz-/kz }
    local text=''

    while true; do
        case $1 in
            -g | --gui )
                if ! [[ ${DISPLAY-} ]]; then
                    text="$program_name: $1: \
$(gettext 'no desktop environment available')
$USAGE"
                    kz.infomsg "$text"
                    exit 1
                fi
                OPTION_GUI=true
                shift
                ;;
            -s | --source )
                if $option_source; then
                    text="$program_name: $1 $2: \
$(gettext 'too many options')
$USAGE"
                    kz.infomsg "$text"
                    exit 1
                fi
                option_source=true
                source_argument=$2
                shift 2
                ;;
            -h | --help )
                kz.process_option_help
                exit 0
                ;;
            -m | --manual )
                kz.process_option_manual
                exit 0
                ;;
            -u | --usage )
                kz.process_option_usage
                exit 0
                ;;
            -v | --version )
                kz.process_option_version
                exit 0
                ;;
            -- )
                shift
                break
                ;;
            * )
                text="$PROGRAM_NAME: getopt: $(gettext 'internal error')"
                kz.errmsg "$text"
                exit 1
                ;;
        esac
    done

    if [[ $* ]]; then
        text="$program_name: $*: $(gettext 'arguments are not allowed')
$USAGE"
        kz.infomsg "$text"
        exit 1
    fi
}


# This function checks if the source is available.
function check_source() {
    local usb_mount_point="/media/$USER"
    local text=''

    if grep --quiet rhel /etc/os-release; then
        usb_mount_point="/run/media/$USER"
    fi

    if $option_source; then

        if ! [[ -d $source_argument ]]; then
            text="$program_name: $source_argument: \
$(gettext 'directory does not exist')
$USAGE"
            kz.infomsg "$text"
            exit 1
        fi

        source=$source_argument/$USER@$HOSTNAME
        SOURCE_MEDIUM=$source_argument
    else
        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if ! [[ $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            kz.infomsg "$text"

            $OPTION_GUI || kz.wait_for_enter

            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if ! [[ $medium ]]; then
                kz.errmsg "$text"
                exit 1
            fi
        fi

        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            kz.infomsg "$text"

            $OPTION_GUI || kz.wait_for_enter

            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                kz.errmsg "$text"
                exit 1
            fi
        fi

        source=$medium/Backups/$USER@$HOSTNAME
        SOURCE_MEDIUM=$medium

        if ! [[ -d $source ]]; then
            text=$(eval_gettext "No backup found on connected USB medium.

Connect a USB medium with the directory \$USER@\$HOSTNAME.")
            kz.errmsg "$text"
            exit 1
        fi
    fi
}


# This function restores the backup.
function restore_backup() {
    local text=''
    local title=''

    title=$(gettext 'Restore home folder')
    text=$(gettext 'Preparing restore (this can take a while)')

    if $OPTION_GUI; then
        kz.debugmsg "$title"...
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                "$source"/              \
                "$HOME"/                \
                2> >($PROGRAM_LOGS)     |
        sed     --expression='s/^/#/'   |
        zenity  --progress              \
                --auto-close            \
                --no-cancel             \
                --pulsate               \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     2> /dev/null || RESTORE_RC=$?
    else
        text+='...'
        kz.infomsg "$text"
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                --human-readable        \
                "$source"/              \
                "$HOME"/                2> /dev/null || RESTORE_RC=$?
    fi
}


# This function restores the user settings.
function restore_settings() {
    local settings_dir=''

    settings_dir=$HOME/$(gettext 'Settings')

    if [[ ${DISPLAY-} ]]; then
        kz.logmsg 'Restore settings...'
        restore_setting_desktop
    fi
}


# This function restores the desktop background, if possible.
function restore_setting_desktop() {
    local input_file=$settings_dir/desktop

    if [[ -f $input_file ]]; then
        kz.logmsg 'Restore the desktop background...'
        gsettings   set                                         \
                    org.gnome.desktop.background picture-uri    \
                    "file://$input_file"
    fi
}


# This function controls the termination of the script.
function term() {
    local -i num_users=0
    local -i rc=0
    local text=''
    local users=''

    if [[ $RESTORE_RC -ne 0 ]]; then
        text="$(eval_gettext "Restore ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while restoring the backup, or
is there not enough space on \$HOME.")

$(eval_gettext "Use \"journalctl --boot --id=\$PROGRAM_NAME\" in Terminal to \
view log messages.")

$(gettext "Try restoring the back up again.")"
        kz.errmsg "$text"
        exit 1
    fi

    num_users=$(find /home/* -prune -print | wc --lines)

    if [[ $num_users -eq 1 ]]; then
        text=$(gettext 'The backup has been restored.')
    else
        users=$(
            gettext 'USERNAME|USERID|USER'
            printf  '\n'
            grep    /bin/bash /etc/passwd           |
            grep    root --invert-match             |
            cut     --delimiter=':' --fields=1,3,5  |
            tr      ',,,' '   '                     |
            tr      ':' '|'
            )
        text="$(eval_gettext "The backup has restored for \$USER (there are \
\$num_users users).")

$users"
    fi

    if [[ $SOURCE_MEDIUM == */media/* ]]; then
        term_usb || rc=$?
        if [[ $rc -eq 0 ]]; then
            text+="

$(gettext 'The USB medium can be removed.')"
        else
            text+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi
    fi
    kz.infomsg "$text"

    exit 0
}


# This function tries to unmount the USB device.
function term_usb() {
    local device=''
    local text=''

    device='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$SOURCE_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
        )

    title=$(gettext 'Restore home folder')
    text=$(gettext 'Disconnect the USB media')
    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        kz.debugmsg "$text..."
        term_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> /dev/null
            )
    else
        kz.infomsg "$text..."
        term_unmount
    fi

    return $rc
}


# This function unmounts the USB device.
function term_unmount() {
    umount "$SOURCE_MEDIUM"                         |& $PROGRAM_LOGS || rc+=$?
    udisksctl lock --block-device "$device"         |& $PROGRAM_LOGS || rc+=$?
    udisksctl power-off --block-device "$device"    |& $PROGRAM_LOGS || rc+=$?
}


###############################################################################
# Main
###############################################################################

function main() {
    kz.init "$@"
    process "$@"
    term
}

main "$@"
