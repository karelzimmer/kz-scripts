#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Restore backup.
#
# Written in 2007 by Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Public Domain Dedication <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################

set -o errexit
program_path=$(cd "$(dirname "$(realpath "$0")")" && pwd)
source "$program_path"/kz_common.sh


###############################################################################
# Constants
###############################################################################

declare program_name='kz-restore'
declare program_desc
program_desc=$(gettext 'Restore backup')
declare display_name=${program_name/kz-/kz }

declare usage
usage="$(eval_gettext "Usage: \$display_name [--dry-run] [-g|--gui] \
[-s|--source=DIRECTORY]")
                  $options_usage"
declare help
help="$(eval_gettext "Usage: \$display_name [OPTION...]")

$program_desc.

$(gettext 'Options:')
      --dry-run  $(gettext 'perform a test run without making any changes')
  -g, --gui      $(gettext 'starts in graphics mode')
$(gettext '  -s, --source=DIRECTORY
                 use backup in DIRECTORY')
$options_help"
declare options_short+='gs:'
declare options_long+=',dry-run,gui,source:'


###############################################################################
# Variables
###############################################################################

declare dry_run_option=''
declare medium=''
declare option_dry_run=false
declare option_gui=false
declare option_source=false
declare source_argument=''
declare source_medium=''
declare source=''


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i getopt_rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usage_line"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            --dry-run)
                option_dry_run=true
                dry_run_option='--dry-run'
                shift
                ;;
            -g|--gui)
                option_gui=true
                kz_common.reset_terminal_attributes
                shift
                ;;
            -s|--source)
                option_source=true
                source_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf  "$display_name: $*: %s\n$usage_line\n" \
                "$(gettext 'arguments are not allowed')"
        exit $err
    fi
}


function process_input {
    # shellcheck disable=SC2034
    local operation=backup
    local prompt=''
    local restore=false

    if $option_source; then
        if ! [[ -d $source_argument ]]; then
            printf  "$display_name: $source_argument: %s\n$usage_line\n" \
                    "$(gettext 'directory does not exist')"
            exit $err
        fi
        source=$source_argument/backup-$HOSTNAME-$USER
        source_medium=$source_argument
    else
        medium=$(ls --directory /media/"$USER"/* 2> >($logcmd) || true)
        if [[ -z $medium ]]; then
            warn "$(gettext 'Make sure that the USB medium containing the \
backup is connected.')"
            kz_common.wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($logcmd) || true)
            if [[ -z $medium ]]; then
                err "$(eval_gettext "No USB medium found.

Connect a USB medium, and then start \$operation again.")"
#TODO
            exit $err
            fi
        fi
        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
#TODO
            err "$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files, then \$operation backup.")"
#TODO
            exit $err
        fi
        source=$medium/backup-$HOSTNAME-$USER
        source_medium=$medium
        if ! [[ -d $source ]]; then
#TODO
            err "Geen back-up gevonden op aangekoppeld usb-medium.

Koppel een usb-medium aan met hierop de map backup-$HOSTNAME-$USER, en start \
daarna restore opnieuw."
            exit $err
        fi
    fi

    kz_common.check_on_ac_power

#TODO
    title='Back-up terugzetten'
    text='Back-up wordt TERUGGEZET.
'
#TODO
    prompt='Doorgaan?'
    if $option_gui; then
        text+="
$prompt"
#TODO Ja/Nee
        if zenity   --question                  \
                    --no-markup                 \
                    --width         600         \
                    --height        50          \
                    --title         "$title"    \
                    --text          "$text"     \
                    --ok-label      'Ja'        \
                    --cancel-label  'Nee'       2> >($logcmd); then
            restore=true
        else
            restore=false
        fi
    else
        info "$text"
        while true; do
#TODO j/N
            read -rp "$prompt [j/N]: "
            case $REPLY in
                j*|J*)
                    restore=true
                    break
                    ;;
                n*|N*|'')
                    restore=false
                    break
                    ;;
                *)
                    printf '%s' "${rewrite_line}"
                    continue
                    ;;
            esac
        done
    fi
    if $restore; then
        restore_backup
        if ! $option_dry_run; then
#TODO
            title='Instellingen terugzetten'
            text='Instellingen terugzetten'
            if $option_gui; then
                restore_settings                |
                zenity  --progress              \
                        --pulsate               \
                        --auto-close            \
                        --no-cancel             \
                        --width     600         \
                        --height    50          \
                        --title     "$title"    \
                        --text      "$text"     2> >($logcmd)
            else
                info "$text..."
                restore_settings
            fi
        fi
    else
        exit $ok
    fi
}


function restore_backup {
    local -i rsync_rc=0
    local target=$HOME

#TODO
    text='Restore voorbereiden (dit kan even duren)'
    if $option_gui; then
        rsync   --archive               \
                --verbose               \
                $dry_run_option         \
                "$source"/              \
                "$target"/              \
                2> >($logcmd)           |
        sed     --expression='s/^/#/'   |
        zenity  --progress              \
                --auto-close            \
                --no-cancel             \
                --pulsate               \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     2> >($logcmd) || rsync_rc=$?
    else
        info "$text..."
        rsync   --archive               \
                --verbose               \
                --human-readable        \
                $dry_run_option         \
                "$source"/              \
                "$target"/              2> >($logcmd) || rsync_rc=$?
    fi

    case $rsync_rc in
        0)
            return $ok
            ;;
        *)
#TODO
            err "Back-up terugzetten is geÃ«indigd met fouten.

Mogelijk zijn enkele bestanden niet leesbaar, of zijn er bestanden verwijderd
of toegevoegd tijdens het terugzetten van de back-up, of is er te weinig
ruimte op $target."
            exit $err
            ;;
    esac
}


function restore_settings {
#TODO
    local tgtdir=$HOME/Instellingen

    restore_settings_desktop_background
    restore_settings_favorite_apps

    # Old folder, lagacy.
    rm --force --recursive "$HOME"/kz-data/
}


function restore_settings_desktop_background {
#TODO
    local file=$tgtdir/Achtergrond

    if [[ -f $file ]]; then
        gsettings set org.gnome.desktop.background picture-uri "file://$file"
    fi
}


function restore_settings_favorite_apps {
#TODO
    local file=$tgtdir/Favorieten

    if [[ -f $file ]]; then
        gsettings set org.gnome.shell favorite-apps "$(cat "$file")"
    fi
}


function term_script {
    local dev=''
    local -i rc=0

    sync |& $logcmd || rc+=$?
    text=''
    if $option_dry_run; then
#TODO
        err "De back-up is NIET teruggezet (DRY RUN)."
        exit $err
    fi
    if [[ $source_medium == /media/* ]]; then
#TODO
        text='Het usb-medium afkoppelen'
        dev='/dev/'$(
            lsblk   --ascii             |
            grep    --before-context=1  \
                    "$source_medium"    |
            head    -1                  |
            cut     --delimiter='-'     \
                    --fields=2          |
            cut     --delimiter=' '     \
                    --fields=1
        )
        if $option_gui; then
            umount "$source_medium";                    \
            udisksctl lock --block-device "$dev";       \
            udisksctl power-off --block-device "$dev"   |
            zenity  --progress                          \
                    --pulsate                           \
                    --auto-close                        \
                    --no-cancel                         \
                    --width     600                     \
                    --height    50                      \
                    --title     "$title"                \
                    --text      "$text"                 2> >($logcmd) || rc+=$?
        else
            info "$text..."
            umount "$source_medium" |& $logcmd || rc+=$?
            udisksctl lock --block-device "$dev" |& $logcmd || rc+=$?
            udisksctl power-off --block-device "$dev" |& $logcmd || rc+=$?
        fi
        if [[ $rc -eq $ok ]]; then
#TODO
            info "
De back-up is teruggezet.

Het usb-medium kan verwijderd worden."
        else
#TODO
            warn "
De back-up is teruggezet.

Koppel zelf (veilig!) het usb-medium af."
        fi
    else
#TODO
        info "
De back-up is gemaakt."
    fi
    exit $ok
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
