#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Restore backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-restore'
readonly PROGRAM_DESC=$(gettext 'Restore backup')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] [-s|--source \
DIRECTORY]
                  \$OPTIONS_USAGE")"
readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$(gettext "  Mandatory arguments to long options are mandatory for short optio\
ns too.")

$(gettext '  -g, --gui      starts in graphical mode')
$(gettext '  -s, --source DIRECTORY
                 use backup in DIRECTORY')
$OPTIONS_HELP"

readonly X_OPTIONS_SHORT='gs:'
readonly X_OPTIONS_LONG=',gui,source:'

readonly TARGET=$HOME


###############################################################################
# Variables
###############################################################################

declare medium=''
declare option_source=false
declare source_argument=''
declare source_medium=''
declare source=''


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                                       \
                --options       "$OPTIONS_SHORT$X_OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG$X_OPTIONS_LONG"      \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        msg_info "$USAGE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                if [[ $EDITION = 'server' ]]; then
                    text="$DISPLAY_NAME: $1: \
$(gettext 'not allowed on a server')
$USAGE_LINE"
                    msg_info "$text"
                    exit $ERROR
                fi
                option_gui=true
                shift
                ;;
            -s|--source)
                if $option_source; then
                    text="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE_LINE"
                    msg_info "$text"
                    exit $ERROR
                fi
                option_source=true
                source_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        msg_info "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    check_source
    check_on_ac_power
    restore_backup
    restore_settings
}


# This function checks if the source is available.
function check_source {
    if $option_source; then
        if [[ ! -d $source_argument ]]; then
            text="$DISPLAY_NAME: $source_argument: \
$(gettext 'directory does not exist')
$USAGE_LINE"
            msg_info "$text"
            exit $ERROR
        fi
        source=$source_argument/$USER@$HOSTNAME
        source_medium=$source_argument
    else
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ -z $medium ]]; then
            text=$(gettext "No USB medium found.

Connect a USB medium.")
            msg_warning "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ -z $medium ]]; then
                msg_error "$text"
                exit $ERROR
            fi
        fi
        medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            text="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            msg_warning "$text"
            $option_gui || wait_for_enter
            medium=$(ls --directory /media/"$USER"/* 2> >($LOGCMD) || true)
            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                msg_error "$text"
                exit $ERROR
            fi
        fi
        source=$medium/$USER@$HOSTNAME
        source_medium=$medium
        if [[ ! -d $source ]]; then
            text=$(eval_gettext "No backup found on connected USB medium.

Connect a USB medium with the directory \$USER@\$HOSTNAME.")
            msg_error "$text"
            exit $ERROR
        fi
    fi
}


# This function processes the restore of user settings.
function restore_settings {
    if [[ $EDITION = 'desktop' ]]; then
        title=$(gettext 'Restore settings')
        text=$title
        if $option_gui; then
            restore_setting_all             |
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> >($LOGCMD)
        else
            text+='...'
            msg_info "$text"
            restore_setting_all
        fi
    fi
}


# This function restores the user settings.
function restore_setting_all {
    restore_setting_desktop
    restore_setting_avatar
}


# This function restores the desktop background.
function restore_setting_desktop {
    local input_file=$(xdg-user-dir PICTURES)/desktop

    if [[ -f $input_file ]]; then
        msg_log 'Restore the desktop background...'
        gsettings   set                                         \
                    org.gnome.desktop.background picture-uri    \
                    "file://$input_file"
    fi
}


# This function copies the user avatar.
function restore_setting_avatar {
    local input_file=$(xdg-user-dir PICTURES)/avatar

    if [[ -f $input_file ]]; then
        msg_log 'Restore the user avatar...'
        title=$(gettext 'Set user photo')
        text="
$(gettext "To restore the users avatar:
1. Press the Super key[1], type 'user' and click behind Settings \
on Users.
2. Click on Change avatar (pencil icon).
3. Click Select a file.
4. Select avatar in Personal folder / Pictures.

[1] The Super key is the Windows key, Command key (Apple), or Magnifier key \
(Chromebook).")"
        msg_info "$text"
        $option_gui || wait_for_enter
    fi
}


# This function restores the backup.
function restore_backup {
    local       error_file=''
    local       rsync_messages=''
    local   -i  restore_rc=0

    error_file=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")

    title=$(gettext 'Restore backup')
    text=$(gettext 'Preparing restore (this can take a while)')
    if $option_gui; then
        msg_log "$title"...
        rsync   --archive               \
                --verbose               \
                "$source"/              \
                "$TARGET"/              \
                2> "$error_file"    |
        sed     --expression='s/^/#/'   |
        zenity  --progress              \
                --auto-close            \
                --no-cancel             \
                --pulsate               \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     2> >($LOGCMD) || restore_rc=$?
    else
        text+='...'
        msg_info "$text"
        rsync   --archive               \
                --verbose               \
                --human-readable        \
                "$source"/              \
                "$TARGET"/              2> "$error_file" || restore_rc=$?
    fi

    text=$(gettext "Writing data from memory (this may take a while)")
    if $option_gui; then
        msg_log "$text"...
        sync                            |
        zenity  --progress              \
                --pulsate               \
                --auto-close            \
                --no-cancel             \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$text"     &> >($LOGCMD)
    else
        text+='...'
        msg_info "$text"
        sync |& $LOGCMD
    fi
    if [[ $restore_rc -ne $OK ]]; then
        # shellcheck disable=SC2034
        rsync_messages=$(cat "$error_file")
        text=$(eval_gettext "Restore ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while restoring the backup, or
is there not enough space on \$TARGET.

Check the rsync messages (also in \$error_file):
\$rsync_messages

Try restoring the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app Terminal, type 'kz restore'.")
        msg_error "$text"
        exit $ERROR
    fi
    rm --verbose "$error_file" |& $LOGCMD
}


# This function controls the termination of the script.
function term_script {
    if [[ $source_medium == /media/* ]]; then
        term_script_unmount
    else
        text=$(gettext 'The backup has been restored.')
        msg_info "$text"
    fi
    exit $OK
}


# This function tries to unmount the USB device.
function term_script_unmount {
    local       dev=''
    local   -i  rc=0

    text=$(gettext 'Disconnect the USB media')
    dev='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$source_medium"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )
    if $option_gui; then
        msg_log "$text"...
        umount "$source_medium"                     |& $LOGCMD || rc+=$?;   \
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?;   \
        udisksctl power-off --block-device "$dev"   |& $LOGCMD              |
        zenity  --progress                                                  \
                --pulsate                                                   \
                --auto-close                                                \
                --no-cancel                                                 \
                --width     600                                             \
                --height    50                                              \
                --title     "$title"                                        \
                --text      "$text"                                         \
                2> >($LOGCMD) || rc=$?
    else
        text+='...'
        msg_info "$text"
        umount "$source_medium"                     |& $LOGCMD || rc+=$?
        udisksctl lock --block-device "$dev"        |& $LOGCMD || rc+=$?
        udisksctl power-off --block-device "$dev"   |& $LOGCMD || rc+=$?
    fi
    if [[ $rc -eq $OK ]]; then
        text="$(gettext 'The backup has been restored.')

$(gettext 'The USB medium can be removed.')"
        msg_info "$text"
    else
        text="$(gettext 'The backup has been restored.')

$(gettext 'Disconnect the USB medium yourself (safely!).')"
        msg_warning "$text"

    fi
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
