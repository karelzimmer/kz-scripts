#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Restore home folder
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-restore'
readonly PROGRAM_LOGS="systemd-cat --identifier=$PROGRAM_NAME"
PROGRAM_DESC=$(gettext 'Restore home folder')
readonly PROGRAM_DESC

USAGE="$(eval_gettext "Usage: kz restore [-g|--gui] [-s|--source <directory>]
                  \$OPTIONS_USAGE")"
readonly USAGE

X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext '  -g, --gui      run in graphical mode,')
$(gettext '                 requires a desktop environment')
$(gettext '  -s, --source <directory>
                 use backup in specified directory')"
readonly X_OPTIONS_HELP

HELP="$(gettext "Usage: kz restore [<options>]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"
readonly HELP

readonly X_OPTIONS_SHORT='gs:'
readonly X_OPTIONS_LONG=',gui,source:'


###############################################################################
# Globals
###############################################################################

declare SOURCE_MEDIUM=''
declare -i RESTORE_RC=0


###############################################################################
# Functions
###############################################################################

# This function performs the script actions, such as checking the input.
function process() {
    local medium=''
    local option_source=false
    local source_argument=''
    local source=''

    check_input "$@"
    check_source
    restore_backup
    restore_settings
}


# This function handles the options and arguments.
function check_input() {
    local parsed=''

    parsed=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "kz restore"                        \
                --              "$@"
        ) || RC=$?
    if [[ $RC -ne $OK ]]; then
        infomsg "$USAGE"
        exit $ERR
    fi
    eval set -- "$parsed"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the script options and arguments.
function process_x_options() {
    while true; do
        case $1 in
            -g | --gui )
                if ! [[ ${DISPLAY-} ]]; then
                    TEXT=\
"kz restore: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                OPTION_GUI=true
                shift
                ;;
            -s | --source )
                if $option_source; then
                    TEXT="kz restore: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERR
                fi
                option_source=true
                source_argument=$2
                shift 2
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ $* ]]; then
        TEXT="kz restore: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERR
    fi
}


# This function checks if the source is available.
function check_source() {
    local usb_mount_point="/media/$USER"

    if grep --quiet rhel /etc/os-release; then
        usb_mount_point="/run/media/$USER"
    fi

    if $option_source; then

        if ! [[ -d $source_argument ]]; then
            TEXT="kz restore: $source_argument: \
$(gettext 'directory does not exist')
$USAGE"
            infomsg "$TEXT"
            exit $ERR
        fi

        source=$source_argument/$USER@$HOSTNAME
        SOURCE_MEDIUM=$source_argument
    else
        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if ! [[ $medium ]]; then
            TEXT=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter

            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if ! [[ $medium ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

        if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
            TEXT="$(eval_gettext "Connect only one USB medium.

Now connected:
\$medium

Disconnect media via Files.")"
            infomsg "$TEXT"

            $OPTION_GUI || wait_for_enter

            medium=$(ls --directory "$usb_mount_point"/* 2> /dev/null || true)

            if [[ $(printf '%s\n' "$medium" | wc --lines) -gt 1 ]]; then
                errmsg "$TEXT"
                exit $ERR
            fi
        fi

        source=$medium/Backups/$USER@$HOSTNAME
        SOURCE_MEDIUM=$medium

        if ! [[ -d $source ]]; then
            TEXT=$(eval_gettext "No backup found on connected USB medium.

Connect a USB medium with the directory \$USER@\$HOSTNAME.")
            errmsg "$TEXT"
            exit $ERR
        fi
    fi
}


# This function restores the backup.
function restore_backup() {
    local title=''

    title=$(gettext 'Restore home folder')
    TEXT=$(gettext 'Preparing restore (this can take a while)')

    if $OPTION_GUI; then
        logmsg "$title"...
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                "$source"/              \
                "$HOME"/                \
                2> >($PROGRAM_LOGS)           |
        sed     --expression='s/^/#/'   |
        zenity  --progress              \
                --auto-close            \
                --no-cancel             \
                --pulsate               \
                --width     600         \
                --height    50          \
                --title     "$title"    \
                --text      "$TEXT"     2> /dev/null || RESTORE_RC=$?
    else
        TEXT+='...'
        infomsg "$TEXT"
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                --human-readable        \
                "$source"/              \
                "$HOME"/                2> /dev/null || RESTORE_RC=$?
    fi
}


# This function restores the user settings.
function restore_settings() {
    local settings_dir=''

    settings_dir=$HOME/$(gettext 'Settings')

    if [[ ${DISPLAY-} ]]; then
        logmsg 'Restore settings...'
        restore_setting_desktop
    fi
}


# This function restores the desktop background, if possible.
function restore_setting_desktop() {
    local input_file=$settings_dir/desktop

    if [[ -f $input_file ]]; then
        logmsg 'Restore the desktop background...'
        gsettings   set                                         \
                    org.gnome.desktop.background picture-uri    \
                    "file://$input_file"
    fi
}


# This function controls the termination of the script.
function term() {
    local users=''
    local -i num_users=0

    if [[ $RESTORE_RC -ne $OK ]]; then
        TEXT="$(eval_gettext "Restore ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while restoring the backup, or
is there not enough space on \$HOME.")

$(eval_gettext "Use \"journalctl --boot --id=\$PROGRAM_NAME\" in Terminal to \
view log messages.")

$(gettext "Try restoring the back up again.")"
        errmsg "$TEXT"
        exit $ERR
    fi

    num_users=$(find /home/* -prune -print | wc --lines)

    if [[ $num_users -eq 1 ]]; then
        TEXT=$(gettext 'The backup has been restored.')
    else
        users=$(
            gettext 'USERNAME|USERID|USER'
            printf  '\n'
            grep    /bin/bash /etc/passwd           |
            grep    root --invert-match             |
            cut     --delimiter=':' --fields=1,3,5  |
            tr      ',,,' '   '                     |
            tr      ':' '|'
            )
        TEXT="$(eval_gettext "The backup has restored for \$USER (there are \
\$num_users users).")

$users"
    fi

    if [[ $SOURCE_MEDIUM == */media/* ]]; then
        term_usb || RC=$?
        if [[ $RC -eq $OK ]]; then
            TEXT+="

$(gettext 'The USB medium can be removed.')"
        else
            TEXT+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi
    fi
    infomsg "$TEXT"

    exit $OK
}


# This function tries to unmount the USB device.
function term_usb() {
    local device=''
    local text=''

    device='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$SOURCE_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
        )

    title=$(gettext 'Restore home folder')
    text=$(gettext 'Disconnect the USB media')
    if $OPTION_GUI; then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        logmsg "$TEXT..."
        term_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> /dev/null
            )
    else
        infomsg "$text..."
        term_unmount
    fi

    return $RC
}


# This function unmounts the USB device.
function term_unmount() {
    umount "$SOURCE_MEDIUM"                         |& $PROGRAM_LOGS || RC+=$?
    udisksctl lock --block-device "$device"         |& $PROGRAM_LOGS || RC+=$?
    udisksctl power-off --block-device "$device"    |& $PROGRAM_LOGS || RC+=$?
}


###############################################################################
# Main
###############################################################################

function main() {
    init    "$@"
    process "$@"
    term
}

main "$@"
