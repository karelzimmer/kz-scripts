#!/usr/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# SPDX-FileComment: Restore backup
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

source "$(dirname "$(realpath "$0")")/kz_common.sh"


###############################################################################
# Variables
###############################################################################

declare PROGRAM_NAME='kz-restore'
declare PROGRAM_DESC
        PROGRAM_DESC=$(gettext 'Restore backup')
declare DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

declare USAGE
        USAGE="$(eval_gettext "Usage: \$DISPLAY_NAME [-g|--gui] \
[-s|--source DIRECTORY]
                  \$OPTIONS_USAGE")"

declare X_OPTIONS_HELP
        X_OPTIONS_HELP="$(gettext "  Mandatory arguments to long options are \
mandatory for short options too.")

$(gettext "  -g, --gui      run in graphical mode, requires desktop \
environment")
$(gettext '  -s, --source DIRECTORY
                 use backup in DIRECTORY')"

declare HELP
        HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$X_OPTIONS_HELP
$OPTIONS_HELP"

declare X_OPTIONS_SHORT='gs:'
declare X_OPTIONS_LONG=',gui,source:'

declare MEDIUM=''
declare OPTION_SOURCE=false
declare SOURCE_ARGUMENT=''
declare SOURCE_MEDIUM=''
declare SOURCE=''
declare TARGET=$HOME


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       PARSED=''
    local   -i  PARSED_RC=0

    PARSED=$(
        getopt  --alternative                                       \
                --options       "${OPTIONS_SHORT}$X_OPTIONS_SHORT"  \
                --longoptions   "${OPTIONS_LONG}$X_OPTIONS_LONG"    \
                --name          "$DISPLAY_NAME"                     \
                --              "$@"
        ) || PARSED_RC=$?
    if [[ $PARSED_RC -ne $OK ]]
    then
        infomsg "$USAGE"
        exit $ERROR
    fi
    eval set -- "$PARSED"

    process_options   "$@"
    process_x_options "$@"
}


# This function handles the extra options and arguments.
function process_x_options {
    while true
    do
        case $1 in
            -g | --gui )
                if ! $DESKTOP_ENVIRONMENT
    then
                    TEXT=\
"$DISPLAY_NAME: $1: $(gettext 'no desktop environment available')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_GUI=true
                shift
                ;;
            -s | --SOURCE )
                if $OPTION_SOURCE
                then
                    TEXT="$DISPLAY_NAME: $1 $2: $(gettext 'too many options')
$USAGE"
                    infomsg "$TEXT"
                    exit $ERROR
                fi
                OPTION_SOURCE=true
                SOURCE_ARGUMENT=$2
                shift 2
                ;;
            -- )
                shift
                break
                ;;
            * )
                shift
                ;;
        esac
    done

    if [[ -n $* ]]
    then
        TEXT="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE"
        infomsg "$TEXT"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    check_source
    check_on_ac_power
    restore_backup
    restore_settings
}


# This function checks if the source is available.
function check_source {
    if $OPTION_SOURCE
    then
        if [[ ! -d $SOURCE_ARGUMENT ]]
        then
            TEXT="$DISPLAY_NAME: $SOURCE_ARGUMENT: \
$(gettext 'directory does not exist')
$USAGE"
            infomsg "$TEXT"
            exit $ERROR
        fi
        SOURCE=$SOURCE_ARGUMENT/$USER@$HOSTNAME
        SOURCE_MEDIUM=$SOURCE_ARGUMENT
    else
        MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)
        if [[ -z $MEDIUM ]]
        then
            TEXT=$(gettext "No USB medium found.

Connect a USB medium.")
            infomsg "$TEXT"
            $OPTION_GUI || wait_for_enter
            MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)
            if [[ -z $MEDIUM ]]
            then
                errormsg "$TEXT"
                exit $ERROR
            fi
        fi
        MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)
        if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]
        then
            TEXT="$(eval_gettext "Connect only one USB medium.

Now connected:
\$MEDIUM

Disconnect media via Files.")"
            infomsg "$TEXT"
            $OPTION_GUI || wait_for_enter
            MEDIUM=$(ls --directory "/media/$USER"/* 2> >($LOGCMD) || true)
            if [[ $(printf '%s\n' "$MEDIUM" | wc --lines) -gt 1 ]]
            then
                errormsg "$TEXT"
                exit $ERROR
            fi
        fi
        SOURCE=$MEDIUM/kz-backup/$USER@$HOSTNAME
        SOURCE_MEDIUM=$MEDIUM
        if [[ ! -d $SOURCE ]]
        then
            TEXT=$(eval_gettext "No backup found on connected USB medium.

Connect a USB medium with the directory \$USER@\$HOSTNAME.")
            errormsg "$TEXT"
            exit $ERROR
        fi
    fi
}


# This function restores the backup.
function restore_backup {
    local       ERROR_FILE=''
    local       RSYNC_MESSAGES=''
    local   -i  RESTORE_RC=0

    ERROR_FILE=$(mktemp -t "$PROGRAM_NAME-errors-XXXXXXXXXX")

    TITLE=$(gettext 'Restore backup')
    TEXT=$(gettext 'Preparing restore (this can take a while)')
    if $OPTION_GUI
    then
        logmsg "$TITLE"...
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                "$SOURCE"/              \
                "$TARGET"/              \
                2> "$ERROR_FILE"        |
        sed     --expression='s/^/#/'   |
        zenity  --progress              \
                --auto-close            \
                --no-cancel             \
                --pulsate               \
                --width     600         \
                --height    50          \
                --title     "$TITLE"    \
                --text      "$TEXT"     2> >($LOGCMD) || RESTORE_RC=$?
    else
        TEXT+='...'
        infomsg "$TEXT"
        rsync   --archive               \
                --acls                  \
                --xattrs                \
                --verbose               \
                --human-readable        \
                "$SOURCE"/              \
                "$TARGET"/              2> "$ERROR_FILE" || RESTORE_RC=$?
    fi
    if [[ $RESTORE_RC -ne $OK ]]
    then
        # shellcheck disable=SC2034
        RSYNC_MESSAGES=$(cat "$ERROR_FILE")
        TEXT=$(eval_gettext "Restore ended with warnings or errors.

Some files may not be readable, or
were any files added or removed while restoring the backup, or
is there not enough space on \$TARGET.

Check the rsync messages (also in \$ERROR_FILE):
\$RSYNC_MESSAGES

Try restoring the back up again.
Use app 'Installation menu' and select '5 - Command menu', or
use app 'Restore backup', or
use app 'Terminal', type 'kz restore'.")
        errormsg "$TEXT"
        exit $ERROR
    fi
    rm --verbose "$ERROR_FILE" |& $LOGCMD
}


# This function restores the user settings.
function restore_settings {
    local SETTINGS_DIR=$HOME/kz-backup

    if $DESKTOP_ENVIRONMENT
    then
        $OPTION_GUI || infomsg "$(gettext 'Restore settings...')"
        restore_setting_desktop
    fi
}


# This function restores the desktop background, if possible.
function restore_setting_desktop {
    local INPUT_FILE="$SETTINGS_DIR/desktop"

    if [[ -f $INPUT_FILE ]]
    then
        logmsg 'Restore the desktop background...'
        gsettings   set                                         \
                    org.gnome.desktop.background picture-uri    \
                    "file://$INPUT_FILE"
    fi
}


# This function controls the termination of the script.
function term_script {
    local   -i  UNMOUNT_RC=0
    local       NUM_USERS
    local       USERS=''

    NUM_USERS=$(find /home/* -prune -print | wc --lines)
    if [[ $NUM_USERS -eq 1 ]]
    then
        TEXT=$(gettext 'The backup has been restored.')
    else
        USERS=$(
                gettext '_username_|UID|_user_'
                printf '\n'
                grep --regexp='/home' /etc/passwd   |
                cut --delimiter=: --fields=1,3,5    |
                tr ':' '|'
                )
        USERS+=$(
                printf '\n'
                while read -r uid
                do
                    printf '\n'
                    id "$uid"
                done < <(
                    grep --regexp='/home' /etc/passwd |
                    cut --delimiter=: --fields=1
                    )
                )
        TEXT="$(eval_gettext "The backup has restored for \$USER (there are \
\$NUM_USERS users).")

$USERS"
    fi

    if [[ $SOURCE_MEDIUM == /media/* ]]
    then
        term_script_usb || UNMOUNT_RC=$?
        if [[ $UNMOUNT_RC -eq $OK ]]
        then
            TEXT+="

$(gettext 'The USB medium can be removed.')"
        else
            TEXT+="

$(gettext 'Disconnect the USB medium SAFELY YOURSELF!')"
        fi
    fi
    infomsg "$TEXT"

    exit $OK
}


# This function tries to unmount the USB device.
function term_script_usb {
    local       DEV=''
    local   -i  RC=0
    local       TEXT

    TEXT=$(gettext 'Disconnect the USB media')
    DEV='/dev/'$(
        lsblk   --ascii             |
        grep    --before-context=1  \
                "$SOURCE_MEDIUM"    |
        head    -1                  |
        cut     --delimiter='-'     \
                --fields=2          |
        cut     --delimiter=' '     \
                --fields=1
    )

    if $OPTION_GUI
    then
        # With '|& zenity --progress' global variables from called functions
        # are not passed, hence the process substitution with '> >(zenity...)'.
        logmsg "$TEXT..."
        term_script_unmount > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     600         \
                    --height    50          \
                    --title     "$TITLE"    \
                    --text      "$TEXT"     \
                    2> >($LOGCMD)
            )
    else
        infomsg "$TEXT..."
        term_script_unmount
    fi

    return $RC
}


# This function unmounts the USB device.
function term_script_unmount {
    umount "$SOURCE_MEDIUM"                     |& $LOGCMD || RC+=$?
    udisksctl lock --block-device "$DEV"        |& $LOGCMD || RC+=$?
    udisksctl power-off --block-device "$DEV"   |& $LOGCMD || RC+=$?
    sleep 1
}


###############################################################################
# Main script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
