#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# SPDX-FileComment: Build development environment
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$(realpath "$0")")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-getdev'
readonly PROGRAM_DESC=$(gettext 'Build development environment')
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")

readonly HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        infomsg "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n $* ]]; then
        text="$DISPLAY_NAME: $*: $(gettext 'arguments are not allowed')
$USAGE_LINE"
        infomsg "$text"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    become_root_check || exit $OK
    check_dependencies
    pull_repos
    download_website
}


# This function checks and installs dependencies.
function check_dependencies {
    local escape='gettext'

    text=$(gettext 'Check dependencies')...
    infomsg "$text"
    check_for_active_updates
    sudo    apt-get             \
            install             \
            --yes               \
            curl                \
            fakeroot            \
            $escape             \
            git                 \
            jq                  \
            lftp                \
            nmap                \
            pycodestyle         \
            python3-pycodestyle \
            python3-autopep8    \
            python3-pip         \
            python-is-python3
    sudo ln --force --relative --symbolic /usr/bin/pycodestyle /usr/bin/pep8
    sudo ln --force --relative --symbolic /usr/bin/pip3 /usr/bin/pip
    # Debian package shellcheck is old, snap is newer.
    check_for_active_updates
    sudo snap install shellcheck
    check_for_active_updates
    sudo snap install --classic code
}


# This function retrieves the public repos.
function pull_repos {
    local bin_repo=/home/"$USER"/bin

    git config --global user.name 'Karel Zimmer'
    git config --global user.email 'karel.zimmer@gmail.com'
    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d $bin_repo ]]; then
        cd "$bin_repo"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$bin_repo"
    fi
    text=$(gettext 'Pull repos')...
    infomsg "$text"
    # Call gitpull.
    logmsg 'Calling gitpull...'
    "$bin_repo"/gitpull
    logmsg 'Called gitpull.'
    printf '%b\n' "$(gettext 'Status repos')..."
    # Call gitstat.
    logmsg 'Calling gitstat...'
    "$bin_repo"/gitstat
    logmsg 'Called gitstat.'
}


# This function downloads the website.
function download_website {
    local ftp_set='set ssl:verify-certificate no'
    local ftp_from=/httpdocs
    local ftp_to=$HOME/kz-uploads/dist
    local ftp_opts='--delete --verbose'
    local ftp_cmd="mirror  $ftp_opts $ftp_from $ftp_to; exit"
    local ftp_host=server106.hosting2go.nl
    local ftp_user=kzimmer
    local ftp_login=$HOME/.$ftp_host'.login'
    local prompt="$(gettext 'Password for') ftp://$ftp_host': "

    if [[ ! -f $ftp_login ]]; then
        read -rsp "$prompt" < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod --verbose 'u=rw,g=,o=' "$ftp_login" |& $LOGCMD
    fi
    if ! lftp   --user "$ftp_user"                  \
                --password "$(cat "$ftp_login")"    \
                -e "$ftp_set; $ftp_cmd"             \
                "$ftp_host"; then
        # Force entering the password next time.
        rm --verbose "$ftp_login"*
        text=$(gettext 'Website download failed.')
        errormsg "$text"
        exit $ERROR
    fi
}


# This function controls the termination of the script.
function term_script {
    text="$GREEN$PROGRAM_NAME $(gettext 'finished')$NORMAL"
    infomsg "$text"
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
