#!/usr/bin/env bash
# shellcheck source=kz_common.sh
###############################################################################
# Build development environment.
#
# This script builds the development environment for the kz package and the
# website https://karelzimmer.nl.
# Use 'man kz getdev' for more information.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2023.
###############################################################################

###############################################################################
# Import
###############################################################################

PROGRAM_PATH=$(cd "$(dirname "$(realpath "$0")")" && pwd)
readonly PROGRAM_PATH
source "$PROGRAM_PATH"/kz_common.sh 2> >(systemd-cat)


###############################################################################
# Constants
###############################################################################

readonly PROGRAM_NAME='kz-getdev'
PROGRAM_DESC=$(gettext 'Build development environment')
readonly PROGRAM_DESC
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly USAGE
HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"
readonly HELP


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local -i rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || rc=$?
    if [[ $rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n" \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.

function process_input {
    if groups "$USER" | grep --quiet --regexp='sudo'; then
        sudo true
    else
        printf  '%s\n' "$(gettext 'Already performed by the administrator.')"
        term_script
    fi
    printf "${bold}%s${normal} ($DISPLAY_NAME)\n" "$(gettext 'Check')"
    check_dependencies
    printf "\n${bold}%s${normal} ($DISPLAY_NAME)\n" "$(gettext 'Build')"
    pull_repos
    download_website
}


# This function check and installs dependencies.
function check_dependencies {
    local escape='gettext'

    printf '%s\n' "$(gettext 'Check dependencies...')"
    # Install ghostscript for kz-build <man-pag>.pdf (ps2pdf).
    check_for_active_updates
    sudo    apt-get             \
            install             \
            --yes               \
            curl                \
            fakeroot            \
            $escape             \
            ghostscript         \
            git                 \
            jq                  \
            lftp                \
            nmap                \
            pycodestyle         \
            python3-pycodestyle \
            python3-autopep8    \
            python3-pip         \
            python-is-python3
    sudo ln --force --relative --symbolic /usr/bin/pycodestyle /usr/bin/pep8
    sudo ln --force --relative --symbolic /usr/bin/pip3 /usr/bin/pip
    check_for_active_updates
    # Debian package shellcheck is old, snap is newer.
    sudo snap install shellcheck
    check_for_active_updates
    sudo snap install --classic code
}


# This function retrieves the public repos.
function pull_repos {
    local bin_repo=/home/"$USER"/bin

    git config --global user.name 'Karel Zimmer'
    git config --global user.email 'karel.zimmer@gmail.com'
    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d "$bin_repo" ]]; then
        cd "$bin_repo"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$bin_repo"
    fi
    printf '%s\n' "$(gettext 'Pull repos (gitpull)...')"
    # Call gitpull.
    "$bin_repo"/gitpull
    printf '%s\n' "$(gettext 'Status repos (gitstat)...')"
    # Call gitstat.
    "$bin_repo"/gitstat
}


# This function downloads the website.
function download_website {
    local ftp_set='set ssl:verify-certificate no'
    local ftp_from=/httpdocs
    local ftp_to=$HOME/kz-uploads/dist
    local ftp_opts='--delete --verbose'
    local ftp_exclude='--exclude icaclient_20.04.0.21_amd64.deb'
    local ftp_cmd="mirror $ftp_exclude $ftp_opts $ftp_from $ftp_to; exit"
    local ftp_host=server106.hosting2go.nl
    local ftp_user=kzimmer
    local ftp_login=$HOME/.kz-$ftp_host

    printf '%s\n' "$(gettext 'Download website (lftp)...')"
    if ! [[ -f $ftp_login ]]; then
        read -rsp "$(gettext 'Password for') ftp://$ftp_host': " < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login"
    fi
    if ! lftp   --user "$ftp_user"                  \
                --password "$(cat "$ftp_login")"    \
                -e "$ftp_set; $ftp_cmd"             \
                "$ftp_host"; then
        rm  "$ftp_login"
        printf '%s\n' "$(gettext 'Website download failed.')"
        return  1
    fi
}


# This function controls the termination of the script.
function term_script {
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
