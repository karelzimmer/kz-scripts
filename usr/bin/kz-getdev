#!/usr/bin/bash
# shellcheck source=kz_common.sh disable=SC2155
###############################################################################
# Build development environment.
#
# Written by Karel Zimmer <info@karelzimmer.nl>, CC0 1.0 Universal
# <https://creativecommons.org/publicdomain/zero/1.0>, 2023-2024.
###############################################################################


###############################################################################
# Import
###############################################################################

source "$(dirname "$0")"/kz_common.sh


###############################################################################
# Constants
###############################################################################

readonly    PROGRAM_NAME='kz-getdev'
readonly    PROGRAM_DESC=$(gettext 'Build development environment')
readonly    DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }

readonly    USAGE=$(eval_gettext "Usage: \$DISPLAY_NAME \$OPTIONS_USAGE")
readonly    HELP="$(eval_gettext "Usage: \$DISPLAY_NAME [OPTION...]")

$PROGRAM_DESC.

$(gettext 'Options:')
$OPTIONS_HELP"


###############################################################################
# Variables
###############################################################################


###############################################################################
# Functions
###############################################################################

# This function handles the script options and arguments.
function check_input {
    local       parsed=''
    local   -i  parsed_rc=0

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || parsed_rc=$?
    if [[ $parsed_rc -ne $OK ]]; then
        printf '%s\n' "$USAGE_LINE"
        exit $ERROR
    fi
    eval set -- "$parsed"

    process_common_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ -n "$*" ]]; then
        printf  "$DISPLAY_NAME: $*: %s\n$USAGE_LINE\n"  \
                "$(gettext 'arguments are not allowed')"
        exit $ERROR
    fi
}


# This function processes the script options and arguments.
function process_input {
    # shellcheck disable=SC2310
    if ! become_root_check; then
        return $OK
    fi
    check_dependencies
    pull_repos
    download_website
}


# This function check and installs dependencies.
function check_dependencies {
    local   escape='gettext'

    printf '%s\n' "$(gettext 'Check dependencies')..."
    check_for_active_updates
    sudo    apt-get             \
            install             \
            --yes               \
            curl                \
            fakeroot            \
            $escape             \
            git                 \
            jq                  \
            lftp                \
            nmap                \
            pycodestyle         \
            python3-pycodestyle \
            python3-autopep8    \
            python3-pip         \
            python-is-python3
    sudo --non-interactive true || true
    sudo ln --force --relative --symbolic /usr/bin/pycodestyle /usr/bin/pep8
    sudo --non-interactive true || true
    sudo ln --force --relative --symbolic /usr/bin/pip3 /usr/bin/pip
    # Debian package shellcheck is old, snap is newer.
    check_for_active_updates
    sudo snap install shellcheck
    check_for_active_updates
    sudo snap install --classic code
}


# This function retrieves the public repos.
function pull_repos {
    local   bin_repo=/home/"$USER"/bin

    git config --global user.name 'Karel Zimmer'
    git config --global user.email 'karel.zimmer@gmail.com'
    git config --global pull.ff only
    git config --global credential.helper store

    if [[ -d "$bin_repo" ]]; then
        cd "$bin_repo"
        git pull
    else
        git clone https://github.com/karelzimmer/bin.git "$bin_repo"
    fi
    printf '%b\n' "$(gettext 'Pull repos')..."
    # Call gitpull.
    msg_log 'Calling gitpull...'
    "$bin_repo"/gitpull
    msg_log 'Called gitpull.'
    printf '%b\n' "$(gettext 'Status repos')..."
    # Call gitstat.
    msg_log 'Calling gitstat...'
    "$bin_repo"/gitstat
    msg_log 'Called gitstat.'
}


# This function downloads the website.
function download_website {
    local   ftp_set='set ssl:verify-certificate no'
    local   ftp_from=/httpdocs
    local   ftp_to=$HOME/kz-uploads/dist
    local   ftp_opts='--delete --verbose'
    local   ftp_cmd="mirror  $ftp_opts $ftp_from $ftp_to; exit"
    local   ftp_host=server106.hosting2go.nl
    local   ftp_user=kzimmer
    local   ftp_login=$HOME/.kz-$ftp_host

    if ! [[ -f $ftp_login ]]; then
        read -rsp "$(gettext 'Password for') ftp://$ftp_host': " < /dev/tty
        printf '%s' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login"
    fi
    if ! lftp   --user "$ftp_user"                  \
                --password "$(cat "$ftp_login")"    \
                -e "$ftp_set; $ftp_cmd"             \
                "$ftp_host"; then
        rm  "$ftp_login"
        printf '%s\n' "$(gettext 'Website download failed.')"
        return  1
    fi
}


# This function controls the termination of the script.
function term_script {
    printf '%s\n' "$(gettext 'Finished')."
    exit $OK
}


###############################################################################
# Main Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
