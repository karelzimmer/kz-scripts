#!/usr/bin/env python3
"""
Update system.

This script performs a repair, update, and cleanup.
"""
###############################################################################
# SPDX-FileComment: Update system
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz update'
PROGRAM_DESC: str = _('Update system')

USAGE: str = f'{PROGRAM_NAME} {kz_common.OPTIONS_USAGE}'

HELP: str = (f"{_('Usage: {} [<options>]').format(PROGRAM_NAME)}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Functions
###############################################################################

def process_options() -> None:
    """
    This function handles the script options and arguments.
    """
    PARSER = argparse.ArgumentParser(prog=PROGRAM_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-h', '--help', action='store_true')
    PARSER.add_argument('-m', '--manual', action='store_true')
    PARSER.add_argument('-u', '--usage', action='store_true')
    PARSER.add_argument('-v', '--version', action='store_true')
    args = PARSER.parse_args()

    if args.help:
        kz_common.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.manual:
        kz_common.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.usage:
        kz_common.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)
    elif args.version:
        kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
        RC = kz_common.OK
        kz_common.term(PROGRAM_NAME, RC)


def process_input() -> None:
    """
    This function processes the script options and arguments.
    """
    if kz_common.APT:
        perform_apt_update()
        perform_apt_cleanup()
    elif kz_common.RPM:
        perform_rpm_update()
        perform_rpm_cleanup()
    else:
        TEXT: str = _('Unknown package manager.')
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        RC = kz_common.ERR
        kz_common.term(PROGRAM_NAME, RC)


def perform_apt_update() -> None:
    """
    This function updates installed Debian packages and snaps if installed.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Update')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo apt-get update'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get upgrade --assume-yes'
    perform_command(COMMAND)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == kz_common.OK:
        COMMAND = 'sudo snap refresh'
        perform_command(COMMAND)


def perform_apt_cleanup() -> None:
    """
    This function performs a Debian packages cleanup.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Cleanup')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo apt-get autoclean'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get autoremove --assume-yes'
    perform_command(COMMAND)


def perform_rpm_update() -> None:
    """
    This function updates installed RPM packages.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Update')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    # Exit code 100 means there are updates available ==> ' || true'.
    COMMAND: str = 'sudo dnf check-update --refresh || true'
    perform_command(COMMAND)

    COMMAND = 'sudo dnf upgrade --assumeyes --refresh'
    perform_command(COMMAND)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == kz_common.OK:
        COMMAND = 'sudo snap refresh'
        perform_command(COMMAND)


def perform_rpm_cleanup() -> None:
    """
    This function performs a RPM packages cleanup.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Cleanup')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo dnf clean all'
    perform_command(COMMAND)

    COMMAND = 'sudo dnf autoremove --assumeyes'
    perform_command(COMMAND)


def perform_command(COMMAND: str = '') -> None:
    """
    This function executes a Bourne-Again SHell command.
    """
    PROGRAM_ID = PROGRAM_NAME.replace('kz ', 'kz-')

    TEXT: str = f'{kz_common.BOLD}{COMMAND}{kz_common.NORMAL}'
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
    kz_common.check_apt_package_manager(PROGRAM_NAME, PROGRAM_DESC)
    try:
        subprocess.run(COMMAND, shell=True, check=True, executable='bash')
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_ID)
        kz_common.errmsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
        RC = kz_common.ERR
        kz_common.term(PROGRAM_NAME, RC)
    else:
        kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, '')


def term_script() -> None:
    """
    This function controls the termination of the script.
    """
    TEXT = _('Complete!')
    kz_common.infomsg(PROGRAM_NAME, PROGRAM_DESC, TEXT)
    RC = kz_common.OK
    kz_common.term(PROGRAM_NAME, RC)


###############################################################################
# Main
###############################################################################

kz_common.init_script(PROGRAM_NAME)

process_options()

kz_common.become_root(PROGRAM_NAME, PROGRAM_DESC)

process_input()

term_script()
