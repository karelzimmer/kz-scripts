#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Update and cleanup system
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-update'
PROGRAM_DESC: str = _('Update and cleanup system')
DISPLAY_NAME: str = PROGRAM_NAME.replace('kz-', 'kz ')

USAGE: str = f'{DISPLAY_NAME} {kz_common.OPTIONS_USAGE}'

HELP: str = (f"{_('Usage: {} [<options>]').format(DISPLAY_NAME)}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Functions
###############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    COMMAND1: str = "grep --quiet debian /etc/os-release"
    COMMAND2: str = "grep --quiet rhel   /etc/os-release"

    kz_common.process_options(PROGRAM_NAME, PROGRAM_DESC, DISPLAY_NAME, USAGE,
                              HELP)
    process_x_options()

    kz_common.become_root(PROGRAM_NAME, PROGRAM_DESC, DISPLAY_NAME)

    if subprocess.run(COMMAND1, executable='bash',
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                      shell=True).returncode == kz_common.OK:
        perform_deb_update()
        perform_deb_cleanup()
    elif subprocess.run(COMMAND2, executable='bash',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                        shell=True).returncode == kz_common.OK:
        perform_rpm_update()
        perform_rpm_cleanup()
    else:
        TEXT: str = _('fatal: unknown os release.')
        kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)


def process_x_options() -> None:
    """
    This function handles the script options and arguments.
    """
    ARGS = None
    PARSER = None

    PARSER = argparse.ArgumentParser(prog=DISPLAY_NAME, usage=USAGE,
                                     add_help=False)

    ARGS = PARSER.parse_args()

    if ARGS:
        None


def perform_deb_update() -> None:
    """
    This function updates installed Debian packages and snaps if installed.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Update')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo apt-get update'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get dist-upgrade --assume-yes'
    perform_command(COMMAND)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == kz_common.OK:
        COMMAND = 'sudo snap refresh'
        perform_command(COMMAND)


def perform_deb_cleanup() -> None:
    """
    This function performs a Debian packages cleanup.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Cleanup')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo apt-get autoclean'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get autoremove --assume-yes'
    perform_command(COMMAND)


def perform_rpm_update() -> None:
    """
    This function updates installed RPM packages and snaps if installed.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Update')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo dnf upgrade --assumeyes --refresh'
    perform_command(COMMAND)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == kz_common.OK:
        COMMAND = 'sudo snap refresh'
        perform_command(COMMAND)


def perform_rpm_cleanup() -> None:
    """
    This function performs a RPM packages cleanup.
    """
    TEXT: str = f"{kz_common.BOLD}{_('Cleanup')}...{kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND: str = 'sudo dnf clean all'
    perform_command(COMMAND)

    COMMAND = 'sudo dnf autoremove --assumeyes'
    perform_command(COMMAND)


def perform_command(COMMAND: str = '') -> None:
    """
    This function executes a Bourne-Again SHell command.
    """
    TEXT: str = f'{kz_common.BOLD}{COMMAND}{kz_common.NORMAL}'
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
    kz_common.check_package_manager(DISPLAY_NAME, PROGRAM_DESC)
    try:
        subprocess.run(COMMAND, executable='bash', shell=True, check=True)
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    else:
        kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, '')


def term() -> None:
    """
    This function controls the termination of the script.
    """
    TEXT = _('Complete!')
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init(DISPLAY_NAME)
process()
term()
