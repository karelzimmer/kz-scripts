#!/usr/bin/env python3
###############################################################################
# SPDX-FileComment: Update and cleanup system
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import getopt
import gettext
import kz_common as kz
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME: str = 'kz-update'
PROGRAM_DESC: str = _('Update and cleanup system')

USAGE: str = f'kz update [-h|--help] [-m|--manual] [-u|--usage] [-v|--version]'

HELP: str = (f"{_('Usage: kz update [<options>]')}\n\n"
             f'{PROGRAM_DESC}.\n\n'
             f"{_('Options:')}\n"
             f"{_('  -h, --help     show this help text')}\n"
             f"{_('  -m, --manual   show manual page')}\n"
             f"{_('  -u, --usage    show a short usage summary')}\n"
             f"{_('  -v, --version  show program version')}")

OPTIONS_SHORT: str = 'hmuv'
OPTIONS_LONG: list[str] = ['help', 'manual', 'usage', 'version']


###############################################################################
# Globals
###############################################################################


###############################################################################
# Functions
###############################################################################

def process() -> None:
    """
    This function performs the script actions, such as checking the input.
    """
    command1: str = "grep --quiet debian /etc/os-release"
    command2: str = "grep --quiet rhel   /etc/os-release"
    text: str

    process_options(PROGRAM_NAME, PROGRAM_DESC, USAGE, HELP)

    kz.become_root(PROGRAM_NAME, PROGRAM_DESC)

    if subprocess.run(command1, executable='bash',
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                      shell=True).returncode == 0:
        perform_deb_update()
        perform_deb_cleanup()
    elif subprocess.run(command2, executable='bash',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                        shell=True).returncode == 0:
        perform_rpm_update()
        perform_rpm_cleanup()
    else:
        text = _('fatal: unknown os release')
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)


def process_options(PROGRAM_NAME: str, PROGRAM_DESC: str, USAGE: str,
                    HELP: str) -> None:
    """
    This function handles the script options and arguments.
    """
    args: list[str] = []
    err: str = ''
    opt: str = ''
    opts: list[tuple[str, str]] = []
    program_name: str = PROGRAM_NAME.replace('kz-', 'kz ')
    text: str

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], OPTIONS_SHORT,
                                       OPTIONS_LONG)
    except getopt.error as err:
        text = f'{program_name}: {err}\n'
        text += f"{_('Usage:')} {USAGE}"
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            kz.process_option_help(PROGRAM_NAME, PROGRAM_DESC, HELP)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-m', '--manual'):
            kz.process_option_manual(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-u', '--usage'):
            kz.process_option_usage(PROGRAM_NAME, PROGRAM_DESC, USAGE)
            kz.term(PROGRAM_NAME, 0)
        elif opt in ('-v', '--version'):
            kz.process_option_version(PROGRAM_NAME, PROGRAM_DESC)
            kz.term(PROGRAM_NAME, 0)
        else:
            text = f"{PROGRAM_NAME}: getopt: {_('internal error')}"
            kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
            kz.term(PROGRAM_NAME, 1)

    if args:
        text = f"{program_name}: {' '.join(args)}: "
        text += f"{_('arguments are not allowed')}\n"
        text += f"{_('Usage:')} {USAGE}"
        kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)


def perform_deb_update() -> None:
    """
    This function updates installed Debian packages and snaps if installed.
    """
    text: str

    text = f"{_('UPDATE')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command: str = 'sudo apt-get update'
    perform_command(command)

    text = f"\n{_('UPGRADE')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command = 'sudo apt-get dist-upgrade --assume-yes'
    perform_command(command)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == 0:
        command = 'sudo snap refresh'
        perform_command(command)


def perform_deb_cleanup() -> None:
    """
    This function performs a Debian packages cleanup.
    """
    text: str

    text = f"\n{_('CLEANUP')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command: str = 'sudo apt-get autoclean'
    perform_command(command)
    command = 'sudo apt-get autoremove --assume-yes'
    perform_command(command)


def perform_rpm_update() -> None:
    """
    This function updates installed RPM packages and snaps if installed.
    """
    text: str

    text = f"{_('UPDATE')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command: str = 'sudo dnf check-update || true'
    perform_command(command)

    text = f"\n{_('UPGRADE')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command = 'sudo dnf upgrade --assumeyes --refresh'
    perform_command(command)

    if subprocess.run('type snap', executable='bash',
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL,
                      shell=True,).returncode == 0:
        command = 'sudo snap refresh'
        perform_command(command)


def perform_rpm_cleanup() -> None:
    """
    This function performs a RPM packages cleanup.
    """
    text: str

    text = f"\n{_('CLEANUP')}"
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    command: str = 'sudo dnf clean all'
    perform_command(command)
    command = 'sudo dnf autoremove --assumeyes'
    perform_command(command)


def perform_command(command: str = '') -> None:
    """
    This function executes a Bash command.
    """
    exc: str = ''
    text: str

    text = f'\n{command}'
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    kz.check_package_manager(PROGRAM_NAME, PROGRAM_DESC)
    try:
        subprocess.run(command, executable='bash', shell=True, check=True)
    except Exception as exc:
        text = str(exc)
        kz.logmsg(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz.errmsg(PROGRAM_NAME, PROGRAM_DESC, text)
        kz.term(PROGRAM_NAME, 1)


def term() -> None:
    """
    This function controls the termination of the script.
    """
    text: str

    text = _('Complete!')
    kz.infomsg(PROGRAM_NAME, PROGRAM_DESC, text)
    kz.term(PROGRAM_NAME, 0)


###############################################################################
# Main
###############################################################################

kz.init(PROGRAM_NAME)
process()
term()
