#!/usr/bin/python3
"""
Update system.

This module performs a repair, update, and cleanup.
"""
###############################################################################
# SPDX-FileComment: Update system
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Import
###############################################################################

import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME = 'kz-update'
PROGRAM_DESC = _('Update system')
DISPLAY_NAME = PROGRAM_NAME.replace('kz-', 'kz ')

###############################################################################
# Variables
###############################################################################

command = ''


###############################################################################
# Functions
###############################################################################

def perform_repair():
    """
    This function runs a repair of Debian packages.
    """
    text = f"{kz_common.YELLOW}==== {_('Repair')} ===={kz_common.NORMAL}\n"
    kz_common.msg_info(PROGRAM_NAME, text)

    command = 'sudo dpkg --configure --pending'
    perform_command(command)

    command = 'sudo apt-get update --fix-missing'
    perform_command(command)

    command = 'sudo apt-get install --fix-broken'
    perform_command(command)

    command = '# sudo update-initramfs -u'
    perform_command(command)


def perform_update():
    """
    This function updates installed Debian packages.
    """
    text = f"{kz_common.YELLOW}==== {_('Update')} ===={kz_common.NORMAL}\n"
    kz_common.msg_info(PROGRAM_NAME, text)

    command = 'sudo apt-get update'
    perform_command(command)

    command = 'sudo apt-get dist-upgrade --yes'
    perform_command(command)

    command = 'sudo snap refresh'
    perform_command(command)


def perform_cleanup():
    """
    This function performs a Debian packages and snap packages cleanup.
    """
    text = f"{kz_common.YELLOW}==== {_('Cleanup')} ===={kz_common.NORMAL}\n"
    kz_common.msg_info(PROGRAM_NAME, text)

    command = 'sudo apt-get autoclean --yes'
    perform_command(command)

    command = 'sudo apt-get autoremove --yes'
    perform_command(command)

    command = f"snap  list --all |\n\
while read Name Version Rev Tracking Publisher Notes\n\
do\n\
   if [[ $Notes == *{_('disabled')}* || $Notes == *disabled* ]]; then\n\
      sudo snap remove $Name --revision=$Rev\n\
   fi\n\
done"
    perform_command(command)


def perform_command(command):
    """
    This function executes a Bourne-Again SHell command.
    """
    text = f'{command}'
    kz_common.msg_info(PROGRAM_NAME, text)
    kz_common.check_for_active_updates(PROGRAM_NAME)
    try:
        subprocess.run({command}, shell=True, check=True,
                       executable='/usr/bin/bash')
    except Exception as exc:
        text = str(exc)
        kz_common.msg_log(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.msg_error(PROGRAM_NAME, text)
        sys.exit(kz_common.ERROR)
    else:
        kz_common.msg_info(PROGRAM_NAME, '')


def check_reboot():
    """
    This function checks if reboot is needed.
    """
    try:
        with open('/var/run/reboot-required') as fh:
            text = _('*** The computer needs to be restarted to complete the i\
nstallation of updates ***')
            text = f"{kz_common.RED}{text}{kz_common.NORMAL}"
            kz_common.msg_info(PROGRAM_NAME, text)
    except FileNotFoundError as fnf:
        text = str(fnf)
        kz_common.msg_log(PROGRAM_NAME, text)
        text = f"{kz_common.GREEN}{_('Finished')}{kz_common.NORMAL}"
        kz_common.msg_info(PROGRAM_NAME, text)
    except Exception as exc:
        text = str(exc)
        kz_common.msg_log(PROGRAM_NAME, text)
        text = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.msg_error(PROGRAM_NAME, text)
        sys.exit(kz_common.ERROR)


###############################################################################
# Main Script
###############################################################################

kz_common.init_script(PROGRAM_NAME)

kz_common.process_options(PROGRAM_NAME, PROGRAM_DESC, DISPLAY_NAME)

kz_common.become_root(PROGRAM_NAME)

kz_common.check_on_ac_power(PROGRAM_NAME)

perform_repair()

perform_update()

perform_cleanup()

check_reboot()

kz_common.term_script(PROGRAM_NAME)
