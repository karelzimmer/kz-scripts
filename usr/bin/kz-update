#!/usr/bin/env python3
"""
Update system.

This script performs a repair, update, and cleanup.
"""
###############################################################################
# SPDX-FileComment: Update system
#
# SPDX-FileCopyrightText: Karel Zimmer <info@karelzimmer.nl>
# SPDX-License-Identifier: CC0-1.0
###############################################################################


###############################################################################
# Imports
###############################################################################

import argparse
import gettext
import kz_common
import subprocess
import sys

gettext.bindtextdomain('kz', '/usr/share/locale')
gettext.textdomain('kz')
_ = gettext.gettext


###############################################################################
# Constants
###############################################################################

PROGRAM_NAME = 'kz-update'
PROGRAM_DESC = _('Update system')
DISPLAY_NAME = PROGRAM_NAME.replace('kz-', 'kz ')

USAGE = f'{DISPLAY_NAME} {kz_common.OPTIONS_USAGE}'

HELP = (f"{_('Usage: {} [OPTION...]').format(DISPLAY_NAME)}\n\n"
        f'{PROGRAM_DESC}.\n\n'
        f"{_('Options:')}\n"
        f'{kz_common.OPTIONS_HELP}')


###############################################################################
# Variables
###############################################################################

COMMAND = ''


###############################################################################
# Functions
###############################################################################

def process_options():
    """
    This function handles the script options and arguments.
    """
    PARSER = argparse.ArgumentParser(prog=DISPLAY_NAME, usage=USAGE,
                                     add_help=False)

    PARSER.add_argument('-h', '--help', action='store_true')
    PARSER.add_argument('-m', '--manual', action='store_true')
    PARSER.add_argument('-u', '--usage', action='store_true')
    PARSER.add_argument('-v', '--version', action='store_true')
    args = PARSER.parse_args()

    if args.help:
        kz_common.process_option_help(PROGRAM_NAME, DISPLAY_NAME, PROGRAM_DESC,
                                      HELP)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.manual:
        kz_common.process_option_manual(PROGRAM_NAME, DISPLAY_NAME,
                                        PROGRAM_DESC)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.usage:
        kz_common.process_option_usage(DISPLAY_NAME, PROGRAM_DESC, USAGE)
        kz_common.term(PROGRAM_NAME, kz_common.OK)
    elif args.version:
        kz_common.process_option_version(PROGRAM_NAME, PROGRAM_DESC,
                                         DISPLAY_NAME)
        kz_common.term(PROGRAM_NAME, kz_common.OK)


def process_input():
    """
    This function processes the script options and arguments.
    """
    if kz_common.APT:
        perform_apt_repair()

        perform_apt_update()

        perform_apt_cleanup()
    elif kz_common.RPM:
        perform_rpm_repair()

        perform_rpm_update()

        perform_rpm_cleanup()
    else:
        TEXT = _('Unknown package manager.')
        kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)


def perform_apt_repair():
    """
    This function runs a repair of Debian packages.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Repair')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo dpkg --configure --pending'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get update --fix-missing'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get install --fix-broken'
    perform_command(COMMAND)

    COMMAND = '# sudo update-initramfs -u'
    perform_command(COMMAND)


def perform_apt_update():
    """
    This function updates installed Debian packages and snaps if installed.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Update')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo apt-get update'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get dist-upgrade --assume-yes'
    perform_command(COMMAND)

    if subprocess.run('[[ -n $(type -t snap) ]]', shell=True,
                      executable='bash').returncode == kz_common.OK:
        COMMAND = 'sudo snap refresh'
        perform_command(COMMAND)


def perform_apt_cleanup():
    """
    This function performs a Debian packages cleanup.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Cleanup')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo apt-get autoclean'
    perform_command(COMMAND)

    COMMAND = 'sudo apt-get autoremove --assume-yes'
    perform_command(COMMAND)


def perform_rpm_repair():
    """
    This function runs a repair of RPM packages.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Repair')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo dnf clean all'
    perform_command(COMMAND)

    COMMAND = '# sudo dnf makecache'
    perform_command(COMMAND)


def perform_rpm_update():
    """
    This function updates installed RPM packages.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Update')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    # Exit code 100 means there are updates available ==> ' || true'.
    COMMAND = 'sudo dnf check-update --refresh || true'
    perform_command(COMMAND)

    COMMAND = 'sudo dnf upgrade --assumeyes --refresh'
    perform_command(COMMAND)


def perform_rpm_cleanup():
    """
    This function performs a RPM packages cleanup.
    """
    TEXT = f"{kz_common.BOLD}==== {_('Cleanup')} ===={kz_common.NORMAL}\n"
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)

    COMMAND = 'sudo dnf clean all'
    perform_command(COMMAND)

    COMMAND = 'sudo dnf autoremove'
    perform_command(COMMAND)


def perform_command(COMMAND):
    """
    This function executes a Bourne-Again SHell command.
    """
    TEXT = f'{COMMAND}'
    kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
    kz_common.check_apt_package_manager(DISPLAY_NAME, PROGRAM_DESC)
    try:
        subprocess.run({COMMAND}, shell=True, check=True, executable='bash')
    except Exception as exc:
        TEXT = str(exc)
        kz_common.logmsg(PROGRAM_NAME, TEXT)
        TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
        kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        kz_common.term(PROGRAM_NAME, kz_common.ERR)
    else:
        kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, '')


def check_reboot():
    """
    This function checks if reboot is needed.
    """
    TEXT = _("*** The computer needs to be restarted to complete the \
installation of updates ***")

    if kz_common.APT:
        try:
            with open('/var/run/reboot-required') as fh:
                TEXT = f"{kz_common.RED}{TEXT}{kz_common.NORMAL}"
                kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
        except FileNotFoundError as fnf:
            TEXT = str(fnf)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
        except Exception as exc:
            TEXT = str(exc)
            kz_common.logmsg(PROGRAM_NAME, TEXT)
            TEXT = _('Program {} encountered an error.').format(PROGRAM_NAME)
            kz_common.errmsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)
            kz_common.term(PROGRAM_NAME, DISPLAY_NAME, PROGRAM_DESC,
                           kz_common.ERR)
    else:
        if subprocess.run('needs-restarting --reboothint',
                          shell=True).returncode == 1:
            TEXT = f"{kz_common.RED}{TEXT}{kz_common.NORMAL}"
            kz_common.infomsg(DISPLAY_NAME, PROGRAM_DESC, TEXT)


def term_script():
    """
    This function controls the termination of the script.
    """
    kz_common.term(PROGRAM_NAME, kz_common.OK)


###############################################################################
# Main
###############################################################################

kz_common.init_script(PROGRAM_NAME)

process_options()

kz_common.become_root(PROGRAM_NAME, DISPLAY_NAME, PROGRAM_DESC)

process_input()

check_reboot()

term_script()
