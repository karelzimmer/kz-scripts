#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Installatiemenu.
#
# Geschreven in 2015 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################

set -o errexit
program_path=$(cd "$(dirname "$(realpath "$0")")" && pwd)
source "$program_path"/kz_common.sh


###############################################################################
# Constants
###############################################################################

declare program_name='kz-menu'
declare program_desc='Installatiemenu'
declare display_name=${program_name/kz-/kz }

declare usage="Gebruik: $display_name [-g|--gui]
                 $options_usage"
declare help="Gebruik: $display_name [OPTIE...]

$program_desc.

Opties:
  -g, --gui      start in grafische modus
$options_help"
declare options_short+='g'
declare options_long+=',gui'

declare menu1_title=Installatiemenu
declare menu1_head="                  $menu1_title"
declare -a menu1_actions=(
    [1]='Installatie voorbereiden'
        'Installatie uitvoeren'
        'Installatie afronden'
        'Gebruiker inrichten'
        'Opdrachtenmenu'
        'Stoppen'
    )
declare -a menu1_commands=(
    [1]='Checklist hoofdstuk 1'
        'Checklist hoofdstuk 2'
        'Checklist hoofdstuk 3'
        'Checklist hoofdstuk 4'
        'Gebruikte opdrachten'
        'Menu verlaten'
    )
declare menu1_lines=${#menu1_actions[@]}

declare menu2_title=Opdrachtenmenu
declare menu2_head="             $menu2_title"
declare -a menu2_actions=(
    [1]='Wifi-gegevens tonen'
        'Back-up maken'
        'Gebruikers toevoegen'
        'Apps installeren'
        'Back-up terugzetten'
        'Gebruikersfoto instellen'
        'Apps instellen'
        'Terug'
    )
declare -a menu2_commands=(
    [1]='kz wifi'
        'kz backup'
        'Handmatig'
        'kz install'
        'kz restore'
        'Handmatig'
        'kz setup'
        'Vorig menu'
    )
declare menu2_lines=${#menu2_actions[@]}


###############################################################################
# Variables
###############################################################################

declare execute_command=false
declare -a rows=()
declare option_gui=false


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i getopt_rc=0
    local parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usage_line"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                option_gui=true
                kz_common.reset_terminal_attributes
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf  "$display_name: %s: %s\n$usage_line\n" \
                "$*" 'argumenten zijn niet toegestaan'
        exit $err
    fi
}


function process_input {
    if $option_gui; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


function process_menu1_gui {
    local -i zenity_rc=0

    while true; do
        title=$menu1_title
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         480                                     \
                    --height        240                                     \
                    --title         "$title"                                \
                    --text          'Selecteer een keuze:'                  \
                    --ok-label      'Verder'                                \
                    --cancel-label  'Afsluiten'                             \
                    --column        'Keuze'                                 \
                    --column        'Nr.'                                   \
                    --column        'Actie'                                 \
                    --column        'Toelichting'                           \
                    TRUE  1 "${menu1_actions[1]}" "${menu1_commands[1]}"    \
                    FALSE 2 "${menu1_actions[2]}" "${menu1_commands[2]}"    \
                    FALSE 3 "${menu1_actions[3]}" "${menu1_commands[3]}"    \
                    FALSE 4 "${menu1_actions[4]}" "${menu1_commands[4]}"    \
                    FALSE 5 "${menu1_actions[5]}" "${menu1_commands[5]}"    \
                    2> >($logcmd)
            ) || zenity_rc=$?
        if [[ $zenity_rc -ne 0 ]]; then
            exit $ok
        fi
        process_menu1_choice
    done
}


function process_menu1_tui {
    local action=''

    while true; do

        # Toon menu.
        clear -x
        info "$menu1_head
"
        for action in "${!menu1_actions[@]}"; do
            printf  '%2s. %-24.24s - %s\n'      \
                    "$action"                   \
                    "${menu1_actions[$action]}" \
                    "${menu1_commands[$action]}"
        done
        info ''

        while true; do
            read -rp "Voer uit nummer [1-$menu1_lines]: "
            case $REPLY in
                *[^[:digit:]]*)
                    printf '%s' "${rewrite_line}"
                    continue
                    ;;
                *)
                    if [[ $REPLY -ge 1 && $REPLY -le $menu1_lines ]]; then
                        break
                    else
                        printf '%s' "${rewrite_line}"
                        continue
                    fi
                    ;;
            esac
        done
        process_menu1_choice
        execute_command=false
    done
}


function process_menu1_choice {
    case $REPLY in
        1)
            process_menu1_choice1
            ;;
        2)
            process_menu1_choice2
            ;;
        3)
            process_menu1_choice3
            ;;
        4)
            process_menu1_choice4
            ;;
        5)
            process_menu2
            ;;
        6)
            exit $ok
            ;;
        *)
            err 'Niet afgehandelde keuze.'
            exit $err
            ;;
    esac
}


function process_menu1_choice1 {
    title="${menu1_actions[1]}"
    rows=(
        [1]="${menu2_actions[1]}#${menu2_commands[1]}"
            "${menu2_actions[2]}#${menu2_commands[2]}"
        )
    process_commands
}


function process_menu1_choice2 {
    title="${menu1_actions[2]}"
    text='
Volg de stappen zoals beschreven in Checklist installatie, hoofdstuk 2.
Checklist installatie is te vinden op de site https://karelzimmer.nl,
onder Linux.

Komt globaal neer op:
1. Download een beeldbestand (.iso).
2. Maak een opstartbare Live usb-stick of dvd aan.
3. Start de computer op vanaf deze usb-stick of dvd.
4. Installeer Linux.'
    info "$text"
    kz_common.wait_for_enter
}


function process_menu1_choice3 {
    title="${menu1_actions[3]}"
    rows=(
        [1]="${menu2_actions[3]}#${menu2_commands[3]}"
            "${menu2_actions[4]}#${menu2_commands[4]}"
        )
    process_commands
}


function process_menu1_choice4 {
    title="${menu1_actions[4]}"
    rows=(
        [1]="${menu2_actions[5]}#${menu2_commands[5]}"
            "${menu2_actions[6]}#${menu2_commands[6]}"
            "${menu2_actions[7]}#${menu2_commands[7]}"
        )
    process_commands
}


function process_menu2 {
    if $option_gui; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


function process_menu2_gui {
    local -i zenity_rc=0

    while true; do
        title=$menu2_title
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         480                                     \
                    --height        290                                     \
                    --title         "$title"                                \
                    --text          'Selecteer een keuze:'                  \
                    --ok-label      'Verder'                                \
                    --cancel-label  'Terug'                                 \
                    --column        'Keuze'                                 \
                    --column        'Nr.'                                   \
                    --column        'Actie'                                 \
                    --column        'Opdracht'                              \
                    TRUE   1 "${menu2_actions[1]}"  "${menu2_commands[1]}"  \
                    FALSE  2 "${menu2_actions[2]}"  "${menu2_commands[2]}"  \
                    FALSE  3 "${menu2_actions[3]}"  "${menu2_commands[3]}"  \
                    FALSE  4 "${menu2_actions[4]}"  "${menu2_commands[4]}"  \
                    FALSE  5 "${menu2_actions[5]}"  "${menu2_commands[5]}"  \
                    FALSE  6 "${menu2_actions[6]}"  "${menu2_commands[6]}"  \
                    FALSE  7 "${menu2_actions[7]}"  "${menu2_commands[7]}"  \
                    2> >($logcmd)
            ) || zenity_rc=$?
        if [[ $zenity_rc -ne 0 ]]; then
            break
        fi
        process_menu2_choice
    done
}


function process_menu2_tui {
    local action=''
    local exit_menu2=false

    while true; do

        # Toon menu.
        clear -x
        info "$menu2_head
"
        for action in "${!menu2_actions[@]}"; do
            printf  '%2s. %-24.24s - %s\n'      \
                    "$action"                   \
                    "${menu2_actions[$action]}" \
                    "${menu2_commands[$action]}"
        done
        info ''

        while true; do
            read -rp "Voer uit nummer [1-$menu2_lines]: "
            case $REPLY in
                *[^[:digit:]]*)
                    printf '%s' "${rewrite_line}"
                    continue
                    ;;
                *)
                    if [[ $REPLY -ge 1 && $REPLY -le $menu2_lines ]]; then
                        break
                    else
                        printf '%s' "${rewrite_line}"
                        continue
                    fi
                    ;;
            esac
        done
        process_menu2_choice
        if $exit_menu2; then
            break
        fi
        execute_command=false
    done
}


function process_menu2_choice {
    if [[ $REPLY -ge 1 && $REPLY -le $((menu2_lines -1)) ]]; then
        title="${menu2_actions[$REPLY]}"
        rows=(
            [1]="${menu2_actions[$REPLY]}#${menu2_commands[$REPLY]}"
            )
        process_commands
    elif [[ $REPLY -eq $menu2_lines ]]; then
        exit_menu2=true
    else
        err 'Niet afgehandelde keuze.'
        exit $err
    fi
}


function process_commands {
    local action=''
    local command=''
    local -i row=0

    if ! $option_gui; then
        clear -x
    fi
    if [[ ${#rows[@]} -eq 1 ]]; then
        execute_command=true
    else
        show_commands_before_execution
    fi
    if $execute_command; then
        for row in "${!rows[@]}"; do
            action=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
                )
            command=$(
                printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
                )
            title=$action
            execute_command
        done
    fi
    if ! $option_gui; then
        clear -x
    fi
    if $execute_command && [[ ${#rows[@]} -gt 1 ]]; then
        show_commands_after_execution
    fi
    if $execute_command; then
        check_setup_logout
        check_install_reboot
    fi
}


function show_commands_before_execution {
    local action=''
    local command=''
    local -i row=0
    local prompt=''

    text='Het volgende wordt uitgevoerd:
'
    for row in "${!rows[@]}"; do
        action=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
            )
        text+="
$row. $action ($command)"
    done
    text+='
'
    prompt='Doorgaan?'
    if $option_gui; then
        text+="
$prompt"
        if zenity   --question                  \
                    --no-markup                 \
                    --width         600         \
                    --height        100         \
                    --title         "$title"    \
                    --text          "$text"     \
                    --ok-label      'Ja'        \
                    --cancel-label  'Nee'       2> >($logcmd); then
            execute_command=true
        else
            execute_command=false
        fi
    else
        info "$text"
        while true; do
            read -rp "$prompt [J/n]: "
            case $REPLY in
                j*|J*|'')
                    execute_command=true
                    break
                    ;;
                n*|N*)
                    execute_command=false
                    break
                    ;;
                *)
                    printf '%s' "${rewrite_line}"
                    continue
                    ;;
            esac
        done
    fi
}


function execute_command {
    local -i cmd_rc=0
    local row=''
    local gui_option=''

    if ! $option_gui; then
        clear -x
    fi

    # Verwerk handmatige acties.
    if [[ $command = 'Handmatig' ]]; then
        manual_actions
        return $ok
    fi

    # Verwerk (automatische) opdrachten.
    row=${command/kz /kz-}
    cmd=$(
        printf '%s' "$row" | cut --delimiter=' ' --fields=1
        )
    arg=$(
        printf '%s' "$row" | cut --delimiter=' ' --fields=2- --only-delimited
        )
    if $option_gui; then
        gui_option='--gui'
    fi
    "$program_path/$cmd" "$arg" $gui_option -- || cmd_rc=$?
    log "$command: rc=$cmd_rc"
    kz_common.wait_for_enter
}


function manual_actions {
    if [[ $title = 'Gebruikers toevoegen' ]]; then
        text="Gebruikers toevoegen:

1. Voeg eventuele extra Standaard of Beheerder gebruikers toe via een druk op
   de Super-toets[1], typ 'gebr' en klik achter Instellingen op Gebruikers.
2. Klik op Ontgrendelen en geef wachtwoord.
3. Klik op Gebruiker toevoegen.
4. Sluit het scherm Gebruikers.

[1] De Super-toets is de Windows-toets, Command-toets, of Vergrootglas-toets."
        info "$text"
        kz_common.wait_for_enter
    elif [[ $title = 'Gebruikersfoto instellen' ]]; then
        if [[ -f $HOME/Instellingen/Gebruikersfoto ]]; then
            text="Gebruikersfoto instellen:

1. Wijzig de gebruikersfoto via een druk op de Super-toets[1], typ 'gebr' en \
klik achter Instellingen op Gebruikers.
2. Klik op Ontgrendelen.
3. Klik op de afbeelding voor de gebruiker.
4. Klik op Selecteer een bestand.
5. Selecteer Gebruikersfoto in Persoonlijke map / Instellingen.
6. Sluit het scherm Gebruikers.

[1] De Super-toets is de Windows-toets, Command-toets, of Vergrootglas-toets."
            info "$text"
        else
            text="Gebruikersfoto instellen:
Er is bij het maken van de back-up geen gebruikersfoto gevonden."
            info "$text"
        fi
        kz_common.wait_for_enter
    fi
}


function show_commands_after_execution {
    local action=''
    local command=''
    local -i row=0

    text='Het volgende is uitgevoerd:
'
    for row in "${!rows[@]}"; do
        action=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${rows[$row]}" | cut --delimiter='#' --fields=2
            )
        text+="
$row. $action ($command)"
    done
    info "$text"
    kz_common.wait_for_enter
}


function check_setup_logout {
    # Uitvoeren bij 'Gebruiker inrichten' of 'Apps instellen'.
    if [[ $title = "${menu1_actions[4]}" || $title = "${menu2_actions[7]}" ]]
        then
        text='
De computer gaat nu afmelden om het instellen van apps af te ronden.'
        warn "$text"
        if ! $option_gui; then
            read -rp '
Druk op de Enter-toets voor afmelden [Enter]: '
        fi
        gnome-session-quit --logout --no-prompt
        exit $ok
    fi
}


function check_install_reboot {
    # Uitvoeren bij 'Installatie afronden' of 'Apps installeren'.
    if [[ $title = "${menu1_actions[3]}" || $title = "${menu2_actions[4]}" ]]
        then
        text="
De computer gaat nu herstarten om het installeren van updates en apps af te \
ronden."
        warn "$text"
        if ! $option_gui; then
            read -rp '
Druk op de Enter-toets voor het herstarten van de computer [Enter]: '
        fi
        systemctl reboot
    fi
}


function term_script {
    exit $ok
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
