#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Installatiemenu.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
###############################################################################


###############################################################################
# Global constants
###############################################################################

readonly PROGRAM_NAME='kz-menu'
readonly PROGRAM_DESC='Installatiemenu'
readonly DISPLAY_NAME=${PROGRAM_NAME/kz-/kz }
readonly PROGRAM_YEAR=2015

PROGRAM_PATH=$(realpath "$(dirname  "$0")")
readonly PROGRAM_PATH
source  "$PROGRAM_PATH"/kz-common.sh

readonly OPTIONS_SHORT=$OPTIONS_SHORT_COMMON'g'
readonly OPTIONS_LONG=$OPTIONS_LONG_COMMON',gui'
readonly USAGE="Gebruik: $DISPLAY_NAME [-g|--gui]
                 $OPTIONS_USAGE_COMMON"
readonly HELP="Gebruik: $DISPLAY_NAME [OPTIE...]

$PROGRAM_DESC.

Opties:
  -g, --gui      start in grafische modus
$OPTIONS_HELP_COMMON"

readonly MENU1_TITLE=Installatiemenu
readonly MENU1_HEAD="\
${DASHES:0:52}
=                 $MENU1_TITLE                  =
${DASHES:0:52}"
readonly -a MENU1_ACTIONS=(
    [1]='Installatie voorbereiden'
        'Installatie uitvoeren'
        'Installatie afronden'
        'Gebruiker inrichten'
        'Opdrachtenmenu'
        'Stoppen'
    )
readonly -a MENU1_COMMANDS=(
    [1]='Checklist hoofdstuk 1'
        'Checklist hoofdstuk 2'
        'Checklist hoofdstuk 3'
        'Checklist hoofdstuk 4'
        'Opdrachten uitvoeren'
        'Menu verlaten'
    )
readonly MENU1_LINES=${#MENU1_ACTIONS[@]}

readonly MENU2_TITLE=Opdrachtenmenu
readonly MENU2_HEAD="\
${DASHES:0:41}
=            $MENU2_TITLE             =
${DASHES:0:41}"
readonly -a MENU2_ACTIONS=(
    [1]='Wifi-gegevens tonen'
        'Back-up maken'
        'Gebruikers toevoegen'
        'Apps installeren'
        'Back-up terugzetten'
        'Gebruikersfoto instellen'
        'Apps instellen'
        'Terug'
    )
readonly -a MENU2_COMMANDS=(
    [1]='kz wifi'
        'kz backup'
        'Handmatig'
        'kz install'
        'kz restore'
        'Handmatig'
        'kz setup'
        'Vorig menu'
    )
readonly MENU2_LINES=${#MENU2_ACTIONS[@]}


###############################################################################
# Global variables
###############################################################################

declare     EXECUTE_COMMAND=false
declare -a  EXEC=()
declare     OPTION_GUI=false
declare     TEXT=''
declare     TITLE=''


###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$DISPLAY_NAME"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $SUCCESS ]]; then
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi
    eval set -- "$parsed"
    process_common_options "$@"

    while true; do
        case $1 in
            -g|--gui)
                OPTION_GUI=true
                reset_terminal_attributes
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info 'Geen argumenten toegestaan.'
        info "$USAGELINE"
        NOERROR=true exit $ERROR
    fi
}


function process_input {
    if $OPTION_GUI; then
        process_menu1_gui
    else
        process_menu1_tui
    fi
}


function process_menu1_gui {
    local -i zenity_rc=0

    while true; do
        TITLE=$MENU1_TITLE
        # Constructie '2> >($LOGCMD)' om stderr naar de log te krijgen.
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         480                                     \
                    --height        240                                     \
                    --title         "$TITLE"                                \
                    --text          'Selecteer een keuze:'                  \
                    --ok-label      'Verder'                                \
                    --cancel-label  'Afsluiten'                             \
                    --column        'Keuze'                                 \
                    --column        'Nr.'                                   \
                    --column        'Actie'                                 \
                    --column        'Toelichting'                           \
                    TRUE  1 "${MENU1_ACTIONS[1]}" "${MENU1_COMMANDS[1]}"    \
                    FALSE 2 "${MENU1_ACTIONS[2]}" "${MENU1_COMMANDS[2]}"    \
                    FALSE 3 "${MENU1_ACTIONS[3]}" "${MENU1_COMMANDS[3]}"    \
                    FALSE 4 "${MENU1_ACTIONS[4]}" "${MENU1_COMMANDS[4]}"    \
                    FALSE 5 "${MENU1_ACTIONS[5]}" "${MENU1_COMMANDS[5]}"    \
                    2> >($LOGCMD)
            ) || zenity_rc=$?
        if [[ $zenity_rc -ne 0 ]]; then
            exit $SUCCESS
        fi
        process_menu1_choice
    done
}


function process_menu1_tui {
    local action=''

    while true; do

        # Toon menu.
        clear -x
        info "$MENU1_HEAD
"
        for action in "${!MENU1_ACTIONS[@]}"; do
            printf  '%2s. %-24.24s - %s\n'      \
                    "$action"                   \
                    "${MENU1_ACTIONS[$action]}" \
                    "${MENU1_COMMANDS[$action]}"
        done
        info

        while true; do
            read -rp "Voer uit nummer [1-$MENU1_LINES]: "
            case $REPLY in
                *[^[:digit:]]*)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
                *)
                    if  [[ $REPLY -ge 1 && $REPLY -le $MENU1_LINES ]] \
                        &> /dev/null; then
                        break
                    else
                        printf '%s' "${REWRITE_LINE}"
                        continue
                    fi
                    ;;
            esac
        done
        process_menu1_choice
        if $EXECUTE_COMMAND; then
            wait_for_enter
        fi
        EXECUTE_COMMAND=false
    done
}


function process_menu1_choice {
    case $REPLY in
        1)
            process_menu1_choice1
            ;;
        2)
            process_menu1_choice2
            ;;
        3)
            process_menu1_choice3
            ;;
        4)
            process_menu1_choice4
            ;;
        5)
            process_menu2
            ;;
        6)
            exit $SUCCESS
            ;;
        *)
            error 'Niet afgehandelde keuze.'
            NOERROR=true exit $ERROR
            ;;
    esac
}


function process_menu1_choice1 {
    TITLE="${MENU1_ACTIONS[1]}"
    EXEC=(
        [1]="${MENU2_ACTIONS[1]}#${MENU2_COMMANDS[1]}"
            "${MENU2_ACTIONS[2]}#${MENU2_COMMANDS[2]}"
        )
    process_commands
}


function process_menu1_choice2 {
    TITLE="${MENU1_ACTIONS[2]}"
    TEXT='
Volg de stappen zoals beschreven in Checklist installatie, hoofdstuk 2.
Checklist installatie is te vinden op de site https://karelzimmer.nl,
onder Linux.

Komt globaal neer op:
1. Download een beeldbestand (.iso).
2. Maak een opstartbare Live USB-stick of DVD aan.
3. Start de computer op vanaf deze USB-stick of DVD.
4. Installeer Linux.'
    info "$TEXT"
    if ! $OPTION_GUI; then
            wait_for_enter

    fi
}


function process_menu1_choice3 {
    TITLE="${MENU1_ACTIONS[3]}"
    EXEC=(
        [1]="${MENU2_ACTIONS[3]}#${MENU2_COMMANDS[3]}"
            "${MENU2_ACTIONS[4]}#${MENU2_COMMANDS[4]}"
        )
    process_commands
}


function process_menu1_choice4 {
    TITLE="${MENU1_ACTIONS[4]}"
    EXEC=(
        [1]="${MENU2_ACTIONS[5]}#${MENU2_COMMANDS[5]}"
            "${MENU2_ACTIONS[6]}#${MENU2_COMMANDS[6]}"
            "${MENU2_ACTIONS[7]}#${MENU2_COMMANDS[7]}"
        )
    process_commands
}


function process_menu2 {
    if $OPTION_GUI; then
        process_menu2_gui
    else
        process_menu2_tui
    fi
}


function process_menu2_gui {
    local -i zenity_rc=0

    while true; do
        TITLE=$MENU2_TITLE
        REPLY=$(
            zenity  --list                                                  \
                    --radiolist                                             \
                    --width         400                                     \
                    --height        280                                     \
                    --title         "$TITLE"                                \
                    --text          'Selecteer een keuze:'                  \
                    --ok-label      'Verder'                                \
                    --cancel-label  'Terug'                                 \
                    --column        'Keuze'                                 \
                    --column        'Nr.'                                   \
                    --column        'Actie'                                 \
                    --column        'Opdracht'                              \
                    TRUE   1 "${MENU2_ACTIONS[1]}"  "${MENU2_COMMANDS[1]}"  \
                    FALSE  2 "${MENU2_ACTIONS[2]}"  "${MENU2_COMMANDS[2]}"  \
                    FALSE  3 "${MENU2_ACTIONS[3]}"  "${MENU2_COMMANDS[3]}"  \
                    FALSE  4 "${MENU2_ACTIONS[4]}"  "${MENU2_COMMANDS[4]}"  \
                    FALSE  5 "${MENU2_ACTIONS[5]}"  "${MENU2_COMMANDS[5]}"  \
                    FALSE  6 "${MENU2_ACTIONS[6]}"  "${MENU2_COMMANDS[6]}"  \
                    FALSE  7 "${MENU2_ACTIONS[7]}"  "${MENU2_COMMANDS[7]}"  \
                    2> >($LOGCMD)
            ) || zenity_rc=$?
        if [[ $zenity_rc -ne 0 ]]; then
            break
        fi
        process_menu2_choice
    done
}


function process_menu2_tui {
    local action=''
    local exit_menu2=false

    while true; do

        # Toon menu.
        clear -x
        info "$MENU2_HEAD
"
        for action in "${!MENU2_ACTIONS[@]}"; do
            printf  '%2s. %-24.24s - %s\n'      \
                    "$action"                   \
                    "${MENU2_ACTIONS[$action]}" \
                    "${MENU2_COMMANDS[$action]}"
        done
        info

        while true; do
            read -rp "Voer uit nummer [1-$MENU2_LINES]: "
            case $REPLY in
                *[^[:digit:]]*)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
                *)
                    if  [[ $REPLY -ge 1 && $REPLY -le $MENU2_LINES ]] \
                        2> /dev/null; then
                        break
                    else
                        printf '%s' "${REWRITE_LINE}"
                        continue
                    fi
                    ;;
            esac
        done
        process_menu2_choice
        if $exit_menu2; then
            break
        fi
        if $EXECUTE_COMMAND; then
            wait_for_enter
        fi
        EXECUTE_COMMAND=false
    done
}


function process_menu2_choice {
    if [[ $REPLY -ge 1 && $REPLY -le $((MENU2_LINES -1)) ]]; then
        TITLE="${MENU2_ACTIONS[$REPLY]}"
        EXEC=(
            [1]="${MENU2_ACTIONS[$REPLY]}#${MENU2_COMMANDS[$REPLY]}"
            )
        process_commands
    elif [[ $REPLY -eq $MENU2_LINES ]]; then
        exit_menu2=true
    else
        error 'Niet afgehandelde keuze.'
        NOERROR=true exit $ERROR
    fi
}


function process_commands {
    local       action=''
    local       command=''
    local -i    exec=0

    show_commands_before_execution
    if $EXECUTE_COMMAND; then
        for exec in "${!EXEC[@]}"; do
            action=$(
                printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=1
                )
            command=$(
                printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=2
                )
            TITLE=$action
            execute_command
        done
        show_commands_after_execution
    fi
}


function show_commands_before_execution {
    local       action=''
    local       command=''
    local -i    exec=0
    local       prompt=''

    if ! $OPTION_GUI; then
        clear -x
    fi
    TEXT='Het volgende wordt uitgevoerd:'
    for exec in "${!EXEC[@]}"; do
        action=$(
            printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=2
            )
        TEXT+="
$exec. $action ($command)"
    done

    prompt='
Doorgaan?'
    if $OPTION_GUI; then
        TEXT+="
$prompt"
        if zenity   --question                  \
                    --no-markup                 \
                    --width         600         \
                    --height        100         \
                    --title         "$TITLE"    \
                    --text          "$TEXT"     \
                    --ok-label      'Ja'        \
                    --cancel-label  'Nee'       2> >($LOGCMD); then
            EXECUTE_COMMAND=true
        else
            EXECUTE_COMMAND=false
        fi
    else
        info "$TEXT"
        while true; do
            read -rp "$prompt [J/n]: "
            case $REPLY in
                j*|J*|'')
                    EXECUTE_COMMAND=true
                    break
                    ;;
                n*|N*)
                    EXECUTE_COMMAND=false
                    break
                    ;;
                *)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
            esac
        done
    fi
}


function execute_command {
    local -i    cmd_rc=0
    local       exec=''
    local       gui_option=''

    if ! $OPTION_GUI; then
        clear -x
    fi

    # Verwerk handmatige acties.
    if [[ $command = 'Handmatig' ]]; then
        manual_actions
        return $SUCCESS
    fi

    # Verwerk (automatische) opdrachten.
    exec=${command/kz /kz-}
    cmd=$(
        printf '%s' "$exec" | cut --delimiter=' ' --fields=1
        )
    arg=$(
        printf '%s' "$exec" | cut --delimiter=' ' --fields=2- --only-delimited
        )
    if $OPTION_GUI; then
        gui_option='--gui'
    fi
    "$PROGRAM_PATH/$cmd" "$arg" $gui_option -- || cmd_rc=$?
    log "$command: rc=$cmd_rc"
    if ! $OPTION_GUI; then
        wait_for_enter
    fi
}


function manual_actions {
    if [[ $TITLE = 'Gebruikers toevoegen' ]]; then
        TEXT="Gebruikers toevoegen:
Voeg eventuele extra Standaard of Beheerder gebruikers toe via een druk op de \
Super-toets[1],
typ 'gebr' en klik achter Instellingen op Gebruikers.
Klik op Ontgrendelen.
Klik op Gebruiker toevoegen.

[1] De Super-toets is de Windows-toets, Command-toets, of Vergrootglas-toets."
        info "$TEXT"
        if ! $OPTION_GUI; then
            wait_for_enter
        fi
    elif [[ $TITLE = 'Gebruikersfoto instellen' ]]; then
        if [[ -f $HOME/Instellingen/Gebruikersfoto ]]; then
            TEXT="Gebruikersfoto instellen:
Wijzig de gebruikersfoto via een druk op de Super-toets[1],
typ 'gebr' en klik achter Instellingen op Gebruikers.
Klik op Ontgrendelen.
Klik op de afbeelding voor de gebruiker.
Klik op Selecteer een bestand.
Selecteer Gebruikersfoto in Persoonlijke map / Instellingen.
Sluit het scherm Gebruikers

[1] De Super-toets is de Windows-toets, Command-toets, of Vergrootglas-toets."
            info "$TEXT"
        else
            TEXT="Gebruikersfoto instellen:
Er is bij het maken van de back-up geen gebruikersfoto gevonden."
            info "$TEXT"
        fi
        if ! $OPTION_GUI; then
            wait_for_enter
            fi
    fi
}


function show_commands_after_execution {
    local       action=''
    local       command=''
    local -i    exec=0

    if ! $OPTION_GUI; then
        clear -x
    fi
    TEXT='Het volgende is uitgevoerd:'
    for exec in "${!EXEC[@]}"; do
        action=$(
            printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=1
            )
        command=$(
            printf '%s' "${EXEC[$exec]}" | cut --delimiter='#' --fields=2
            )
        TEXT+="
$exec. $action ($command)"
    done
    info "$TEXT"
}


function term_script {
    exit $SUCCESS
}


###############################################################################
# Script
###############################################################################

function main {
    init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
