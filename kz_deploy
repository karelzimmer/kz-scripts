#!/bin/bash
# shellcheck source=kz-common.sh
###############################################################################
# Pakket distribueren.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
#
# Auteursrecht (c) 2009-2021 Karel Zimmer.
# GNU Algemene Publieke Licentie <https://www.gnu.org/licenses/gpl.html>.
#
# ReleaseNumber: 62.00.00
# DateOfRelease: 2021-08-08
###############################################################################
source "$(dirname "$0")"/kz-common.sh

#TODO: wil ook .pdf in /usr/share/doc/kzscripts 
###############################################################################
# Global constants
###############################################################################

readonly    OPTIONS_SHORT=$OPTIONS_SHORT_COMMON
readonly    OPTIONS_LONG=$OPTIONS_LONG_COMMON
readonly    USAGE="Gebruik: ${PROGRAM_NAME//kz-/kz } $OPTIONS_USAGE_COMMON"
readonly    HELP="Gebruik: ${PROGRAM_NAME//kz-/kz } [OPTIE...] [--]

Pakket distribueren.

Opties:
$OPTIONS_HELP_COMMON"

readonly    DEBDIR=$HOME/kz-deb
readonly    DEBDIRBUILD=/tmp
readonly    DEBNAME=kz_365_all.deb
readonly    DOCSDIR=$HOME/kz-docs
readonly    SCRIPTSDIR=$HOME/kz-scripts
readonly    SITEDIR=$HOME/uploads/karelzimmer.nl/httpdocs

# De [BIN] wordt gevuld door SCRIPTSDIR.
# De [DOC] wordt gevuld door DOCSDIR.
# De [BACKGROUND_PROP] wordt door dit script gegenereerd.
# Andere mappen en bestanden (zoals pixmaps en control) staan al in SOURCE_DEB.
# Te vullen mappen zijn relatief ten opzichte van $DEBDIR.
readonly -A SOURCE_DEB=(
       [APPLICATIONS]=/usr/share/applications
        [BACKGROUNDS]=/usr/share/backgrounds
    [BACKGROUND_PROP]=/usr/share/gnome-background-properties
                [BIN]=/usr/bin
                [DOC]=/usr/share/doc/kz
                [MAN]=/usr/share/man/man1
           [POLICY_1]=/usr/share/polkit-1/actions
             [README]=/usr/share/doc/kzscripts/README
           [TABCOMPL]=/usr/share/bash-completion/completions
    )
readonly    TARGET_DEB=$SITEDIR/apps/kz

readonly -A SOURCE_UPLOADS=(
       [DOCS]=$DOCSDIR
    [SCRIPTS]=$SCRIPTSDIR
    )
readonly -A TARGET_UPLOADS=(
       [DOCS]=$SITEDIR/data/linux/documents
       [PDFS]=$SITEDIR/data/linux/pdfs
    [SCRIPTS]=$SITEDIR/data/linux/scripts
    )


###############################################################################
# Global variables
###############################################################################


###############################################################################
# Functions
###############################################################################

check_input() {
    local karel_full_name=''
    local ubuntu_full_name=''

    PARSED=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$PROGRAM_NAME"     \
                -- "$@"
        )       || GETOPT_RC=$?
    if [[ $GETOPT_RC -ne $SUCCESS ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit $ERROR
    fi
    eval set -- "$PARSED"
    process_general_options "$@"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf  "$PROGRAM_NAME: %s\n%s\n"   \
                'geen argumenten opgeven'   \
                "$USAGELINE"                >&2
        exit $ERROR
    fi

    karel_full_name=$(
        getent  passwd  karel           |
        awk     -F:     '{print $5}'    |
        awk     -F,     '{print $1}'    || true
        )
    ubuntu_full_name=$(
        getent  passwd  ubuntu          |
        awk     -F:     '{print $5}'    |
        awk     -F,     '{print $1}'    || true
        )
    debian_full_name=$(
        getent  passwd  user            |
        awk     -F:     '{print $5}'    |
        awk     -F,     '{print $1}'    || true
        )
    if ! [[ ($USER = karel  && $karel_full_name  = 'Karel Zimmer'    )  ||
            ($USER = ubuntu && $ubuntu_full_name = 'Live session user') ||
            ($USER = user   && $debian_full_name = 'Debian Live user')  ]]
    then
            TEXT='alleen uitvoeren als ontwikkelaar'
            printf "$PROGRAM_NAME: %s\n%s\n" "$TEXT" "$USAGELINE" >&2
            exit $ERROR
    fi

    # Een non-gui script gestart met optie gui.
    if $OPTION_GUI; then
        OPTION_GUI=false
        TERMINAL=true
    fi

    check_user
}


process_input() {
    create_package
    upload_website
    install_package
}


create_package() {
    check_dependencies
    check_names
    check_scripts
    create_package_files
    create_wallpapapers_configuration_file
    info 'Maak scriptspakket...'
    fakeroot dpkg-deb --build "$DEBDIR" "$TARGET_DEB/$DEBNAME" |& $LOGCMD
}


check_dependencies() {
    if ! command -v enscript 1> /dev/null; then
        info 'Installeer enscript...'
        sudo apt-get install --yes enscript |& $LOGCMD
    fi
    if ! command -v fakeroot 1> /dev/null; then
        info 'Installeer fakeroot...'
        sudo apt-get install --yes fakeroot |& $LOGCMD
    fi
    if ! command -v ghostscript 1> /dev/null; then
        info 'Installeer ghostscript...'
        sudo apt-get install --yes ghostscript |& $LOGCMD
    fi
    if ! command -v lftp 1> /dev/null; then
        info 'Installeer lftp...'
        sudo apt-get install --yes lftp |& $LOGCMD
    fi
    if ! command -v rsync 1> /dev/null; then
        info 'Installeer rsync...'
        sudo apt-get install --yes rsync |& $LOGCMD
    fi
}


check_names() {
    local -i check_rc=0

    info 'Controleer bestandsnamen (kz ckname)...'
    "$SCRIPTSDIR/kz ckname" "$DOCSDIR"      \
                            "$DEBDIR"       \
                            "$SCRIPTSDIR"   || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        warning "
Herstel alle meldingen hierboven en start daarna weer \
${PROGRAM_NAME//kz-/kz }."
        exit $check_rc
    fi
}


check_scripts() {
    local -i check_rc=0

    info 'Controleer scripts (kz ivp)...'
    "$SCRIPTSDIR/kz ivp" || check_rc=$?
    if [[ $check_rc -ne $SUCCESS ]]; then
        warning "
Herstel alle meldingen hierboven en start daarna weer \
${PROGRAM_NAME//kz-/kz }."
        exit $check_rc
    fi
}


create_package_files() {
    local basename=''
    local file=''
    local newfile=''
    local prefix='nl.karelzimmer.'

    chmod 'u=rwx,g=rx,o=rx' -- "$SCRIPTSDIR"/*
    chmod 'a-x' -- "$SCRIPTSDIR"/*.* "$SCRIPTSDIR"/LICENSE

    # De exclude en delete-excluded i.v.m. de lokale git repository.
    rsync   --archive                   \
            --delete                    \
            --exclude='LICENSE'         \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "$DOCSDIR"/                 \
            "$DEBDIR${SOURCE_DEB[DOC]}" |& $LOGCMD

    # Deze rsync is inclusief *.1, *.completion, *.desktop, en *.policy.
    # De exclude en delete-excluded i.v.m. de lokale git repository.
    rsync   --archive                   \
            --delete                    \
            --exclude='LICENSE'         \
            --exclude='README.md'       \
            --exclude='.git*'           \
            --delete-excluded           \
            "$SCRIPTSDIR"/              \
            "$DEBDIR${SOURCE_DEB[BIN]}" |& $LOGCMD

    # Man-pagina's (.1)
    rm --force "$DEBDIR${SOURCE_DEB[MAN]}"/*
    rsync   --archive                       \
            --delete                        \
            --remove-source-files           \
            "$DEBDIR${SOURCE_DEB[BIN]}"/*.1 \
            "$DEBDIR${SOURCE_DEB[MAN]}"     |& $LOGCMD
    gzip --best --force "$DEBDIR${SOURCE_DEB[MAN]}"/*.1 |& $LOGCMD

    # Tab-completion-scripts (.completion)
    rm --force "$DEBDIR${SOURCE_DEB[TABCOMPL]}"/*
    for file in "$DEBDIR${SOURCE_DEB[BIN]}"/*.completion; do
        basename=$(basename "$file" .completion)
        mv "$file" "$DEBDIR${SOURCE_DEB[TABCOMPL]}/$basename" |& $LOGCMD
    done

    # Bureaublad-configuratiebestanden (.desktop)
    rm --force "$DEBDIR${SOURCE_DEB[APPLICATIONS]}"/*
    for file in "$DEBDIR${SOURCE_DEB[BIN]}"/*.desktop; do
        basename=$(basename "$file")
        mv "$file" "$DEBDIR${SOURCE_DEB[APPLICATIONS]}/$basename" |& $LOGCMD
    done

    # PolicyKit actiedefinitiebestanden (.policy)
    rm --force "$DEBDIR${SOURCE_DEB[POLICY_1]}"/*
    for file in "$DEBDIR${SOURCE_DEB[BIN]}"/*.policy; do
        basename=$(basename "$file")
        newfile="$DEBDIR${SOURCE_DEB[POLICY_1]}/$prefix$basename"
        mv "$file" "$newfile" |& $LOGCMD
    done
}


create_wallpapapers_configuration_file() {
    local wallpaper=''
    local wallpapers_config_file=kz-wallpapers.xml

    {
    printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
    printf '%s\n' '<!DOCTYPE wallpapers SYSTEM "gnome-wp-list.dtd">'
    printf '%s\n' '<wallpapers>'
    } > "$DEBDIR${SOURCE_DEB[BACKGROUND_PROP]}/$wallpapers_config_file"

    cd "$DEBDIR${SOURCE_DEB[BACKGROUNDS]}" || exit $ERROR
    for wallpaper in *; do
        printf '%s\n' "    <wallpaper>
        <name>${wallpaper%.*}</name>
        <filename>${SOURCE_DEB[BACKGROUNDS]}/$wallpaper</filename>
        <options>zoom</options>
        <pcolor>#000000</pcolor>
        <scolor>#000000</scolor>
        <shade_type>solid</shade_type>
    </wallpaper>"           \
            >> "$DEBDIR${SOURCE_DEB[BACKGROUND_PROP]}/$wallpapers_config_file"
    done
    printf  '%s\n' \
            '</wallpapers>' >> "$DEBDIR${SOURCE_DEB[BACKGROUND_PROP]}/\
$wallpapers_config_file"
}


upload_website() {
    local ftp_set='set ssl:verify-certificate no'
    local ftp_from=$SITEDIR
    local ftp_to=/httpdocs
    local ftp_opts='--reverse --delete --verbose'
    local ftp_cmd="mirror $ftp_opts $ftp_from $ftp_to"
    local ftp_host=server106.hosting2go.nl
    local ftp_user=kzimmer
    local ftp_login=$HOME/.kz-$ftp_host

    process_checklists
    process_scripts
    synchronize_website
    info 'Upload website...'
    if ! [[ -f $ftp_login ]]; then
        read -rsp "FTP-wachtwoord voor $ftp_host: "
        printf '%s\n' "$REPLY" > "$ftp_login"
        printf '\n'
        chmod 'u=rw,g=,o=' "$ftp_login" |& $LOGCMD
    fi
    if ! lftp   --user      "$ftp_user"                 \
                --password  "$(cat "$ftp_login")"       \
                -e          "$ftp_set; $ftp_cmd; exit"  \
                "$ftp_host"                             |& $LOGCMD; then
        rm      "$ftp_login"
        warning 'Uploaden website is mislukt.'
        warning 'Controleer de log...!'
        exit $WARNING
    fi
    sleep 5
}


process_checklists() {
    local txtfile=''
    local basefile=''
    local changes=false

    info 'Verwerk documenten...'

    # Vanuit gedit.
    rm --force "$HOME"/Documenten/*.pdf

    cd "$DOCSDIR" || exit $ERROR
    for txtfile in *.txt; do
        if ! diff   "$txtfile"                          \
                    "${TARGET_UPLOADS[DOCS]}/$txtfile"  &> /dev/null; then
            basefile=$(basename "$txtfile")
            enscript    --quiet             \
                        --color             \
                        --highlight=bash    \
                        --output=-          \
                        "$txtfile"          |
            ps2pdf      -                   \
                        "${TARGET_UPLOADS[PDFS]}/$basefile.pdf" |& $LOGCMD
            changes=true
            info "    $txtfile"
        fi
    done

    # Vanuit LibreOffice.
    rm --force "$HOME"/Documenten/Checklists/*.pdf |& $LOGCMD

    cd "$DOCSDIR" || exit $ERROR
    for docfile in *.odt; do

        # Verwerk het bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff   "$docfile"                          \
                    "${TARGET_UPLOADS[DOCS]}/$docfile"  &> /dev/null; then
            lowriter    --headless                          \
                        --convert-to pdf                    \
                        --outdir "${TARGET_UPLOADS[PDFS]}"  \
                        "$docfile"                          |& $LOGCMD
            changes=true
            info "    $docfile"
        fi
    done
    if ! $changes; then
        info '    Geen documenten gewijzigd'
    fi
}


process_scripts() {
    local changes=false
    local highlight=''
    local scriptfile=''

    info 'Verwerk scripts...'

    cd "$SCRIPTSDIR" || exit $ERROR
    for scriptfile in *; do

        if [[ $scriptfile = LICENSE || $scriptfile = README.md ]]; then
            continue
        elif [[ -d "$scriptfile" ]]; then
            continue
        fi

        # Verwerk het bestand als deze nieuw of gewijzigd is (deltabepaling).
        if ! diff   "$scriptfile"                               \
                    "${TARGET_UPLOADS[SCRIPTS]}/$scriptfile"    &> /dev/null
        then
            if grep --quiet --regexp='^''.TH ' "$scriptfile"; then
                # Man-pagina.
                man     --troff "$SCRIPTSDIR/$scriptfile"           |
                ps2pdf  - "${TARGET_UPLOADS[PDFS]}/$scriptfile.pdf" |& $LOGCMD
            else
                # Script inclusief *.1, *.completion, *.desktop, en *.policy.
                if grep --quiet                         \
                        --line-regexp                   \
                        --regexp='#!''/usr/bin/python3' \
                        "$scriptfile"; then
                        highlight=python
                elif [[ $scriptfile = *.py ]]; then
                        highlight=python
                elif [[ $scriptfile = *.policy ]]; then
                        highlight=html
                else
                        highlight=bash
                fi
                enscript    --quiet                                     \
                            --color                                     \
                            --highlight=$highlight                      \
                            --title="$scriptfile"                       \
                            --output=-                                  \
                            "$SCRIPTSDIR/$scriptfile"                   |
                ps2pdf      -                                           \
                            "${TARGET_UPLOADS[PDFS]}/$scriptfile.pdf"   \
                            |& $LOGCMD
            fi
            changes=true
            info "    $scriptfile"
        fi
    done
    if ! $changes; then
        info '    Geen scripts gewijzigd'
    fi
}


synchronize_website() {
    printf "%s\n" 'Synchroniseer website...'

    rsync   --archive                       \
            --delete                        \
            --exclude='LICENSE'             \
            --exclude='README.md'           \
            --exclude='.git*'               \
            --delete-excluded               \
            "${SOURCE_UPLOADS[DOCS]}"/      \
            "${TARGET_UPLOADS[DOCS]}"       |& $LOGCMD
    rsync   --archive                       \
            --delete                        \
            --exclude='LICENSE'             \
            --exclude='README.md'           \
            --exclude='.git*'               \
            --delete-excluded               \
            "${SOURCE_UPLOADS[SCRIPTS]}"/   \
            "${TARGET_UPLOADS[SCRIPTS]}"    |& $LOGCMD
}


install_package() {
    info 'Installeer pakket kz (kz getdeb)...'
    # Constructie '2> >($LOGCMD)' om stderr naar de log te krijgen.
    if ! wget -O- karelzimmer.nl/kz 2> >($LOGCMD) | bash; then
        warning 'Installeren pakket kz is niet uitgevoerd.'
        exit $WARNING
    fi
}


term_script() {
    exit $SUCCESS
}


###############################################################################
# Main line
###############################################################################

main() {
    init_script
    check_input "$@"
    process_input
    term_script
}


main "$@"


# EOF
