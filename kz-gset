#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# GUI wijzigen.
#
# Geschreven in 2015 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################

program_path=$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")" && pwd)
source  "$program_path"/kz_common.sh


###############################################################################
# Constants
###############################################################################

program_name='kz-gset'
program_desc='GUI wijzigen'
display_name=${program_name/kz-/kz }

options_short+='a:b:d:lrf:x:'
options_long+=",addfavaft:,addfavbef:,delfav:,list,resetfavs,\
addappfolder:,delappfolder:"
usage="Gebruik: $display_name [-a|--addfavaft=FAVORITE] \
[-b|--addfavbef=FAVORITE]
                 [-d|--delfav=FAVORITE] [-l|--list] [-r|--resetfavs]
                 [-f|--addappfolder=appfolder] [-x|--delappfolder=appfolder]
                 $options_usage"
help="Gebruik: $display_name [OPTIE...]

$program_desc.

Opties:
  -a, --addfavaft=FAVORITE
                 voeg FAVORITE toe aan het einde
  -b, --addfavbef=FAVORITE
                 voeg FAVORITE toe aan het begin
  -d, --delfav=FAVORITE
                 verwijder FAVORITE
  -l, --list     list favorits en appfolders
  -r, --resetfavs
                 reset favorites
  -f, --addappfolder=appfolder
                 voeg appfolder toe
  -x, --delappfolder=appfolder
                 verwijder appfolder
$options_help"


###############################################################################
# Variables
###############################################################################

appfolder=''
config_a=''
config_b=''
desktopfile=''
favorite_argument=''
folder_argument=''
option_addappfolder=false
option_addfavaft=false
option_addfavbef=false
option_delappfolder=false
option_delfav=false
option_list=false
option_resetfavs=false


###############################################################################
# Functions
###############################################################################

function check_input {
    local   -i  getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usageline"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            -a|--addfavaft)
                option_addfavaft=true
                favorite_argument=$2
                shift 2
                ;;
            -b|--addfavbef)
                option_addfavbef=true
                favorite_argument=$2
                shift 2
                ;;
            -d|--delfav)
                option_delfav=true
                favorite_argument=$2
                shift 2
                ;;
            -l|--list)
                option_list=true
                shift
                ;;
            -r|--resetfavs)
                option_resetfavs=true
                shift
                ;;
            -f|--addappfolder)
                option_addappfolder=true
                folder_argument=$2
                shift 2
                ;;
            -x|--delappfolder)
                option_delappfolder=true
                folder_argument=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        info "$display_name:geen argumenten toegestaan"
        info "$usageline"
        exit $err
    fi

    appfolder=$folder_argument
    desktopfile=$favorite_argument.desktop
}


function process_input {
    if $option_addfavaft; then
        process_option_addfavaft
    elif $option_addfavbef; then
        process_option_addfavbef
    elif $option_delfav; then
        process_option_delfav
    elif $option_list; then
        process_option_list
    elif $option_resetfavs; then
        process_option_resetfavs
    elif $option_addappfolder; then
        process_option_addappfolder
    elif $option_delappfolder; then
        process_option_delappfolder
    else
        capture_gui_changes
    fi
}


function process_option_addfavaft  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --word-regexp --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps "$(
            printf '%s' "$favorite_apps" |
            cut --delimiter=']' --fields=1
            ), '$desktopfile']"
    fi
}


function process_option_addfavbef  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        gsettings set org.gnome.shell favorite-apps "['$desktopfile']"
    elif !  printf '%s' "$favorite_apps" |
            grep --quiet --word-regexp --regexp="$desktopfile"; then
        gsettings set org.gnome.shell favorite-apps \
            "['$desktopfile', $(
                printf '%s' "$favorite_apps" | cut --delimiter='[' --fields=2
                )"
    fi
}


function process_option_delfav  {
    local favorite_apps=''

    favorite_apps=$(gsettings get org.gnome.shell favorite-apps)
    if [[ $favorite_apps = '@as []' ]]; then
        :
    elif [[ $favorite_apps = "['$desktopfile']" ]]; then
        gsettings set org.gnome.shell favorite-apps "[]"
    else gsettings set org.gnome.shell favorite-apps "$(
        printf  '%s' "$favorite_apps"                   |
        sed     --expression="s/'$desktopfile', //g"    |
        sed     --expression="s/, '$desktopfile'//"
        )"
    fi
}


function process_option_list  {
    gsettings get org.gnome.shell favorite-apps
    gsettings get org.gnome.desktop.app-folders folder-children
}


function process_option_resetfavs  {
    gsettings reset org.gnome.shell favorite-apps
}


function process_option_addappfolder  {
    local app_folders=''
    local schema=''
    local path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        set org.gnome.desktop.app-folders folder-children "['$appfolder']"
    elif !  printf  '%s' "$app_folders" |
            grep    --quiet             \
                    --word-regexp       \
                    --regexp="$appfolder"; then
        gsettings set org.gnome.desktop.app-folders folder-children "$(
            printf '%s' "$app_folders" | cut --delimiter=']' --fields=1
            ), '$appfolder']"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$appfolder/
    gsettings set "$schema":"$path" name        "$appfolder"
    gsettings set "$schema":"$path" translate   true
    gsettings set "$schema":"$path" categories  "['$appfolder']"
}


function process_option_delappfolder  {
    local app_folders=''
    local schema=''
    local path=''

    app_folders=$(gsettings get org.gnome.desktop.app-folders folder-children)

    if [[ $app_folders = '@as []' ]]; then
        :
    elif [[ $app_folders = "['$appfolder']" ]]; then
        gsettings set org.gnome.desktop.app-folders folder-children "[]"
    else gsettings set org.gnome.desktop.app-folders folder-children "$(
            printf '%s' "$app_folders" | sed --expression="s/, '$appfolder'//"
            )"
    fi
    schema=org.gnome.desktop.app-folders.folder
    path=/org/gnome/desktop/app-folders/folders/$appfolder/
    gsettings reset-recursively "$schema":"$path"
}


function capture_gui_changes {
    config_a=$(mktemp -t "$program_name-A-XXXXXXXXXX.lst")
    save_configuration_database A "$config_a"
    info 'Voer nu de wijziging uit in de grafische werkomgeving.'
    kz_common.wait_for_enter
    config_b=$(mktemp -t "$program_name-B-XXXXXXXXXX.lst")
    save_configuration_database B "$config_b"
    report_database_changes "$config_a" "$config_b"
}


function save_configuration_database {
    local fase=${1:-unknown}
    local output_file=${2:-unknown}

    gsettings list-recursively > "$output_file" 2> >($logcmd)

    sort    --unique                \
            --output="$output_file" \
            "$output_file"

    info "Inhoud configuratiedatabase vastgelegd ($fase)."
}


function report_database_changes {
    local output_file1=${1:-unknown}
    local output_file2=${2:-unknown}

    info '
WIJZIGINGen in de configuratiedatabase,
< is de oude   instelling (A),
> is de nieuwe instelling (B):'
    diff "$output_file1" "$output_file2" | grep --regexp='[>|<]' || true
    info "
Bij WIJZIGINGen voer uit: ${blue}gsettings set WIJZIGING${normal}"
    rm "$config_a" "$config_b"
}


function term_script {
    exit $ok
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
