#!/bin/bash
# shellcheck source=kz_common.sh
###############################################################################
# Apps instellen.
#
# Geschreven in 2013 door Karel Zimmer <info@karelzimmer.nl>, Creative Commons
# Publiek Domein Verklaring <http://creativecommons.org/publicdomain/zero/1.0>.
###############################################################################


###############################################################################
# Constants
###############################################################################

readonly program_name='kz-setup'
readonly program_desc='Apps instellen'
readonly display_name=${program_name/kz-/kz }

program_path=$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}:-$0}")")" && pwd)
readonly program_path
source  "$program_path"/kz_common.sh

readonly options_short+='ace:fgrs'
readonly options_long+=',apps,cat,files,gui,reset,server,simulate'
readonly usage="Gebruik: $display_name [-a|--apps] [-c|--cat] [-f|--files] \
[-g|--gui]
                  [-r|--reset] {--server] [-s|--simulate]
                  $options_usage
                  [APP...] [BESTAND...]"
readonly help="Gebruik: $display_name [OPTIE...] [APP...] [BESTAND...]

$program_desc.

Opties:
  -a, --apps     toon lijst van beschikbare apps
  -c, --cat      toon inhoud van bestanden
  -f, --files    toon lijst van bestanden
  -g, --gui      start in grafische modus
  -r, --reset    reset apps
      --server   apps voor een server instellen
  -s, --simulate toon opdrachten
$options_help

Argumenten:
  APP            opgegeven APPs instellen
  BESTAND        opgegeven BESTANDen verwerken"

distro=$(lsb_release --id --short | tr '[:upper:]' '[:lower:]')
readonly distro

apps_file=$(mktemp -t "$program_name-XXXXXXXXXX.apps")
readonly apps_file
cmds_file=$(mktemp -t "$program_name-XXXXXXXXXX.cmds")
readonly cmds_file
sims_file=$(mktemp -t "$program_name-XXXXXXXXXX.sims")
readonly sims_file


###############################################################################
# Variables
###############################################################################

declare -a  app_arguments=()
declare     argument_app=false
declare     argument_file=false
declare     commands_found=false
declare     edition=desktop
declare     execute_commands=true
declare -a  file_arguments=()
declare -a  files_to_process=()
declare -i  maxrc=0
declare     option_apps=false
declare     option_cat=false
declare     option_files=false
declare     option_gui=false
declare     OPTION_RESET=false
declare     option_simulate=false
declare     status_busy=''
declare     status_err=''
declare     status_ok=''


###############################################################################
# Functions
###############################################################################

function check_input {
    local   -i  app_arg_num=0
    local   -i  file_arg_num=0
    local   -i  getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$options_short"    \
                --longoptions   "$options_long"     \
                --name          "$display_name"     \
                --              "$@"
        ) || getopt_rc=$?
    if [[ $getopt_rc -ne $ok ]]; then
        info "$usageline"
        exit $err
    fi
    eval set -- "$parsed"
    kz_common.process_options "$@"

    while true; do
        case $1 in
            -a|--apps)
                option_apps=true
                shift
                ;;
            -c|--cat)
                option_cat=true
                shift
                ;;
            -f|--files)
                option_files=true
                shift
                ;;
            -g|--gui)
                option_gui=true
                kz_common.reset_terminal_attributes
                shift
                ;;
            -r|--reset)
                OPTION_RESET=true
                shift
                ;;
            --server)
                edition=server
                shift
                ;;
            -s|--simulate)
                option_simulate=true
                execute_commands=false
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    # Verwerk argumenten.
    while [[ "$*" ]]; do
        if [[ "$(basename "$1")" == $program_name-*.sh ]]; then
            argument_file=true
            file_arguments[file_arg_num]=$1
            ((++file_arg_num))
            shift
        else
            argument_app=true
            app_arguments[app_arg_num]=$1
            ((++app_arg_num))
            shift
        fi
    done
}


function process_input {
    local       dfltfile_1=''
    local       dfltfile_2=''
    local       file_notfound=false
    local   -i  file_num=0
    local       file=''

    # Verwerk argumenten.
    dfltfile_1=$program_path/$program_name-$distro-$edition.sh
    dfltfile_2=$program_path/$program_name-$distro-$edition-$HOSTNAME-$USER.sh
    if $argument_app; then
        process_argument_app
    fi
    if $argument_file; then
        process_argument_file
    fi
    # Ergens hiervoor ging het niet helemaal goed.
    if $file_notfound; then
        exit $err
    fi
    # Voor bepaalde argumenten en opties geen standaardbestanden verwerken.
    if ! ($argument_app || $argument_file || $option_files); then
        process_dfltfiles
    fi

    # Verwerk overige opties; afhankelijk van bestanden en argumenten.
    if $option_apps; then
        process_option_apps
        exit $ok
    elif $option_cat; then
        process_option_cat
        exit $ok
    elif $option_files; then
        process_option_files
        exit $ok
    fi

    for file in "${files_to_process[@]}"; do
        cat "$file" >> "$cmds_file"
    done

    if $execute_commands && $option_gui; then
        title='Apps instellen'
        text='Instellen voorbereiden'
        # Met '|& zenity --progress' worden globale variabelen uit aangeroepen
        # functies niet doorgegeven, vandaar de process substitution met
        # '> >(zenity...)'.
        process_cmds_file > >(
            zenity  --progress              \
                    --pulsate               \
                    --auto-close            \
                    --no-cancel             \
                    --width     700         \
                    --height    50          \
                    --title     "$title"    \
                    --text      "$text"     2> >($logcmd)
            )
    else
        process_cmds_file
    fi
}


function process_argument_app {
    local       app=''
    local       file=''
    local   -a  files=()

    # Zoek naar beschikbare APPs in alle instelbestanden.
    for file in "$program_path/$program_name-"*.sh; do
        files+=("$file")
    done
    for app in "${app_arguments[@]}"; do
        file=$(
            grep    --files-with-matches    \
                    --word-regexp           \
                    --regexp="#1 $app"      \
                    "${files[@]}"           \
                    2> >($logcmd)           |
            head    --lines=1               || printf '\n'
            )
        if [[ $file ]]; then
            process_argument_app_file
        else
            info "App $app niet gevonden."
            file_notfound=true
        fi
    done
    if $file_notfound; then
        info "Typ '$display_name --apps' voor beschikbare apps." >&2
    else
        files_to_process[file_num]=$apps_file
        ((++file_num))
    fi
}


function process_argument_app_file {
    local app_found=false
    local record=''

    while read -r record; do
        case $record in
            '#1 '*)
                if [[ $record == '#1 '$app* ]]; then
                    # Gezochte app-naam.
                    # Regels doorschrijven naar tijdelijk bestand tot
                    # eerstvolgende app-naam of tot eof.
                    app_found=true
                    printf '%b\n' "$record" >> "$apps_file"
                elif $app_found; then
                    # Volgende app.
                    app_found=false
                    continue
                fi
                ;;
            '#1-'*)
                if $app_found; then
                    # Volgende (hidden) app.
                    break
                fi
                ;;
            *)
                # Overige regels.
                if $app_found; then
                    printf '%s\n' "$record" >> "$apps_file"
                fi
                ;;
        esac
    done < "$file"
}


function process_argument_file {
    local file=''

    for file in "${file_arguments[@]}"; do
        if [[ -f $file ]]; then
            files_to_process[file_num]=$file
            ((++file_num))
        else
            info "Bestand $file niet gevonden."
            file_notfound=true
        fi
    done
    if $file_notfound; then
        info "Typ '$display_name --files' voor beschikbare bestanden." >&2
    fi
}


function process_dfltfiles {
    if [[ -f $dfltfile_1 ]]; then
        files_to_process[file_num]=$dfltfile_1
        ((++file_num))
    else
        err "Geen bestanden gevonden voor $distro $edition." >&2
        info "$usageline"
        exit $err
    fi
    if [[ -f $dfltfile_2 ]]; then
        files_to_process[file_num]=$dfltfile_2
        ((++file_num))
    fi
}


function process_option_apps {
    local -a files=()

    # Zoek naar beschikbare APPs in alle instelbestanden.
    for file in "$program_path/$program_name-"*.sh; do
        files+=("$file")
    done
    text="De volgende APPs zijn beschikbaar om in te stellen:

     APP (BESCHRIJVING)
$(
    if !    grep    --no-messages           \
                    --regexp='^#1 '         \
                    "${files[@]}"           |
            cut     --delimiter=' '         \
                    --fields=2-             |
            sort    --unique                |
            nl      --number-width=2        \
                    --number-format=rn      \
                    --number-separator='] ' \
                    --body-numbering=a      |
            sed     --expression='s/^/[/'; then
        printf '%s\n' "     0 Geen apps gevonden voor $distro."
    else
        printf '%s\n' "
Om de APPs in te stellen voer uit: ${blue}$display_name APP...${normal}
Om het instellen van APPs te simuleren voer uit: ${blue}$display_name \
--simulate APP...${normal}
Om de inhoud van het instelbestand voor APPs te bekijken voer uit: \
${blue}$display_name --cat APP...${normal}"
    fi
)"
    info "$text"
}


function process_option_cat {
    local first_file=true

    for file in "${files_to_process[@]}"; do
        {
            if $first_file; then
                first_file=false
            else
                printf '\n'
            fi
            printf '%s\n' "${blue}# $file${normal}"
            cat "$file"
        }   >> "$cmds_file"
    done
    less "$less_options" "$cmds_file"
}


function process_option_files {
    text="De volgende instelBESTANDen zijn aanwezig:

     BESTAND
$(
    if !    find    "$program_path/$program_name-"* \
                    2> >($logcmd)                   |
            nl      --number-width=2                \
                    --number-format=rn              \
                    --number-separator='] '         \
                    --body-numbering=a              |
            sed     --expression='s/^/[/'; then
        printf '%s\n' "     0 Geen bestanden aanwezig.

$usageline"
    else
        printf '%s\n' "
Om de BESTANDen te verwerken voer uit: ${blue}$display_name BESTAND...${normal}
Om de inhoud van BESTANDen te bekijken voer uit: ${blue}$display_name --cat \
BESTAND...${normal}
Om de verwerking van BESTANDen te simuleren voer uit: ${blue}$display_name \
--simulate BESTAND...${normal}"
    fi
)"
    info "$text"
}


function process_cmds_file {
    local       app_description=''
    local       first_description_line=true
    local       operation='instellen'
    local       record=''
    local       recordtype=''
    local       write_app_description_line=true
    local   -i  app_seq_num=0
    local   -i  app_tot_num=0
    local   -i  cmd_seq_num=0

    app_tot_num=$(
        grep --word-regexp --regexp='^#1' --count "$cmds_file" || true
        )
    if [[ $app_tot_num -gt 99 ]]; then
        app_tot_num=99
    fi

    if $OPTION_RESET; then
        operation='resetten'
    fi
    if $option_simulate; then
        operation+=' simuleren'
    else
        status_busy="[${blink}${yellow}Werk${normal}]"
        status_err="[${red}Fout${normal}]"
        status_ok="[${green}Goed${normal}]"
        printf '%s' "${cursor_invisable}"
    fi

    while read -r record; do
        recordtype=${record:0:2}
        case $recordtype in
            '')
                # Lege regel of lege app-naam.
                continue
                ;;
            '#1')
                # Appnaam en -beschrijving.
                process_app_description_record "$record"
                ;;
            '#2')
                # Resetopdracht.
                if $OPTION_RESET; then
                    process_command_record "${record:3}"
                fi
                ;;
            '#'*)
                # Commentaarregel.
                continue
                ;;
            *)
                # Instelopdracht.
                if ! $OPTION_RESET; then
                    process_command_record "$record"
                fi
                ;;
        esac
    done < "$cmds_file"

    printf '%s' "${cursor_visable}"
}


function process_app_description_record {
    local record=${1:-unknown}

    app_description="${record:3} $operation"
    write_app_description_line=true
    ((++app_seq_num))
    if [[ $app_seq_num -gt 99 ]]; then
        app_seq_num=99
    fi
    cmd_seq_num=0
}


function process_command_record {
    local       cmd=${1:-unknown}
    local       app_description_line=''
    local   -i  cmd_rc=0
    local   -i  desc_maxlen=1000
    local       desc_printf=''
    local       status=''

    commands_found=true
    ((++cmd_seq_num))
    if [[ $cmd_seq_num -gt 99 ]]; then
        cmd_seq_num=99
    fi

    if $execute_commands; then
        desc_printf=$app_description
        if $option_gui; then
            text="#[$app_seq_num/$app_tot_num] $app_description\n\n$cmd"
            printf '%s\n' "$text"
        else
            # Afbreken tekst in Terminalvenster moet i.v.m. updaten status.
            #  <--------------- tput cols --------------->
            # '[WERK] [ 1/1 ] [ 1] Te lange description...' <=== op 1 regel
            #  <------- 20 ------->                    <3>
            desc_maxlen=$(($(tput cols) - 20))
            if [[ ${#desc_printf} -gt $desc_maxlen ]]; then
                desc_printf=${desc_printf:0:(($desc_maxlen - 3))}'...'
            fi
        fi
        printf  -v app_description_line                             \
                "[%2d/%-2d] [%2d] %-${desc_maxlen}.${desc_maxlen}s" \
                "$app_seq_num"                                      \
                "$app_tot_num"                                      \
                "$cmd_seq_num"                                      \
                "$desc_printf"
        execute_command "$cmd"
    else
        if $write_app_description_line; then
            if $first_description_line; then
                first_description_line=false
            else
                printf '\n' >> "$sims_file"
            fi
            printf  '[%2d/%-2d] %s\n'   \
                    "$app_seq_num"      \
                    "$app_tot_num"      \
                    "$app_description"  >> "$sims_file"
            write_app_description_line=false
        fi
        printf  '%7s [%2d] %s\n'        \
                " "                     \
                "$cmd_seq_num"          \
                "${blue}$cmd${normal}"  >> "$sims_file"
    fi
}


function execute_command {
    local       cmd=${1:-unknown}
    local   -i  cmd_rc=0
    local       status=''

    if ! $option_gui; then
        if [[ $cmd_seq_num -eq 1 ]]; then
            printf "$status_busy %b" "$app_description_line\r"
        else
            printf "$status_busy        %b" "${app_description_line:7}\r"
        fi
    fi

    log "$app_description_line"
    log "${blue}$cmd${normal}"
    eval "$cmd" |& $logcmd || cmd_rc=$?
    if [[ $cmd_rc -gt $maxrc ]]; then
        maxrc=$cmd_rc
    fi
    if [[ $cmd_rc -eq $ok ]]; then
        status="$status_ok"
    else
        status="$status_err"
    fi
    log "$status rc=$cmd_rc, maxrc=$maxrc"
    if ! $option_gui; then
        printf '%s\n' "$status"
    fi
}


function term_script {
    local action='instellen'

    if ! $commands_found; then
        info 'Geen opdrachten om uit te voeren.'
    elif $execute_commands; then
        if [[ $maxrc -ne $ok ]]; then
            err "Eén of meer opdrachten zijn fout gegegaan.
De maximale afsluitwaarde is $maxrc.
Controleer de log in het Terminalvenster met de opdracht: \
${blue}$logcmd_check${normal}"
            exit $err
        else
            if $OPTION_RESET; then
                action='resetten'
            fi
            info "
Apps $action is voltooid."
        fi
    else
        less "$less_options" "$sims_file"
    fi
    exit $ok
}


###############################################################################
# Script
###############################################################################

function main {
    kz_common.init_script "$@"
    check_input "$@"
    process_input
    term_script
}

main "$@"
